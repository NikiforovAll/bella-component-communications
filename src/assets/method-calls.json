{
  "nodes": [
    {
      "componentName": "ApiGateway",
      "references": [
        {
          "methodName": "GetPropositionById",
          "context": "    Proposition = ProductCatalog.GetPropositionById(Proposition.id)",
          "line": "2",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetFilteredUsagesCallDataRecords",
          "context": "    GetFilteredUsagesCallDataRecordsResponse = BillingEngine.GetFilteredUsagesCallDataRecords(ServiceAccountId, VirtualBalanceRecordFilterList, PerPage, PageNumber)",
          "line": "13",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "TryGetUsagesCallDataRecordParts",
          "context": "        UsagesCallDataRecordParts = Cdr.TryGetUsagesCallDataRecordParts",
          "line": "29",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "GetUsagesVideoOnDemandVirtualBalanceRecordId",
          "context": "    VirtualBalanceRecordId = BillingEngine.GetUsagesVideoOnDemandVirtualBalanceRecordId(ServiceAccountId)",
          "line": "52",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetUsagesVideoOnDemands",
          "context": "        VideoOnDemand.GetUsagesVideoOnDemands(VirtualBalanceRecordId, PerPage, PageNumber),",
          "line": "57",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "VideoOnDemand"
        },
        {
          "methodName": "GetOrderOpenProcessCheckInfo",
          "context": "    DashboardOpenProcessCheckFulfillmentDto = Fulfillment.GetOrderOpenProcessCheckInfo(OrderId)",
          "line": "62",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetTaskListByTaskIdList",
          "context": "        TaskList = TaskManager.GetTaskListByTaskIdList(TaskIdList)",
          "line": "70",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes = BillingEngine.GetProcessesByAccountId(AccountId)",
          "line": "85",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCreditTransferProcessBankPart",
          "context": "    CreditTransferProcessBankPartByCreditTransferId = BankComponent.GetCreditTransferProcessBankPart",
          "line": "90",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= BankComponent.GetProcessesByAccountId(AccountId)",
          "line": "99",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= CrmBackend.GetProcessesByAccountId(AccountId)",
          "line": "101",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= DunningService.GetProcessesByAccountId(AccountId)",
          "line": "103",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= Fulfillment.GetProcessesByAccountId(AccountId)",
          "line": "105",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= InvoiceGenerator.GetProcessesByAccountId(AccountId)",
          "line": "107",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= TaskManager.GetProcessesByAccountId(AccountId)",
          "line": "109",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= MailStorage.GetProcessesByAccountId(AccountId)",
          "line": "111",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "MailStorage"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= SendgridService.GetProcessesByAccountId(AccountId)",
          "line": "113",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "SendgridService"
        },
        {
          "methodName": "GetProcessesByAccountId",
          "context": "    Processes ++= PlanningstoolService.GetProcessesByAccountId(AccountId)",
          "line": "115",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetEmployeeAccountsFullNames",
          "context": "    EmployeeAccountsFullNames = CrmBackend.GetEmployeeAccountsFullNames()",
          "line": "117",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes = BillingEngine.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "152",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCreditTransferProcessBankPart",
          "context": "    CreditTransferProcessBankPartByCreditTransferId = BankComponent.GetCreditTransferProcessBankPart",
          "line": "157",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes ++= CrmBackend.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "166",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes ++= BankComponent.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "168",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes ++= DunningService.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "170",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes ++= Fulfillment.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "172",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes ++= InvoiceGenerator.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "174",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    Processes ++= PlanningstoolService.GetProcessesForServiceAccount(AccountId, ServiceAccountId)",
          "line": "176",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetEmployeeAccountsFullNames",
          "context": "    EmployeeAccountsFullNames = CrmBackend.GetEmployeeAccountsFullNames()",
          "line": "178",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPagedServiceAccountContractMutations",
          "context": "    PagedServiceAccountContractMutationsResponse = BillingEngine.GetPagedServiceAccountContractMutations(AccountId, ServiceAccountId, PageNumber, PerPage)",
          "line": "188",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetExpenditureDetails",
          "context": "    ExpenditureDetailsDtos = BillingEngine.GetExpenditureDetails(ServiceAccountId)",
          "line": "192",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CommonApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccountDto = CrmBackend.GetCustomerAccountById(AccountId).ToDto()",
          "line": "2",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "6",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateMyNleAccount",
          "context": "    AccountId = CrmBackend.CreateMyNleAccount(CreateCustomerAccountRequest)",
          "line": "11",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccounts",
          "context": "    CrmCustomerAccountDtos = CrmBackend.GetCustomerAccounts().Select(x => x.ToCrmDto())",
          "line": "14",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetFilteredCustomerAccounts",
          "context": "    CrmPagedCustomerAccountsDto = CrmBackend.GetFilteredCustomerAccounts(Input, PageNumber, PerPage).ToPagedCustomerAccountsDto()",
          "line": "17",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "IsLoginInUse",
          "context": "    Boolean = IdentityServer.IsLoginInUse(CreateEmployeeAccountRequest.contactInfo.email)",
          "line": "20",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "CreateEmployeeAccount",
          "context": "        AccountId = CrmBackend.CreateEmployeeAccount(CreateEmployeeAccountRequest)",
          "line": "22",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GeneratePassword",
          "context": "        Password = IdentityServer.GeneratePassword(Length)",
          "line": "24",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "RegisterUser",
          "context": "        IdentityServer.RegisterUser(CreateEmployeeAccountRequest.contactInfo.email, Password, ConfirmPassword, AccountId)",
          "line": "26",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AssignRoles",
          "context": "        IdentityServer.AssignRoles(AccountId, CreateEmployeeAccountRequest.roles)",
          "line": "27",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AssignTaskSkillsToEmployee",
          "context": "        TaskManager.AssignTaskSkillsToEmployee(AccountId, CreateEmployeeAccountRequest.skills)",
          "line": "28",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "UpdateEmployeeAccount",
          "context": "    CrmBackend.UpdateEmployeeAccount(UpdateEmployeeAccountRequest)",
          "line": "35",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetEmployeeAccountById",
          "context": "    EmployeeAccountDto = CrmBackend.GetEmployeeAccountById(AccountId).ToDtoEmployee()",
          "line": "38",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "TryGetLoginInfoByAccountId",
          "context": "    let LoginInfoDto = IdentityServer.TryGetLoginInfoByAccountId(AccountId).ToDto()",
          "line": "39",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetEmployeeAccounts",
          "context": "    EmployeeAccountDtos = CrmBackend.GetEmployeeAccounts().Select(x => x.ToDtoEmployee())",
          "line": "46",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPagedEmployeeAccounts",
          "context": "    PagedEmployeeAccountsDto = CrmBackend.GetPagedEmployeeAccounts(PageNumber, PerPage).ToDto()",
          "line": "49",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "TryGetLoginInfoByAccountId",
          "context": "        let LoginInfoDto = IdentityServer.TryGetLoginInfoByAccountId(EmployeeAccountDto.id).ToDto()",
          "line": "51",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "CreatePartnerAccount",
          "context": "    AccountId = CrmBackend.CreatePartnerAccount(CreatePartnerAccountRequest)",
          "line": "58",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GeneratePassword",
          "context": "    Password = IdentityServer.GeneratePassword(Length)",
          "line": "60",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "RegisterUser",
          "context": "    IdentityServer.RegisterUser(CreatePartnerAccountRequest.contactInfo.email, Password, ConfirmPassword, AccountId)",
          "line": "62",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AssignRoles",
          "context": "    IdentityServer.AssignRoles(AccountId, CreatePartnerAccountRequest.roles)",
          "line": "63",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, \"\")",
          "line": "65",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "UpdatePartnerAccount",
          "context": "    CrmBackend.UpdatePartnerAccount(UpdatePartnerAccountRequest)",
          "line": "70",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPartnerAccountById",
          "context": "    PartnerAccountDto = CrmBackend.GetPartnerAccountById(AccountId).ToDtoPartner()",
          "line": "73",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPartnerAccounts",
          "context": "    PartnerAccountDtos = CrmBackend.GetPartnerAccounts().Select(x => x.ToDtoPartner())",
          "line": "76",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPagedPartnerAccounts",
          "context": "    PagedPartnerAccountsDto = CrmBackend.GetPagedPartnerAccounts(PageNumber, PerPage).ToDto()",
          "line": "79",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetRoleByName",
          "context": "    UserRoleDto = IdentityServer.GetRoleByName(RoleName).ToDto()",
          "line": "82",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetPagedRoles",
          "context": "    PagedUserRolesDto = IdentityServer.GetPagedRoles(PageNumber, PerPage).ToDto()",
          "line": "85",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetAllRoles",
          "context": "    UserRolesDto = IdentityServer.GetAllRoles().Select(x => x.ToDto())",
          "line": "88",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetAccountRoles",
          "context": "    UserRolesDto = IdentityServer.GetAccountRoles(AccountId).Select(x => x.ToDto())",
          "line": "91",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "CreateRole",
          "context": "    IdentityServer.CreateRole(CreateRoleRequestDto.adfsName, CreateRoleRequestDto.roleName, CreateRoleRequestDto.rights)",
          "line": "94",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "UpdateRole",
          "context": "    IdentityServer.UpdateRole(UpdateRoleRequestDto.oldRoleName, UpdateRoleRequestDto.adfsName, UpdateRoleRequestDto.newRoleName, UpdateRoleRequestDto.rights)",
          "line": "97",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AssignRoles",
          "context": "    IdentityServer.AssignRoles(AssignRolesRequestDto.accountId, AssignRolesRequestDto.roleNames)",
          "line": "100",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "RevokeRole",
          "context": "    IdentityServer.RevokeRole(AccountId, RoleName)",
          "line": "103",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteRole",
          "context": "    IdentityServer.DeleteRole(RoleName)",
          "line": "106",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetLoginInfo",
          "context": "    LoginInfoDto = IdentityServer.GetLoginInfo(Email).ToDto()",
          "line": "109",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "TryGetLoginInfoByAccountId",
          "context": "    LoginInfoDto = IdentityServer.TryGetLoginInfoByAccountId(AccountId).ToDto()",
          "line": "112",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetFilteredAndPagedServiceInformation",
          "context": "    CrmPortalGetFilteredAndPagedServiceDeliveryInformationResponse = CrmBackend.GetFilteredAndPagedServiceInformation(Input, FullyMatchedPaginationInfo, PartiallyMatchedPaginationInfo).ToDto()",
          "line": "118",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    CrmServiceAccountDtos = BillingEngine.GetServiceAccounts(AccountId).Select(x => x.ToCrmDto())",
          "line": "121",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    CrmServiceAccountDtos = BillingEngine.GetServiceAccounts(AccountId).Where(x => x.getStatus(now) == ServiceAccountStatus.Active).Select(x => x.ToCrmDto())",
          "line": "124",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    CrmSubscriptionListDtos = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId).Select(x => x.ToCrmDto(ProductCatalog.GetProductName(x.productId)))",
          "line": "127",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerFincancialDetails",
          "context": "    CustomerFinancialDetailsDto = SapAccountBalanceService.GetCustomerFincancialDetails(SapAccountId)",
          "line": "130",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "SapAccountBalanceService"
        },
        {
          "methodName": "SetOrderCustomerId",
          "context": "    Fulfillment.SetOrderCustomerId(OrderId, AccountId)",
          "line": "134",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateOrderOnHoldSetting",
          "context": "    SettingId = Fulfillment.CreateOrderOnHoldSetting(OrderOnHoldSettingRequest)",
          "line": "137",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "DeleteOrderOnHoldSetting",
          "context": "    Fulfillment.DeleteOrderOnHoldSetting(SettingId)",
          "line": "140",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetOrderRiskLevelFromCrm",
          "context": "    Fulfillment.SetOrderRiskLevelFromCrm(OrderId, CreditRiskLevel)",
          "line": "145",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CheckAndSetCreditScore",
          "context": "    Fulfillment.CheckAndSetCreditScore(OrderId)",
          "line": "150",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "151",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderOnHoldSettings",
          "context": "    PagedOrderOnHoldSettings = Fulfillment.GetOrderOnHoldSettings(PageNumber, PerPage)",
          "line": "163",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderDetails",
          "context": "    DashboardOrderDto = Fulfillment.GetOrderDetails(OrderId)",
          "line": "170",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "    AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "190",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAvailablePropositonByOrderId",
          "context": "    AvailableProposition = Fulfillment.GetAvailablePropositonByOrderId(OrderId)",
          "line": "203",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProductById",
          "context": "            Product = ProductCatalog.GetProductById(ProductId)",
          "line": "216",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetDiscountById",
          "context": "                    Discount = ProductCatalog.GetDiscountById(PricePlanId, BundleId)",
          "line": "223",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "PostponeOrderPropositionVendorCheck",
          "context": "    Fulfillment.PostponeOrderPropositionVendorCheck(OrderId, Integer)",
          "line": "238",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CheckOrderProposition",
          "context": "    CheckOrderPropositionResponse = Fulfillment.CheckOrderProposition(OrderId)",
          "line": "241",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "244",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProductById",
          "context": "        Product = ProductCatalog.GetProductById(ProductId)",
          "line": "254",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetBundleById",
          "context": "            Bundle = ProductCatalog.GetBundleById(BundleId)",
          "line": "257",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPropositionsByBundleId",
          "context": "    PropositionDtoCollection = ProductCatalog.GetPropositionsByBundleId(BundleId).Select(p => p.ToDto())",
          "line": "282",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPropositionsByServiceCategoryId",
          "context": "    PropositionDtoCollection = ProductCatalog.GetPropositionsByServiceCategoryId(ServiceCategoryId).Select(p => p.ToDto())",
          "line": "285",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetBundlesByPropositionId",
          "context": "    BundleDtos = ProductCatalog.GetBundlesByPropositionId(PropositionId).Select(b => b.ToCrmDto())",
          "line": "288",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateBundleCoverage",
          "context": "    ProductCatalog.UpdateBundleCoverage(UpdateBundleCoverageRequest)",
          "line": "291",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "AddEventRateClassCoverage",
          "context": "    ProductCatalog.AddEventRateClassCoverage(AddEventRateClassCoverageRequest)",
          "line": "294",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteEventRateClassCoverage",
          "context": "    ProductCatalog.DeleteEventRateClassCoverage(DeleteEventRateClassCoverageRequest)",
          "line": "297",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "AddBundleCoverageItem",
          "context": "    EventRateClassCoverageId = ProductCatalog.AddBundleCoverageItem(AddBundleCoverageItemRequest)",
          "line": "300",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteBundleCoverageItem",
          "context": "    ProductCatalog.DeleteBundleCoverageItem(DeleteBundleCoverageItemRequest)",
          "line": "303",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetBundleCoveragesByBundleId",
          "context": "    BundleCoverageDto = ProductCatalog.GetBundleCoveragesByBundleId(BundleId)",
          "line": "306",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetDiscountsByPropositionId",
          "context": "    CrmDiscountDtos = ProductCatalog.GetDiscountsByPropositionId(PropositionId).Select(b => b.ToCrmDto())",
          "line": "309",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedOrders",
          "context": "    CrmPortalGetPagedOrdersResponse = Fulfillment.GetPagedOrders(PageNumber, RecordsPerPage)",
          "line": "312",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetSalesOfficeIdsWithName",
          "context": "    SalesOfficeIds = ProductCatalog.GetSalesOfficeIdsWithName(CrmPortalOrderFilterDto.salespartnerName)",
          "line": "315",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetFilteredAndPagedOrders",
          "context": "    CrmPortalGetFilteredAndPagedOrdersResponse = Fulfillment.GetFilteredAndPagedOrders(OrderFilterList, PageNumber, RecordsPerPage)",
          "line": "318",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetSalesOfficeNamesForIds",
          "context": "    SalesOfficeNamesById = ProductCatalog.GetSalesOfficeNamesForIds(SalesOfficeIds)",
          "line": "319",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceCategoriesByTypeOfServiceId",
          "context": "    ServiceCategoryFulfillmentPartListDtos = Fulfillment.GetServiceCategoriesByTypeOfServiceId(TypeOfServiceId).Select(sc => sc.ToCrmDto())",
          "line": "326",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetTypeOfServicesByServiceCategoryId",
          "context": "    TypeOfServiceListDtos = Fulfillment.GetTypeOfServicesByServiceCategoryId(ServiceCategoryId).Select(tos => tos.ToCrmDto())",
          "line": "329",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "PutOrderOnHoldManually",
          "context": "    Fulfillment.PutOrderOnHoldManually(OrderId)",
          "line": "331",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "ReturnOrderBackToProccessAfterOnHoldManually",
          "context": "    Fulfillment.ReturnOrderBackToProccessAfterOnHoldManually(OrderId)",
          "line": "334",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateOrders",
          "context": "    CreateOrderResponsesList = Fulfillment.CreateOrders(CreatedBy, CreateOrderRequestsList)",
          "line": "341",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateOrders",
          "context": "    CreateOrderResponsesList = Fulfillment.CreateOrders(CreatedBy, CreateOrderRequestsList)",
          "line": "348",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "UpdateOrder",
          "context": "    BaseOrderResponse = Fulfillment.UpdateOrder(UpdateOrderRequest)",
          "line": "352",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAnnaOrdersForPlugwise",
          "context": "   AnnaOrdersForPlugwiseResponse = Fulfillment.GetAnnaOrdersForPlugwise(PageNumber, PerPage)",
          "line": "355",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SkipOrderCooldownPeriod",
          "context": "    OrderStatus = Fulfillment.SkipOrderCooldownPeriod(OrderId)",
          "line": "358",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAllTypesOfService",
          "context": "    TypeOfServiceListDtos = ProductCatalog.GetAllTypesOfService().Select(t => t.ToCrmDto())",
          "line": "361",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetRangeOfTypeOfServices",
          "context": "    TypeOfServiceListDtos = ProductCatalog.GetRangeOfTypeOfServices(TypeOfServiceIdCollection).Select(t => t.ToCrmDto())",
          "line": "364",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetTypeOfServiceById",
          "context": "    TypeOfServiceDto = ProductCatalog.GetTypeOfServiceById(TypeOfServiceId).ToCrmDto()",
          "line": "367",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteTypeOfService",
          "context": "    ProductCatalog.DeleteTypeOfService(TypeOfServiceId)",
          "line": "370",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateTypeOfService",
          "context": "    TypeOfServiceId = ProductCatalog.CreateTypeOfService(TypeOfServiceCreationRequest)",
          "line": "373",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateTypeOfService",
          "context": "    ProductCatalog.UpdateTypeOfService(TypeOfServiceUpdateRequest)",
          "line": "376",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateBundle",
          "context": "    BundleId = ProductCatalog.CreateBundle(BundleCreationRequest)",
          "line": "379",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateBundle",
          "context": "    ProductCatalog.UpdateBundle(BundleUpdateRequest)",
          "line": "382",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteBundle",
          "context": "    ProductCatalog.DeleteBundle(BundleId)",
          "line": "385",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllBundles",
          "context": "    BundleDtos = ProductCatalog.GetAllBundles().Select(x => x.ToCrmDto())",
          "line": "388",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetBundlesByTypeOfServiceId",
          "context": "    BundleDtos = ProductCatalog.GetBundlesByTypeOfServiceId(TypeOfServiceId).Select(x => x.ToCrmDto())",
          "line": "394",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPartialBundles",
          "context": "    GetPartialBundlesResponse = ProductCatalog.GetPartialBundles(GetPartialBundleRequest)",
          "line": "399",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetBundlesByProductTemplateId",
          "context": "    BundleDtos = ProductCatalog.GetBundlesByProductTemplateId(ProductTemplateId).Select(x => x.ToCrmDto())",
          "line": "404",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetBundleById",
          "context": "    BundleDto = ProductCatalog.GetBundleById(BundleId).ToCrmDto()",
          "line": "408",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateProposition",
          "context": "    PropositionId = ProductCatalog.CreateProposition(PropositionCreationRequest)",
          "line": "412",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPropositionById",
          "context": "    PropositionDto = ProductCatalog.GetPropositionById(PropositionId).ToDto()",
          "line": "417",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllPropositions",
          "context": "    PropositionDtoCollection = ProductCatalog.GetAllPropositions().Select(x => x.ToDto())",
          "line": "421",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetProposiotionIdsActiveForMonthlyTerminablePackages",
          "context": "    PropositionIdsActiveForMonthlyterminablePackages = ProductCatalog.GetProposiotionIdsActiveForMonthlyTerminablePackages()",
          "line": "422",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetFilteredPropositions",
          "context": "    PropositionDtoCollection = ProductCatalog.GetFilteredPropositions(SalesOfferPropositionsFilter)",
          "line": "432",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateProposition",
          "context": "    ProductCatalog.UpdateProposition(PropositionUpdateRequest)",
          "line": "438",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteProposition",
          "context": "    ProductCatalog.DeleteProposition(PropositionId)",
          "line": "443",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateProductTemplate",
          "context": "    ProductTemplateId = ProductCatalog.CreateProductTemplate(ProductTemplateCreationRequest)",
          "line": "448",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetProductTemplateById",
          "context": "    CrmProductTemplateDto = ProductCatalog.GetProductTemplateById(ProductTemplateId).ToDto()",
          "line": "453",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllProductTemplates",
          "context": "    CrmProductTemplateDtoCollection = ProductCatalog.GetAllProductTemplates().Select(x => x.ToDto())",
          "line": "460",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedProductTemplates",
          "context": "    PagedProductTemplates = ProductCatalog.GetPagedProductTemplates(PageNumber = PageNumber, PerPage = PerPage)",
          "line": "464",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateProductTemplate",
          "context": "    ProductCatalog.UpdateProductTemplate(ProductTemplateUpdateRequest)",
          "line": "473",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteProductTemplate",
          "context": "    ProductCatalog.DeleteProductTemplate(ProductTemplateId)",
          "line": "478",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedAndFilteredTaskList",
          "context": "    GetFilteredAndPagedTasksResponse = TaskManager.GetPagedAndFilteredTaskList(TaskFilterList, TasksPerPage, PageNumber)",
          "line": "483",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetFilteredTaskList",
          "context": "    TaskDtoList = TaskManager.GetFilteredTaskList(TaskFilterList).Select(t => t.ToDto())",
          "line": "492",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetAllPricePlans",
          "context": "    CrmPricePlanDtos = ProductCatalog.GetAllPricePlans().Select(x => x.ToCrmDto())",
          "line": "496",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPricePlanById",
          "context": "    CrmPricePlanDto = ProductCatalog.GetPricePlanById(PricePlanId).ToCrmDto()",
          "line": "502",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreatePricePlan",
          "context": "    PricePlanId = ProductCatalog.CreatePricePlan(PricePlanCreationRequest)",
          "line": "508",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreatePricePlanForProductTemplate",
          "context": "    PricePlanId = ProductCatalog.CreatePricePlanForProductTemplate(PricePlanForProductTemplateCreationRequest)",
          "line": "513",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdatePricePlan",
          "context": "    ProductCatalog.UpdatePricePlan(PricePlanUpdateRequest)",
          "line": "519",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeletePricePlan",
          "context": "    ProductCatalog.DeletePricePlan(PricePlanId)",
          "line": "525",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllPriceItems",
          "context": "    CrmPriceItemDtos = ProductCatalog.GetAllPriceItems(PricePlanId).Select(x => x.ToCrmDto())",
          "line": "531",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetLastPriceItems",
          "context": "    CrmPriceItemDtos = ProductCatalog.GetLastPriceItems(PricePlanId).Select(x => x.ToCrmDto())",
          "line": "537",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPriceItemsById",
          "context": "    CrmPriceItemDtos = ProductCatalog.GetPriceItemsById(PricePlanId, BundleId).Select(x => x.ToCrmDto())",
          "line": "543",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreatePriceItem",
          "context": "    PriceItemId = ProductCatalog.CreatePriceItem(PriceItemCreationRequest)",
          "line": "549",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeletePriceItems",
          "context": "    ProductCatalog.DeletePriceItems(PriceItemDeletionRequest)",
          "line": "555",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdatePriceItem",
          "context": "    ProductCatalog.UpdatePriceItem(PriceItemUpdateRequest)",
          "line": "559",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllDiscounts",
          "context": "    CrmDiscountDtos = ProductCatalog.GetAllDiscounts(PricePlanId).Select(x => x.ToCrmDto())",
          "line": "564",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetDiscountById",
          "context": "    CrmDiscountDto = ProductCatalog.GetDiscountById(PricePlanId, BundleId).ToCrmDto()",
          "line": "570",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateDiscount",
          "context": "    DiscountId = ProductCatalog.CreateDiscount(DiscountCreationRequest)",
          "line": "576",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateDiscount",
          "context": "    ProductCatalog.UpdateDiscount(DiscountUpdateRequest)",
          "line": "582",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteDiscount",
          "context": "    ProductCatalog.DeleteDiscount(DiscountDeletionRequest)",
          "line": "588",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetProductById",
          "context": "    CrmProductDto = ProductCatalog.GetProductById(ProductId).ToCrmDto()",
          "line": "594",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllProducts",
          "context": "    CrmProductDtos = ProductCatalog.GetAllProducts().Select(x => x.ToCrmDto())",
          "line": "600",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllExtendedProducts",
          "context": "    CrmExtendedProductDtos = ProductCatalog.GetAllExtendedProducts().Select(x => x.ToCrmDto())",
          "line": "606",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPartialProducts",
          "context": "    CrmPartialProductsDto = ProductCatalog.GetPartialProducts(PartialDataRequest).ToCrmDto()",
          "line": "612",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateProduct",
          "context": "    ProductId = ProductCatalog.CreateProduct(ProductCreationRequest)",
          "line": "618",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateProduct",
          "context": "    ProductCatalog.UpdateProduct(ProductUpdateRequest)",
          "line": "624",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteProduct",
          "context": "    ProductCatalog.DeleteProduct(ProductId)",
          "line": "630",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateTaskRule",
          "context": "    TaskRuleId = TaskManager.CreateTaskRule(CrmPortalTaskRuleCreationRequest.ToTaskManagerCreationRequest())",
          "line": "634",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "DeleteTaskRuleById",
          "context": "    TaskManager.DeleteTaskRuleById(TaskRuleId)",
          "line": "638",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetPagedTaskRuleList",
          "context": "    CrmPortalPagedTaskRulesResponse = TaskManager.GetPagedTaskRuleList(PageNumber, TaskRulesPerPage).ToDto()",
          "line": "642",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskSkillList",
          "context": "    TaskSkillList = TaskManager.GetTaskSkillList()",
          "line": "646",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskSkillListByAccountId",
          "context": "    TaskSkillList = TaskManager.GetTaskSkillListByAccountId(AccountId)",
          "line": "649",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskUrgencyList",
          "context": "    TaskUrgencyLabelList = TaskManager.GetTaskUrgencyList().Select(tu => tu.urgencyLabel)",
          "line": "652",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskImportanceList",
          "context": "    TaskImportanceLabelList = TaskManager.GetTaskImportanceList().Select(ti => ti.importanceLabel)",
          "line": "656",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskComponentList",
          "context": "    TaskComponentList = TaskManager.GetTaskComponentList()",
          "line": "660",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskSubcomponentList",
          "context": "    TaskSubcomponentList = TaskManager.GetTaskSubcomponentList()",
          "line": "664",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskRelatedServiceList",
          "context": "    TaskRelatedServiceList = TaskManager.GetTaskRelatedServiceList()",
          "line": "668",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetTaskTypeList",
          "context": "    TaskTypeList = TaskManager.GetTaskTypeList()",
          "line": "672",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetCategoriesList",
          "context": "    CategoriesList = TaskManager.GetCategoriesList()",
          "line": "675",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetLastOpenTaskWithoutRulesList",
          "context": "    CrmPortalGetLastOpenTaskWithoutRulesListResponse = TaskManager.GetLastOpenTaskWithoutRulesList(TasksPerPage, PageNumber).ToDto()",
          "line": "678",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetGroupedTaskWithoutRulesCountList",
          "context": "    CrmPortalGetGroupedTaskWithoutRulesCountListReponse = TaskManager.GetGroupedTaskWithoutRulesCountList(RecordsPerPage, PageNumber).ToDto()",
          "line": "681",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetProductsByPropositionId",
          "context": "    CrmProductDtos = ProductCatalog.GetProductsByPropositionId(PropositionId).Select(p => p.ToCrmDto())",
          "line": "686",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "SetProcessBlockingTaskList",
          "context": "    Fulfillment.SetProcessBlockingTaskList(BlockingTaskTypesList)",
          "line": "690",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProcessBlockingTaskList",
          "context": "    BlockingTaskTypesList = Fulfillment.GetProcessBlockingTaskList()",
          "line": "693",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAvailablePropositionsByZipCode",
          "context": "    GetAvailablePropositionsResponse = Fulfillment.GetAvailablePropositionsByZipCode(GetAvailablePropositionsRequest)",
          "line": "701",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAvailablePropositionsByZipCodeAndSalesOffice",
          "context": "    GetAvailablePropositionsResponse = Fulfillment.GetAvailablePropositionsByZipCodeAndSalesOffice(GetAvailablePropositionsRequest)",
          "line": "711",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAllCashbacksForPricePlan",
          "context": "    CrmCashbackDtoList = ProductCatalog.GetAllCashbacksForPricePlan(PricePlanId).Select(p => p.ToCrmDto())",
          "line": "714",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetCashbackByIdForPricePlan",
          "context": "    CrmCashbackDto = ProductCatalog.GetCashbackByIdForPricePlan(PricePlanId, CashbackId).ToCrmDto()",
          "line": "717",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetTaskForEmployee",
          "context": "    BaseTask = TaskManager.GetTaskForEmployee(AccountId)",
          "line": "721",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "AssignTaskToEmployee",
          "context": "    BaseTask = TaskManager.AssignTaskToEmployee(TaskId, AccountId)",
          "line": "730",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetRelatedTaskListByTaskId",
          "context": "    TaskList = TaskManager.GetRelatedTaskListByTaskId(BaseTask.id)",
          "line": "739",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetEmployeeListByIdList",
          "context": "    AccountList = CrmBackend.GetEmployeeListByIdList(AccountIds)",
          "line": "747",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "IsEmployeeHaveTask",
          "context": "    Boolean = TaskManager.IsEmployeeHaveTask(AccountId)",
          "line": "750",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CloseTaskById",
          "context": "    TaskManager.CloseTaskById(CloseTaskRequest.accountId, CloseTaskRequest.taskId, CloseTaskRequest.relatedTaskIdList, CloseTaskRequest.comment)",
          "line": "753",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "PostponeTaskById",
          "context": "    TaskManager.PostponeTaskById(PostponeTaskRequest.accountId, PostponeTaskRequest.taskId, PostponeTaskRequest.delayValue, PostponeTaskRequest.comment)",
          "line": "757",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "PostponeTaskPerUser",
          "context": "    TaskManager.PostponeTaskPerUser(AccountId, TaskId)",
          "line": "760",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "ReassignTaskById",
          "context": "    TaskManager.ReassignTaskById(ReassignTaskRequest.accountId, ReassignTaskRequest.taskId, ReassignTaskRequest.taskSkill, ReassignTaskRequest.comment)",
          "line": "763",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CreateTask",
          "context": "    TaskId = TaskManager.CreateTask(ManualTaskCreationRequest)",
          "line": "775",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "AddCommentToTask",
          "context": "    TaskManager.AddCommentToTask(AddCommentToTaskRequest.accountId, AddCommentToTaskRequest.taskId, AddCommentToTaskRequest.comment)",
          "line": "778",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CreateCashback",
          "context": "    CashbackId = ProductCatalog.CreateCashback(CashbackCreationRequest)",
          "line": "781",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateCashback",
          "context": "    ProductCatalog.UpdateCashback(CashbackUpdateRequest)",
          "line": "784",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteCashback",
          "context": "    ProductCatalog.DeleteCashback(CashbackDeletionRequest)",
          "line": "787",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "ResetPasswordEmailForLogin",
          "context": "    IdentityServer.ResetPasswordEmailForLogin(Login)",
          "line": "790",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "StartOrderFromSpecificOrderStateByOrderIdAndOrderStateId",
          "context": "    Fulfillment.StartOrderFromSpecificOrderStateByOrderIdAndOrderStateId(AccountId, OrderId, OrderStateId)",
          "line": "793",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetInitialInvoiceByServiceAccountId",
          "context": "    CrmPortalInvoiceDto = InvoiceGenerator.GetInitialInvoiceByServiceAccountId(ServiceAccountId).ToCrmPortalInvoiceDto()",
          "line": "797",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ResolveBlock",
          "context": "    Fulfillment.ResolveBlock(OrderId)",
          "line": "803",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CancelOrder",
          "context": "    Fulfillment.CancelOrder(OrderId, AccountId)",
          "line": "806",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDuplicateCheckInfoForOrder",
          "context": "    DuplicateCheckInfoForOrder = Fulfillment.GetDuplicateCheckInfoForOrder(OrderId)",
          "line": "809",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDuplicateOrderRelatedTaskId",
          "context": "    TaskId = Fulfillment.GetDuplicateOrderRelatedTaskId(OrderId)",
          "line": "812",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetBlackListDetailsForOrder",
          "context": "    BlackListCheckFulfillmentInfo = Fulfillment.GetBlackListDetailsForOrder(OrderId)",
          "line": "815",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetActiveSupplyCheckInfo",
          "context": "    ActiveSupplyCheckInfo = Fulfillment.GetActiveSupplyCheckInfo(OrderId)",
          "line": "825",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateEventRateClass",
          "context": "    RateClassId = ProductCatalog.CreateEventRateClass(EventRateClassCreationRequest)",
          "line": "828",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateEventRateClass",
          "context": "    ProductCatalog.UpdateEventRateClass(EventRateClassUpdateRequest)",
          "line": "831",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteEventRateClass",
          "context": "    ProductCatalog.DeleteEventRateClass(RateClassId)",
          "line": "834",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllEventRateClasses",
          "context": "    RateClassDtos = ProductCatalog.GetAllEventRateClasses().Select(r => r.ToCrmDto())",
          "line": "837",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreatePhoneCode",
          "context": "    Cdr.CreatePhoneCode(CreatePhoneCodeRequest)",
          "line": "840",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "UpdatePhoneCode",
          "context": "    Cdr.UpdatePhoneCode(UpdatePhoneCodeRequest)",
          "line": "843",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "DeletePhoneCode",
          "context": "    Cdr.DeletePhoneCode(RegionCode)",
          "line": "846",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "GetPartialPhoneCodeData",
          "context": "    GetPartialPhoneCodesResponse = Cdr.GetPartialPhoneCodeData(GetPartialPhoneCodeRequest)",
          "line": "849",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "GetPhoneCodeByRegionCode",
          "context": "    PhoneCode = Cdr.GetPhoneCodeByRegionCode(RegionCode)",
          "line": "852",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "SetOrderInstallationDate",
          "context": "    Fulfillment.SetOrderInstallationDate(OrderId, InstallationDate)",
          "line": "858",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "ResolveBlockedOrderAndMoveToCompletedState",
          "context": "    Fulfillment.ResolveBlockedOrderAndMoveToCompletedState(OrderId)",
          "line": "861",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetActiveOrClosedServiceInformationItemListByCustomerIdList",
          "context": "    ServiceInformationItemList = BillingEngine.GetActiveOrClosedServiceInformationItemListByCustomerIdList(CustomerIdList)",
          "line": "866",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CobsGetDslOrderByTriplePlayOrderId",
          "context": "    CobsDslOrder = Fulfillment.CobsGetDslOrderByTriplePlayOrderId(OrderId)",
          "line": "878",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "879",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "TryGetAdjustingOrderById",
          "context": "    AdjustingOrder = Fulfillment.TryGetAdjustingOrderById(OrderId)",
          "line": "882",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetCobsTvOrderByTriplePlayOrderId",
          "context": "    CobsTvOrder = Fulfillment.GetCobsTvOrderByTriplePlayOrderId(OrderId)",
          "line": "887",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetCobsExternalProductNameByExternalCode",
          "context": "    Name = ProductCatalog.GetCobsExternalProductNameByExternalCode(CobsTvOrder.productTypeCode.ToString())",
          "line": "888",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "TryGetAdjustingOrderById",
          "context": "    AdjustingOrder = Fulfillment.TryGetAdjustingOrderById(OrderId)",
          "line": "891",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsGetVoipOrderByTriplePlayOrderId",
          "context": "    CobsVoipOrder = Fulfillment.CobsGetVoipOrderByTriplePlayOrderId(OrderId)",
          "line": "896",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetCobsExternalProductNameByExternalCode",
          "context": "    Name = ProductCatalog.GetCobsExternalProductNameByExternalCode(CobsVoipOrder.voipData.voipProductTypeCode.ToString())",
          "line": "897",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "TryGetAdjustingOrderById",
          "context": "    AdjustingOrder = Fulfillment.TryGetAdjustingOrderById(OrderId)",
          "line": "900",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "RunDeepCheckForFailedRequestManuallyByOrderId",
          "context": "    Fulfillment.RunDeepCheckForFailedRequestManuallyByOrderId(OrderId)",
          "line": "906",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendDslProvide",
          "context": "    Fulfillment.CobsResendDslProvide(CobsDslUpdateProvideRequest)",
          "line": "909",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendDslTakeOver",
          "context": "    Fulfillment.CobsResendDslTakeOver(CobsDslUpdateTakeOverRequest)",
          "line": "913",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsSendDslProvideWithoutDeepCheck",
          "context": "    Fulfillment.CobsSendDslProvideWithoutDeepCheck(CobsDslUpdateProvideRequest)",
          "line": "917",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsSendDslTakeOverWithoutDeepCheck",
          "context": "    Fulfillment.CobsSendDslTakeOverWithoutDeepCheck(CobsDslUpdateTakeOverRequest)",
          "line": "921",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendDslChange",
          "context": "    Fulfillment.CobsResendDslChange(CobsDslUpdateChangeRequest)",
          "line": "925",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendDslCease",
          "context": "    Fulfillment.CobsResendDslCease(CobsDslUpdateCeaseRequest)",
          "line": "929",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendTvProvide",
          "context": "    Fulfillment.CobsResendTvProvide(CobsTvUpdateProvideRequest)",
          "line": "933",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendTvChange",
          "context": "    Fulfillment.CobsResendTvChange(CobsTvUpdateChangeRequest)",
          "line": "937",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendTvCease",
          "context": "    Fulfillment.CobsResendTvCease(CobsTvUpdateCeaseRequest)",
          "line": "941",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendVoipProvide",
          "context": "    Fulfillment.CobsResendVoipProvide(CobsVoipUpdateProvideRequest)",
          "line": "945",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendVoipChange",
          "context": "    Fulfillment.CobsResendVoipChange(CobsVoipUpdateChangeRequest)",
          "line": "949",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendVoipCease",
          "context": "    Fulfillment.CobsResendVoipCease(CobsVoipUpdateCeaseRequest)",
          "line": "953",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsResendMoveDslOrder",
          "context": "    Fulfillment.CobsResendMoveDslOrder(CobsUpdateMoveDslRequest)",
          "line": "957",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetInstallationOrderDtoByEntityId",
          "context": "    InstallationOrderDto = PlanningstoolService.GetInstallationOrderDtoByEntityId(EntityId)",
          "line": "960",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetTriplePlayOrderToCobsOrdersMapByOrderId",
          "context": "    TriplePlayCobsIdsMapDto = Fulfillment.GetTriplePlayOrderToCobsOrdersMapByOrderId(OrderId).ToCrmPortalDto()",
          "line": "963",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPackagesByOrderId",
          "context": "    PackageAccountInfo = Fulfillment.GetPackagesByOrderId(OrderId)",
          "line": "966",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPackages",
          "context": "    PackageAccountInfo = Fulfillment.GetPackages(AccountId, ServiceAccountId, TvTypeOfServiceId)",
          "line": "969",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SwitchTvPackages",
          "context": "    Fulfillment.SwitchTvPackages(CreatedBy, PackageChangeRequest)",
          "line": "977",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipSettingsId",
          "context": "    VoipSettingsId = Fulfillment.GetVoipSettingsId(AccountId, ServiceAccountId)",
          "line": "980",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipSettings",
          "context": "    GetSubscriberSettingsResponse = Fulfillment.GetVoipSettings(AccountId, ServiceAccountId, VoipSettingsId)",
          "line": "983",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetVoipSettings",
          "context": "    Fulfillment.SetVoipSettings(SubscriberSettingsDto, AccountId, ServiceAccountId)",
          "line": "986",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipAccountStatus",
          "context": "    GetVoipAccountStatusResponse = Fulfillment.GetVoipAccountStatus(AccountId, ServiceAccountId)",
          "line": "989",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetVoipAccountStatus",
          "context": "    Fulfillment.SetVoipAccountStatus(AccountId, ServiceAccountId, VoipStateStatus, Voip_refLockedBy)",
          "line": "992",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetTvAccountState",
          "context": "    Fulfillment.SetTvAccountState(AccountId, ServiceAccountId, TVStateStatus)",
          "line": "995",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetLineState",
          "context": "    Fulfillment.SetLineState(AccountId, ServiceAccountId, LineStatus, PageText)",
          "line": "998",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPhonebookEntry",
          "context": "    GetPhonebookEntryResponse = Fulfillment.GetPhonebookEntry(AccountId, ServiceAccountId)",
          "line": "1001",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetPhonebookEntry",
          "context": "    Fulfillment.SetPhonebookEntry(PhonebookEntryDto, AccountId, ServiceAccountId)",
          "line": "1004",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPackages",
          "context": "    PackageAccountInfo = Fulfillment.GetPackages(AccountId, ServiceAccountId, VoipTypeOfServiceId)",
          "line": "1007",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SwitchVoipPackages",
          "context": "    Fulfillment.SwitchVoipPackages(CreatedBy, PackageChangeRequest)",
          "line": "1015",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateAdjustingOrder",
          "context": "    OrderId = Fulfillment.CreateAdjustingOrder(EmployeeId, CrmPortalCreateAdjustingOrderRequest.CrmPortalToCreateAdjustingOrderRequest())",
          "line": "1018",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastTvAdjustingOrder",
          "context": "    OrderId = Fulfillment.GetLastTvAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "1021",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastVoipAdjustingOrder",
          "context": "    OrderId = Fulfillment.GetLastVoipAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "1024",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastUpgradeDslAdjustingOrderId",
          "context": "    OrderId = Fulfillment.GetLastUpgradeDslAdjustingOrderId(AccountId, ServiceAccountId)",
          "line": "1027",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(CrmPortalSendEmailWithContractToCustomerRequest.accountId, CrmPortalSendEmailWithContractToCustomerRequest.serviceAccountId)",
          "line": "1030",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetWishDateByOrderId",
          "context": "    DateTime = Fulfillment.GetWishDateByOrderId(CrmPortalSendEmailWithContractToCustomerRequest.orderId)",
          "line": "1031",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendEmailWithContractToCustomer",
          "context": "    SendgridServiceAsync.SendEmailWithContractToCustomer(CustomerInfo, CrmPortalSendEmailWithContractToCustomerRequest.contractId, CrmPortalSendEmailWithContractToCustomerRequest.orderId, DateTime)",
          "line": "1032",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerContractAccessLink",
          "context": "    AwsStorageFileLink = FileStorageComponent.GetCustomerContractAccessLink(CrmPortalGetCustomerContractAccessLinkRequest.accountId, CrmPortalGetCustomerContractAccessLinkRequest.contractId)",
          "line": "1036",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "GetInvoicePdfAccessLink",
          "context": "    AwsStorageFileLink = FileStorageComponent.GetInvoicePdfAccessLink(InvoiceId)",
          "line": "1039",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "GetEmailAttachmentAccessLink",
          "context": "    AwsStorageFileLink = FileStorageComponent.GetEmailAttachmentAccessLink(CrmPortalGetEmailAttachmentLinkRequest.storageFileId)",
          "line": "1042",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "UpdateCustomerAccount",
          "context": "    CrmBackend.UpdateCustomerAccount(UpdateCustomerAccountRequest)",
          "line": "1045",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetInstallationProcess",
          "context": "    InstallationProcess = PlanningstoolService.GetInstallationProcess(AccountId, ProcessId)",
          "line": "1048",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "InitiateOrderCancellation",
          "context": "    Fulfillment.InitiateOrderCancellation(OrderId, AccountId, CancellationReason, CancellationFeeType, SendCeaseDslIfNeeded)",
          "line": "1051",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SwitchPropositionMonthlyTerminableState",
          "context": "    ProductCatalog.SwitchPropositionMonthlyTerminableState(SwitchPropositionMonthlyTerminableStateRequest)",
          "line": "1054",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "SwitchPropositionOrderTypeProlongate",
          "context": "    ProductCatalog.SwitchPropositionOrderTypeProlongate(SwitchPropositionOrderTypeProlongateRequest)",
          "line": "1057",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "SwitchPropositionOrderTypeNew",
          "context": "    ProductCatalog.SwitchPropositionOrderTypeNew(SwitchPropositionOrderTypeNewRequest)",
          "line": "1060",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetDslConnectionInfo",
          "context": "    DslConnectionInfo = Fulfillment.GetDslConnectionInfo(AccountId, ServiceAccountId)",
          "line": "1072",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "1079",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInfoAboutPendingAdjustingOrdersForServiceAccount",
          "context": "    ServiceAccountPendingAdjustingOrdersInfo = Fulfillment.GetInfoAboutPendingAdjustingOrdersForServiceAccount(ServiceAccountId)",
          "line": "1082",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetStartSupplyInfo",
          "context": "    StartSupplyInfoDto = Fulfillment.GetStartSupplyInfo(OrderId).ToDto()",
          "line": "1093",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetStartSupplyTypeByOrderId",
          "context": "    StartSupplyType = Fulfillment.GetStartSupplyTypeByOrderId(OrderId)",
          "line": "1096",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAllStartSupplyInfo",
          "context": "    StartSupplyInfosDto = Fulfillment.GetAllStartSupplyInfo(AccountId, ServiceAccountId).Select(x => x.ToDto())",
          "line": "1099",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderProcessByOrderId",
          "context": "    Process = Fulfillment.GetAdjustingOrderProcessByOrderId(OrderId)",
          "line": "1102",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastTvAdjustingOrder",
          "context": "    OrderId = Fulfillment.GetLastTvAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "1107",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "        OrderEventType = Fulfillment.GetAdjustingOrderById(OrderId).state.type",
          "line": "1109",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastVoipAdjustingOrder",
          "context": "    OrderId = Fulfillment.GetLastVoipAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "1113",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "        OrderEventTypeString = Fulfillment.GetAdjustingOrderById(OrderId).state.type + \"\"",
          "line": "1115",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastUpgradeDslAdjustingOrderId",
          "context": "    OrderId = Fulfillment.GetLastUpgradeDslAdjustingOrderId(AccountId, ServiceAccountId)",
          "line": "1119",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "        OrderEventTypeString = Fulfillment.GetAdjustingOrderById(OrderId).state.type + \"\"",
          "line": "1121",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetFirstTypeOfServiceIdByAdjustingOrderId",
          "context": "    TypeOfServiceId = Fulfillment.GetFirstTypeOfServiceIdByAdjustingOrderId(AdjustingOrderId)",
          "line": "1124",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPropositionInfoByAdjustingOrderId",
          "context": "    PropositionInfo = Fulfillment.GetPropositionInfoByAdjustingOrderId(AdjustingOrderId)",
          "line": "1127",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastTvAdjustingOrder",
          "context": "    OrderId = Fulfillment.GetLastTvAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "1131",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastVoipAdjustingOrder",
          "context": "    OrderId = Fulfillment.GetLastVoipAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "1137",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastUpgradeDslAdjustingOrderId",
          "context": "    OrderId = Fulfillment.GetLastUpgradeDslAdjustingOrderId(AccountId, ServiceAccountId)",
          "line": "1143",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOverstappenDossierDtoByOrderId",
          "context": "    OverstappenDossierDto = Fulfillment.GetOverstappenDossierDtoByOrderId(OrderId)",
          "line": "1150",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOverstappenDonorProcessByOrderId",
          "context": "    OverstappenDossier = Fulfillment.GetOverstappenDonorProcessByOrderId(OrderId)",
          "line": "1155",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "RetryOverstappenRequest",
          "context": "    Fulfillment.RetryOverstappenRequest(OverstappenRetryRequest)",
          "line": "1164",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAssignedOrderInfo",
          "context": "    AssignedOrderInfo = Fulfillment.GetAssignedOrderInfo(OrderId)",
          "line": "1171",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDslConnectionInfo",
          "context": "    DslConnectionInfo = Fulfillment.GetDslConnectionInfo(AccountId, ServiceAccountId)",
          "line": "1178",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDslConnectionInfoByProcessId",
          "context": "    DslConnectionInfo = Fulfillment.GetDslConnectionInfoByProcessId(OrderId)",
          "line": "1181",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendTokenDetails",
          "context": "    MailStorage.SendTokenDetails(TokenDetails)",
          "line": "1184",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "MailStorage"
        },
        {
          "methodName": "ChangeIban",
          "context": "    BankComponent.ChangeIban(ChangeIbanRequest)",
          "line": "1188",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "ValidateIban",
          "context": "    ValidationResult = Fulfillment.ValidateIban(MemberIban)",
          "line": "1192",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetInvoicePartialCollectionByServiceAccountId",
          "context": "    GetInvoicePartialCollectionResponse = InvoiceGenerator.GetInvoicePartialCollectionByServiceAccountId(GetInvoicePartialCollectionRequest)",
          "line": "1198",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetClearanceBlockStatusForInvoices",
          "context": "        ClearanceBlockStatusCollection = BillingEngine.GetClearanceBlockStatusForInvoices(InvoiceIds)",
          "line": "1211",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetDunningBlockStateCollectionForInvoices",
          "context": "        InvoiceDunningBlockStateCollection = DunningService.GetDunningBlockStateCollectionForInvoices(AccountId, ServiceAccountId, InvoiceIds)",
          "line": "1212",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "GetDirectDebitBlockStatusForInvoices",
          "context": "        DirectDebitStatusForInvoiceCollection = InvoiceGenerator.GetDirectDebitBlockStatusForInvoices(InvoiceIds)",
          "line": "1213",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetPaylinksForInvoices",
          "context": "        PaylinkDtoByInvoiceId = MailToPay.GetPaylinksForInvoices(InvoiceIds)",
          "line": "1214",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "MailToPay"
        },
        {
          "methodName": "GetVirtualBalanceRecordDetails",
          "context": "    GetVirtualBalanceRecordDetailsResponse = BillingEngine.GetVirtualBalanceRecordDetails(GetVirtualBalanceRecordDetailsRequest)",
          "line": "1227",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetDunningBlockReasons",
          "context": "    FinancialBlockReasonDtos = DunningService.GetDunningBlockReasons().Select(fbr => fbr.ToCrmDto())",
          "line": "1233",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "AddDunningBlockToInvoices",
          "context": "    DunningService.AddDunningBlockToInvoices(AddDunningBlockToInvoicesRequest)",
          "line": "1236",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "AddDunningBlockToServiceAccount",
          "context": "    DunningService.AddDunningBlockToServiceAccount(AccountId = AccountId, ServiceAccountId = ServiceAccountId, DunningBlockCreationRequest = DunningBlockCreationRequest)",
          "line": "1239",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "GetInvoice",
          "context": "    CrmPortalInvoiceDto = InvoiceGenerator.GetInvoice(InvoiceId).ToCrmPortalInvoiceDto()",
          "line": "1242",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "CancelOverstappenRecipientProcess",
          "context": "    Fulfillment.CancelOverstappenRecipientProcess(OrderId, Note)",
          "line": "1245",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "1248",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountMandate",
          "context": "    Mandate = BankComponent.GetServiceAccountMandate(ServiceAccountId)",
          "line": "1252",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPaymentsViewEntries",
          "context": "    GetPaymentsViewEntriesResponse = BankComponent.GetPaymentsViewEntries(ServiceAccountId, PerPage, PageNumber)",
          "line": "1256",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPaymentsViewEntriesByInvoiceId",
          "context": "    PaymentsViewEntries = BankComponent.GetPaymentsViewEntriesByInvoiceId(GetPaymentsViewEntriesByInvoiceIdRequest)",
          "line": "1267",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "UnmatchTransaction",
          "context": "    BankComponent.UnmatchTransaction(BankTransactionId, ChangedBy)",
          "line": "1270",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "AddRegion",
          "context": "    PlanningstoolService.AddRegion(RegionName, CodesRanges)",
          "line": "1275",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetAllRegions",
          "context": "    RegionsDto = PlanningstoolService.GetAllRegions().Select(x => x.ToDto())",
          "line": "1278",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetRegionByName",
          "context": "    RegionDto = PlanningstoolService.GetRegionByName(RegionName).ToDto()",
          "line": "1281",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "UpdateRegion",
          "context": "    PlanningstoolService.UpdateRegion(RegionName, CodesRanges)",
          "line": "1284",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "DeleteRegion",
          "context": "    PlanningstoolService.DeleteRegion(RegionName)",
          "line": "1287",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "UpdateCodeRange",
          "context": "    PlanningstoolService.UpdateCodeRange(RegionName, CodesRange)",
          "line": "1290",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "DeleteCodesRange",
          "context": "    PlanningstoolService.DeleteCodesRange(RegionName, CodesRangeId)",
          "line": "1293",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetPlanningsToolConfigurationById",
          "context": "    PlanningsToolConfiguration = PlanningstoolService.GetPlanningsToolConfigurationById(PlanningsToolConfigurationId)",
          "line": "1296",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "CreatePlanningsToolConfiguration",
          "context": "    PlanningstoolService.CreatePlanningsToolConfiguration(PlanningsToolConfiguration)",
          "line": "1299",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetAllPlanningsToolConfigurations",
          "context": "    PlanningsToolConfigurations = PlanningstoolService.GetAllPlanningsToolConfigurations()",
          "line": "1302",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "UpdatePlanningsToolConfiguration",
          "context": "    PlanningstoolService.UpdatePlanningsToolConfiguration(PlanningsToolConfiguration)",
          "line": "1305",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "DeletePlanningsToolConfigurationById",
          "context": "    PlanningstoolService.DeletePlanningsToolConfigurationById(PlanningsToolConfigurationId)",
          "line": "1308",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetCrossedInstallationBookItems",
          "context": "    InstallationBookItemsDto = PlanningstoolService.GetCrossedInstallationBookItems(PlanningsToolConfiguration)",
          "line": "1311",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetDefaultPlanningsToolConfiguration",
          "context": "    PlanningsToolConfiguration = PlanningstoolService.GetDefaultPlanningsToolConfiguration()",
          "line": "1314",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetPagedPlanningsToolConfigurations",
          "context": "    PagedPlanningsToolConfigurationsDto = PlanningstoolService.GetPagedPlanningsToolConfigurations(PageNumber, ConfigurationsPerPage, PlanningsToolConfigurationState).ToDto()",
          "line": "1317",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetCurrentPlanningsToolConfiguration",
          "context": "    PlanningsToolConfiguration = PlanningstoolService.GetCurrentPlanningsToolConfiguration()",
          "line": "1320",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetUsagesVideoOnDemands",
          "context": "    GetUsagesVideoOnDemandsResponse = VideoOnDemand.GetUsagesVideoOnDemands(VirtualBalanceRecordId, PerPage, PageNumber)",
          "line": "1334",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "VideoOnDemand"
        },
        {
          "methodName": "CancelAdjustingOrder",
          "context": "    Fulfillment.CancelAdjustingOrder(AdjustingOrderId, AccountId, CancellationReason, CancellationFeeType, SendCancelationEmailIfNeeded)",
          "line": "1338",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetInProgressAdjustingOrdersByServiceAccountId",
          "context": "    AdjustingOrderInfoCollection = Fulfillment.GetInProgressAdjustingOrdersByServiceAccountId(ServiceAccountId)",
          "line": "1341",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderInfoByOrderId",
          "context": "    AdjustingOrderInfo = Fulfillment.GetAdjustingOrderInfoByOrderId(OrderId)",
          "line": "1344",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CancelAdjustingOrderByDslOrderNr",
          "context": "    Fulfillment.CancelAdjustingOrderByDslOrderNr(OrderNrReseller, AccountId, CancellationReason, CancellationFeeType, SendCancelationEmailIfNeeded)",
          "line": "1347",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CancelAdjustingOrderByTvOrderNr",
          "context": "    Fulfillment.CancelAdjustingOrderByTvOrderNr(OrderNrReseller, AccountId, CancellationReason, CancellationFeeType, SendCancelationEmailIfNeeded)",
          "line": "1350",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CancelAdjustingOrderByVoipOrderNr",
          "context": "    Fulfillment.CancelAdjustingOrderByVoipOrderNr(OrderNrReseller, AccountId, CancellationReason, CancellationFeeType, SendCancelationEmailIfNeeded)",
          "line": "1353",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "IsSwitchServiceNeeded",
          "context": "    Boolean = Fulfillment.IsSwitchServiceNeeded(OrderId)",
          "line": "1356",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "MakeInvoiceUncollectable",
          "context": "    FinancialActionRequestId = BillingEngine.MakeInvoiceUncollectable(UncollectableInvoiceClearanceCreationRequest)",
          "line": "1359",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MakeInvoiceCollectable",
          "context": "    FinancialActionRequestId = BillingEngine.MakeInvoiceCollectable(UncollectableInvoiceClearanceCounterRequest)",
          "line": "1362",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "InitiateInvoiceRecreation",
          "context": "    InvoiceGenerator.InitiateInvoiceRecreation(InvoiceRecreationRequest.virtualBalanceRecordRevertionRequestCollection,",
          "line": "1365",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "InitiateInvoiceRecreation",
          "context": "        InvoiceGenerator.InitiateInvoiceRecreation(ReverseInvoiceItemsRequest.virtualBalanceRecordRevertionRequestCollection,",
          "line": "1372",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ManuallyRevertInvoicedVirtualBalanceRecord",
          "context": "        BillingEngine.ManuallyRevertInvoicedVirtualBalanceRecord(ReverseInvoiceItemsRequest.virtualBalanceRecordRevertionRequestCollection)",
          "line": "1375",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPagedSearchForCustomerAccounts",
          "context": "    PagedSearchResultResponse = CrmBackend.GetPagedSearchForCustomerAccounts(PageNumber, PerPage, CustomerAccountSearchRequest)",
          "line": "1378",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "1381",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    ServiceAccountsList = BillingEngine.GetServiceAccounts(AccountId)",
          "line": "1382",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountMandate",
          "context": "        Mandate = BankComponent.GetServiceAccountMandate(ServiceAccount.id)",
          "line": "1390",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "InitPaymentArrangement",
          "context": "    PaymentArrangementId = BillingEngine.InitPaymentArrangement(InitPaymentArrangementRequest)",
          "line": "1409",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetMinimumCollectionDateForPaymentArragement",
          "context": "    MinimumCollectionDate = BillingEngine.GetMinimumCollectionDateForPaymentArragement(MinimumCollectionDateRequest)",
          "line": "1412",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ProcessMultipleClearanceBlockCreation",
          "context": "    BillingEngine.ProcessMultipleClearanceBlockCreation(InvoiceClearanceBlockCreationRequestCollection, CreatedBy)",
          "line": "1415",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetClearanceBlockReasons",
          "context": "    FinancialBlockReasonDtos = BillingEngine.GetClearanceBlockReasons().Select(r => r.ToCrmDto())",
          "line": "1418",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceCategoryBankPartByServiceCategoryId",
          "context": "    ServiceCategoryBankPart = BankComponent.GetServiceCategoryBankPartByServiceCategoryId(ServiceCategoryId)",
          "line": "1421",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "CreateExcassoForServiceAccount",
          "context": "    FinancialActionRequestId = BillingEngine.CreateExcassoForServiceAccount(CreateExcassoRequest)",
          "line": "1424",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetReasonCodeList",
          "context": "    ReasonCodeDtoList = BillingEngine.GetReasonCodeList(ReasonCodeType.EndOfDeliveryProcess).Select(rc => rc.ToDto())",
          "line": "1430",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetReasonCodeList",
          "context": "    ReasonCodeDtoList = BillingEngine.GetReasonCodeList(ReasonCodeType.ManualExcasso).Select(rc => rc.ToDto())",
          "line": "1433",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetReasonCodeList",
          "context": "    ReasonCodeDtoList = BillingEngine.GetReasonCodeList(ReasonCodeType.Uncollectable).Select(rc => rc.ToDto())",
          "line": "1436",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetBalanceAdjustmentReasons",
          "context": "    ReasonDtos = BillingEngine.GetBalanceAdjustmentReasons().Select(r => r.ToCrmDto())",
          "line": "1439",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateManualBalanceCorrection",
          "context": "    FinancialActionRequestId = BillingEngine.CreateManualBalanceCorrection(ManualBalanceCorrectionCreationRequest)",
          "line": "1442",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPagedCustomerContacts",
          "context": "    PagedCustomerContacts = CrmBackend.GetPagedCustomerContacts(AccountId = AccountId, PageNumber = PageNumber, PerPage = PerPage, DisableOutgoingEmailRetrieval)",
          "line": "1445",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddCustomerAccountContact",
          "context": "    CrmBackend.AddCustomerAccountContact(AccountId = AccountId, CustomerContact = CustomerContact)",
          "line": "1473",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId = AccountId, ServiceAccountId = ServiceAccountId)",
          "line": "1483",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "1484",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetMandate",
          "context": "    Mandate = BankComponent.GetMandate(ServiceAccountId = ServiceAccountId)",
          "line": "1488",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetServiceAccountBillInfo",
          "context": "    ServiceAccountBillInfo = BillingEngine.GetServiceAccountBillInfo(ServiceAccount.accountId, ServiceAccount.id)",
          "line": "1491",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPagedServiceAccountSubscriptions",
          "context": "    PagedServiceAccountSubscriptions = BillingEngine.GetPagedServiceAccountSubscriptions(AccountId = AccountId, ServiceAccountId = ServiceAccountId, PageNumber = PageNumber, PerPage = PerPage)",
          "line": "1507",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetProductById",
          "context": "        Product = ProductCatalog.GetProductById(ProductId = ProductId)",
          "line": "1519",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "1527",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCeaseDslOrderById",
          "context": "    CeaseDslOrder = Fulfillment.GetCeaseDslOrderById(ProcessId)",
          "line": "1543",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetUnmatchedMailById",
          "context": "    Mail = MailStorage.GetUnmatchedMailById(MailId)",
          "line": "1572",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "MailStorage"
        },
        {
          "methodName": "GetEmployeeAccountById",
          "context": "    EmployeeAccount = CrmBackend.GetEmployeeAccountById(CreatedBy)",
          "line": "1573",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddCustomerAccountEmail",
          "context": "    CrmBackend.AddCustomerAccountEmail(AccountId, Mail.fromEmail, false)",
          "line": "1574",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "MatchCustomerAccountToMail",
          "context": "    MailStorage.MatchCustomerAccountToMail(AccountId, MailId, CreatedBy)",
          "line": "1576",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "MailStorage"
        },
        {
          "methodName": "GetUnmatchedMailById",
          "context": "    CustomerEmailDto = MailStorage.GetUnmatchedMailById(MailId).ToCrmDto()",
          "line": "1580",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "MailStorage"
        },
        {
          "methodName": "GetFilteredAndPagedVirtualBalanceRecordDtos",
          "context": "    GetFilteredAndPagedVirtualBalanceRecordsResponse = BillingEngine.GetFilteredAndPagedVirtualBalanceRecordDtos(ServiceAccountId, VirtualBalanceRecordFilterList, VirtualBalanceRecordsPerPage, PageNumber)",
          "line": "1585",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetVirtualBalanceRecordById",
          "context": "    VirtualBalanceRecord = BillingEngine.GetVirtualBalanceRecordById(ServiceAccountId, VirtualBalanceRecordId)",
          "line": "1588",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetFilteredAndPagedBankTransactionDtos",
          "context": "    GetFilteredAndPagedBankTransactionsResponse = BankComponent.GetFilteredAndPagedBankTransactionDtos(ServiceAccountId, BankTransactionFilterList, BankTransactionsPerPage, PageNumber, IsHistoryRequired)",
          "line": "1593",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetBankTransactionDtoById",
          "context": "    BankTransactionDto = BankComponent.GetBankTransactionDtoById(BankTransactionId)",
          "line": "1597",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetBankTransactionHistory",
          "context": "    BankTransactionDetailsDtos = BankComponent.GetBankTransactionHistory(BankTransactionId).SelectMany(x => x.details.Select(y => y.ToBaseTransactionMatchDetailDto(x.changedOn, x.isMatched, x.changedBy)))",
          "line": "1601",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetBankTransactionHistory",
          "context": "    BankTransactionDetailsDtos ++= BankComponent.GetBankTransactionHistory(BankTransactionId).Where(x => IsEmpty(x.details)).Select(y => new BankTransactionDetailsDto(",
          "line": "1602",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetEmployeeAccountsFullNames",
          "context": "    EmployeeAccountsFullNames = CrmBackend.GetEmployeeAccountsFullNames()",
          "line": "1612",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPartialPricePlans",
          "context": "    PartialPricePlans = ProductCatalog.GetPartialPricePlans(PageNumber = PageNumber, PerPage = PerPage)",
          "line": "1618",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPricePlanById",
          "context": "    PricePlan = ProductCatalog.GetPricePlanById(PricePlanId = PricePlanId)",
          "line": "1626",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllDiscounts",
          "context": "    Discounts = ProductCatalog.GetAllDiscounts(PricePlanId = PricePlanId)",
          "line": "1631",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "IsPricePlanInUse",
          "context": "    PricePlanInUse = ProductCatalog.IsPricePlanInUse(PricePlan.id)",
          "line": "1640",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateCustomerAccountEmail",
          "context": "    CrmBackend.UpdateCustomerAccountEmail(UpdateCustomerAccountEmailRequest)",
          "line": "1644",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetSalesOfficeById",
          "context": "    SalesOfficeDto = ProductCatalog.GetSalesOfficeById(SalesOfficeId).ToCrmDto()",
          "line": "1647",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSalesOffers",
          "context": "    GetSalesOffersResponse = ProductCatalog.GetSalesOffers(GetPartialDataRequest)",
          "line": "1650",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSalesOfficeById",
          "context": "    SalesOffice = ProductCatalog.GetSalesOfficeById(SalesOfficeId)",
          "line": "1653",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllSalesOffices",
          "context": "    SalesOfficeList = ProductCatalog.GetAllSalesOffices()",
          "line": "1657",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateSalesOffice",
          "context": "    SalesOfficeId = ProductCatalog.CreateSalesOffice(SalesOfficeCreationRequest)",
          "line": "1663",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateSalesOffice",
          "context": "    ProductCatalog.UpdateSalesOffice(SalesOfficeUpdateRequest)",
          "line": "1666",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeactivateSalesOffice",
          "context": "    ProductCatalog.DeactivateSalesOffice(SalesOfficeId)",
          "line": "1669",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "ActivateSalesOffice",
          "context": "    ProductCatalog.ActivateSalesOffice(SalesOfficeId)",
          "line": "1672",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteSalesOffice",
          "context": "    ProductCatalog.DeleteSalesOffice(SalesOfficeId)",
          "line": "1675",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateSalesOffer",
          "context": "    ProductCatalog.CreateSalesOffer(CreateSalesOfferRequest)",
          "line": "1678",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "UpdateSalesOffer",
          "context": "    ProductCatalog.UpdateSalesOffer(SalesOfferUpdateRequest)",
          "line": "1681",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "DeleteSalesOffer",
          "context": "    ProductCatalog.DeleteSalesOffer(SalesOfferId)",
          "line": "1684",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllSalesOffers",
          "context": "    SalesOfferDtos = ProductCatalog.GetAllSalesOffers()",
          "line": "1687",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSalesOffersAvailableForSalesOffices",
          "context": "    SalesOfferDtos = ProductCatalog.GetSalesOffersAvailableForSalesOffices()",
          "line": "1691",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "IsDefaultSalesOfferOverridePossible",
          "context": "    IsPossible = ProductCatalog.IsDefaultSalesOfferOverridePossible(StartOn, EndOn, ServiceCategoryId)",
          "line": "1695",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSalesOfferDtoById",
          "context": "    SalesOfferDto = ProductCatalog.GetSalesOfferDtoById(SalesOfferId)",
          "line": "1698",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedOffersByOfficeId",
          "context": "    PagedSalesOfferList = ProductCatalog.GetPagedOffersByOfficeId(GetSalesOfferBySalesOfficeIdRequest.salesOfficeId, GetSalesOfferBySalesOfficeIdRequest.pageNumber, GetSalesOfferBySalesOfficeIdRequest.perPage)",
          "line": "1701",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedSalesOffices",
          "context": "    PagedSalesOfficeList = ProductCatalog.GetPagedSalesOffices(GetPageSalesOfficesRequest.pageNumber, GetPageSalesOfficesRequest.perPage)",
          "line": "1704",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "AddSalesOfferToSalesOffice",
          "context": "    ProductCatalog.AddSalesOfferToSalesOffice(AddOfferToOfficeRequest.salesOfficeId, AddOfferToOfficeRequest.salesOfferId)",
          "line": "1715",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "RemoveSalesOfferFromSalesOffice",
          "context": "    ProductCatalog.RemoveSalesOfferFromSalesOffice(RemoveSalesOfferFromOfficeRequest.salesOfficeId, RemoveSalesOfferFromOfficeRequest.salesOfferId)",
          "line": "1718",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedPropositionsBySalesOfferId",
          "context": "    PagedPropositions = ProductCatalog.GetPagedPropositionsBySalesOfferId(GetPagedPropositionsBySalesOfferIdRequest.salesOfferId, GetPagedPropositionsBySalesOfferIdRequest.pageNumber, GetPagedPropositionsBySalesOfferIdRequest.perPage)",
          "line": "1721",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPagedOffers",
          "context": "    PagedSalesOfferList = ProductCatalog.GetPagedOffers(GetPagedSalesOfferRequest.pageNumber, GetPagedSalesOfferRequest.perPage)",
          "line": "1730",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllBundleTypes",
          "context": "    BundleTypeCollection = ProductCatalog.GetAllBundleTypes()",
          "line": "1733",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllSalesOffices",
          "context": "    SalesOfficeList = ProductCatalog.GetAllSalesOffices()",
          "line": "1738",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "TryGetPartnerAccountBySalesOfficeId",
          "context": "        PartnerAccount = CrmBackend.TryGetPartnerAccountBySalesOfficeId(SalesOfficeId)",
          "line": "1744",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetAllServiceCategories",
          "context": "    ServiceCategoryIds = BillingEngine.GetAllServiceCategories()",
          "line": "1758",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "UpdateSalesOfferStatus",
          "context": "    ProductCatalog.UpdateSalesOfferStatus(SalesOfferUpdateStatusRequest)",
          "line": "1761",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountCdrThresholds",
          "context": "    CdrPriceThresholdsDto = BillingEngine.GetServiceAccountCdrThresholds(AccountId = AccountId, ServiceAccountId = ServiceAccountId).ToDto()",
          "line": "1764",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "UpdateCdrThresholds",
          "context": "    BillingEngine.UpdateCdrThresholds(UpdateCdrThresholdsRequest)",
          "line": "1767",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetFilteredAndPagedUnmatchedBankTransactions",
          "context": "    PagedBankTransactionsInfo = BankComponent.GetFilteredAndPagedUnmatchedBankTransactions(PageNumber, PerPage, BankTransactionFilterList)",
          "line": "1773",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPendingCreditTransfers",
          "context": "    CreditTransfers = BankComponent.GetPendingCreditTransfers()",
          "line": "1775",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "CheckIfPendingCreditTransferExistsForBankTransactions",
          "context": "    PendingCreditTransferExistanceByBankTransactionId = BillingEngine.CheckIfPendingCreditTransferExistsForBankTransactions(BankTransactionIds)",
          "line": "1778",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetFilteredAndPagedMatchedBankTransactions",
          "context": "    PagedBankTransactionsInfo = BankComponent.GetFilteredAndPagedMatchedBankTransactions(PageNumber, PerPage, BankTransactionFilterList)",
          "line": "1788",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPendingCreditTransfers",
          "context": "    CreditTransfers = BankComponent.GetPendingCreditTransfers()",
          "line": "1790",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetFilteredAndPagedReturnedBankTransactions",
          "context": "    PagedBankTransactionsInfo = BankComponent.GetFilteredAndPagedReturnedBankTransactions(PageNumber, PerPage, BankTransactionFilterList)",
          "line": "1800",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPendingCreditTransfers",
          "context": "    CreditTransfers = BankComponent.GetPendingCreditTransfers()",
          "line": "1802",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPagedMatchedBankTransactionsByTransactionId",
          "context": "    PagedBankTransactionsInfo = BankComponent.GetPagedMatchedBankTransactionsByTransactionId(PageNumber, PerPage, BankTransactionId)",
          "line": "1811",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPendingCreditTransfers",
          "context": "    CreditTransfers = BankComponent.GetPendingCreditTransfers()",
          "line": "1813",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPagedUnmatchedBankTransactionsByTransactionId",
          "context": "    PagedBankTransactionsInfo = BankComponent.GetPagedUnmatchedBankTransactionsByTransactionId(PageNumber, PerPage, BankTransactionId)",
          "line": "1824",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPendingCreditTransfers",
          "context": "    CreditTransfers = BankComponent.GetPendingCreditTransfers()",
          "line": "1825",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "CheckIfPendingCreditTransferExistsForBankTransactions",
          "context": "    PendingCreditTransferExistanceByBankTransactionId = BillingEngine.CheckIfPendingCreditTransferExistsForBankTransactions(BankTransactionIds)",
          "line": "1828",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPagedReturnedBankTransactionsByTransactionId",
          "context": "    PagedBankTransactionsInfo = BankComponent.GetPagedReturnedBankTransactionsByTransactionId(PageNumber, PerPage, BankTransactionId)",
          "line": "1838",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPendingCreditTransfers",
          "context": "    CreditTransfers = BankComponent.GetPendingCreditTransfers()",
          "line": "1839",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetMatchedBankTransactionById",
          "context": "    BankTransaction = BankComponent.GetMatchedBankTransactionById(BankTransactionId)",
          "line": "1849",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetUnmatchedBankTransactionById",
          "context": "    BankTransaction = BankComponent.GetUnmatchedBankTransactionById(BankTransactionId)",
          "line": "1853",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetReturnedBankTransactionById",
          "context": "    BankTransaction = BankComponent.GetReturnedBankTransactionById(BankTransactionId)",
          "line": "1857",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetUnmatchedBankTransactionByIdWithExistingFinancialRequestsInfo",
          "context": "    BankTransactionWithExistingFinancialRequestInfo = BankComponent.GetUnmatchedBankTransactionByIdWithExistingFinancialRequestsInfo(BankTransactionId)",
          "line": "1861",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "UnmatchTransaction",
          "context": "    BankComponent.UnmatchTransaction(BankTransactionId, ChangedBy)",
          "line": "1864",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "CreateBankTransactionManualExcasso",
          "context": "    BankComponent.CreateBankTransactionManualExcasso(BankTransactionManualExcassoCreationRequest)",
          "line": "1867",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetCreditTransfersByBankTransactionId",
          "context": "    CreditTransfers = BankComponent.GetCreditTransfersByBankTransactionId(BankTransactionId)",
          "line": "1870",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetPqccCheckResultInfoErrorForOrder",
          "context": "    String = Fulfillment.GetPqccCheckResultInfoErrorForOrder(OrderId, PqccCheckType)",
          "line": "1873",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDeepCheckError",
          "context": "    String = Fulfillment.GetDeepCheckError(OrderId)",
          "line": "1876",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPagedFinancialRequests",
          "context": "    PagedFinancialActionRequestsResponse = BillingEngine.GetPagedFinancialRequests(PagedFinancialActionRequestsRequest)",
          "line": "1879",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "RejectFinancialActionRequest",
          "context": "    BillingEngine.RejectFinancialActionRequest(FinancialActionRejectionRequest)",
          "line": "1882",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ConfirmFinancialActionRequest",
          "context": "    BillingEngine.ConfirmFinancialActionRequest(FinancialActionConfirmationRequest)",
          "line": "1885",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MakeCounterAdjustment",
          "context": "    BillingEngine.MakeCounterAdjustment(CounterAdjustmentCreationRequest)",
          "line": "1888",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetManualCorrectionVirtualBalanceRecordById",
          "context": "    GetManualCorrectionVirtualBalanceRecordResponse = BillingEngine.GetManualCorrectionVirtualBalanceRecordById(GetManualCorrectionVirtualBalanceRecordRequest)",
          "line": "1891",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CheckDslProductForTriplePlayMovingProcess",
          "context": "    CheckDslProductForTriplePlayMovingProcessResponse = Fulfillment.CheckDslProductForTriplePlayMovingProcess(CheckDslProductForTriplePlayMovingProcessRequest)",
          "line": "1894",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProlongationOfferTokenByServiceAccountId",
          "context": "    TokenId = BillingEngine.GetProlongationOfferTokenByServiceAccountId(ServiceAccountId)",
          "line": "1898",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetAvailableInstallationBookItems",
          "context": "    InstallationBookItems = PlanningstoolService.GetAvailableInstallationBookItems(Zip, StartOn, DaysQuantity, TakeOnly)",
          "line": "1906",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "CreateInstallationProcess",
          "context": "    PlanningstoolService.CreateInstallationProcess(InstallationHelpRequest)",
          "line": "1910",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetFilteredServiceAccountsWithInvoices",
          "context": "    ServiceAccountsWithInvoicesDto = BillingEngine.GetFilteredServiceAccountsWithInvoices(CrmPortalServiceAccountFilteringDto)",
          "line": "1913",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetClearanceBlockStatusForInvoices",
          "context": "    ClearanceBlockStatusCollection = BillingEngine.GetClearanceBlockStatusForInvoices(InvoiceIds)",
          "line": "1917",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MatchTransactionToInvoice",
          "context": "    BankComponent.MatchTransactionToInvoice(BankTransactionId, TransactionInvoiceMatchInformations, ChangedBy)",
          "line": "1921",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "MatchTransactionToServiceAccount",
          "context": "    BankComponent.MatchTransactionToServiceAccount(BankTransactionId, ServiceAccountId, ChangedBy)",
          "line": "1924",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "SetEmployeeNewPassword",
          "context": "    IdentityServer.SetEmployeeNewPassword(SetEmployeeNewPasswordRequest)",
          "line": "1927",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetPendingTasksBelongsToCustomer",
          "context": "    PagedTasksForCustomer = TaskManager.GetPendingTasksBelongsToCustomer(CustomerId, PerPage, PageNumber)",
          "line": "1931",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetUserAccountById",
          "context": "            Account = CrmBackend.GetUserAccountById(TaskForCustomerDto.modifyBy)",
          "line": "1935",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetClosedTasksBelongsToCustomer",
          "context": "    PagedTasksForCustomer = TaskManager.GetClosedTasksBelongsToCustomer(CustomerId, PerPage, PageNumber)",
          "line": "1940",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetUserAccountById",
          "context": "            Account = CrmBackend.GetUserAccountById(TaskForCustomerDto.modifyBy)",
          "line": "1944",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "IsInstallationOrderExist",
          "context": "    Boolean = PlanningstoolService.IsInstallationOrderExist(OrderId)",
          "line": "1950",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetTaskById",
          "context": "    let TaskToResolve = TaskManager.GetTaskById(TaskId)",
          "line": "1952",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetRelatedTaskListByTaskId",
          "context": "        let RelatedTaskList = TaskManager.GetRelatedTaskListByTaskId(TaskToResolve.id)",
          "line": "1955",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetEmployeeListByIdList",
          "context": "        AccountList = CrmBackend.GetEmployeeListByIdList(RelatedAccountIdList)",
          "line": "1964",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetOutgoingEmailById",
          "context": "    SendgridEmailDto = SendgridService.GetOutgoingEmailById(EmailId)",
          "line": "1971",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "SendgridService"
        },
        {
          "methodName": "GetEmailAttachmentById",
          "context": "    SendgridEmailAttachmentDto = SendgridService.GetEmailAttachmentById(AttachmentId, EmailId)",
          "line": "1974",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "SendgridService"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "    AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "1985",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsGetDslOrderByTriplePlayOrderId",
          "context": "    CobsDslOrder = Fulfillment.CobsGetDslOrderByTriplePlayOrderId(OrderId)",
          "line": "1988",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetMoveCeaseOrderByAdjustingOrderId",
          "context": "    CobsDslOrder = Fulfillment.GetMoveCeaseOrderByAdjustingOrderId(AdjustingOrderId)",
          "line": "1991",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendToCobsMoveDslOrder",
          "context": "    Fulfillment.SendToCobsMoveDslOrder(OrderId)",
          "line": "1994",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendEmailFromCrm",
          "context": "    SendgridServiceAsync.SendEmailFromCrm(AccountId, EmailBody, EmailSubject, EmployeeId, SendToEmail, CcEmails, CrmEmailAttachments)",
          "line": "2004",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetAllPropositionWithDefault",
          "context": "    PropositionDtoCollection = ProductCatalog.GetAllPropositionWithDefault()",
          "line": "2007",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetActiveDefaultPropositionForServiceCategory",
          "context": "    PropositionDto = ProductCatalog.GetActiveDefaultPropositionForServiceCategory(ServiceCategoryId).ToDto()",
          "line": "2010",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "TryCancelInstallationOrder",
          "context": "    PlanningstoolServiceAsync.TryCancelInstallationOrder(EntityId)",
          "line": "2014",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "GetAllSalesOffices",
          "context": "    VendorDtos = ProductCatalog.GetAllSalesOffices().Select(s => s.ToVendorDto())",
          "line": "2018",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "ForceCompleteCeaseDslOrder",
          "context": "    Fulfillment.ForceCompleteCeaseDslOrder(OrderId)",
          "line": "2021",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "ResendInitialInvoiceReminderByServiceAccountId",
          "context": "    InvoiceGeneratorAsync.ResendInitialInvoiceReminderByServiceAccountId(ServiceAccountId)",
          "line": "2024",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "InitiateForceMoveAdjustingOrderToCancelledOrderState",
          "context": "    Fulfillment.InitiateForceMoveAdjustingOrderToCancelledOrderState(AdjustingOrderId, AccountId)",
          "line": "2027",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/CrmPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetTvConnectionInfo",
          "context": "        TvConnectionInfo = Fulfillment.GetTvConnectionInfo(AccountId, ServiceAccountId)",
          "line": "3",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipNumber",
          "context": "        VoipTelephoneNumber = Fulfillment.GetVoipNumber(ServiceAccountId)",
          "line": "16",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "22",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPropositionById",
          "context": "    Proposition = ProductCatalog.GetPropositionById(ServiceAccount.getPropositionId(now))",
          "line": "24",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetActiveSubscriptionIdsByTypeOfServiceId",
          "context": "        SubscriptionIds = BillingEngine.GetActiveSubscriptionIdsByTypeOfServiceId(AccountId, ServiceAccountId, TypeOfServiceId)",
          "line": "34",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "            SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId).Where(s => s.productId == PropositionProduct.product.id)",
          "line": "38",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "            Subscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionIds.First())",
          "line": "44",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetProductById",
          "context": "            Product = ProductCatalog.GetProductById(Subscription.productId)",
          "line": "45",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPriceItemsById",
          "context": "        PriceItems = ProductCatalog.GetPriceItemsById(Product.pricePlan.id, ProductBundle.bundle.id)",
          "line": "65",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetLastTvAdjustingOrder",
          "context": "                OrderId = Fulfillment.GetLastTvAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "80",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "                AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "81",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastVoipAdjustingOrder",
          "context": "                OrderId = Fulfillment.GetLastVoipAdjustingOrder(AccountId, ServiceAccountId)",
          "line": "83",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "                AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "84",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetLastUpgradeDslAdjustingOrderId",
          "context": "                OrderId = Fulfillment.GetLastUpgradeDslAdjustingOrderId(AccountId, ServiceAccountId)",
          "line": "86",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "                AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "87",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CheckIfCustomerHasPendingAdjustingOrder",
          "context": "    IsExists = Fulfillment.CheckIfCustomerHasPendingAdjustingOrder(AccountId, ServiceAccountId, AdjustingOrderType)",
          "line": "97",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "        AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "112",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPropositionById",
          "context": "        Proposition = ProductCatalog.GetPropositionById(PropositionId)",
          "line": "116",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetOrderById",
          "context": "        Order = Fulfillment.GetOrderById(OrderId)",
          "line": "117",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CommonHelpers.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    let ServiceAccounts = BillingEngine.GetServiceAccounts(AccountId)",
          "line": "2",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CrmPortalHelpers/CustomerAccountDetailsHelper.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    let CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "3",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CrmPortalHelpers/CustomerAccountDetailsHelper.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetProlongationOfferExistsByServiceAccountId",
          "context": "    ProlongationOfferExistsByServiceAccountId = BillingEngine.GetProlongationOfferExistsByServiceAccountId(ServiceAccountIds)",
          "line": "17",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CrmPortalHelpers/CustomerAccountDetailsHelper.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetProlongationOfferExistsByServiceAccountId",
          "context": "    ProlongationOfferExistsByServiceAccountId = BillingEngine.GetProlongationOfferExistsByServiceAccountId(ServiceAccountIds)",
          "line": "28",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CrmPortalHelpers/CustomerAccountDetailsHelper.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInvoicesByIds",
          "context": "        Invoices = InvoiceGenerator.GetInvoicesByIds(InvoiceIds)",
          "line": "9",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/Helpers/CrmPortalHelpers/InvoiceHelper.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "MigrateSapCustomerAccount",
          "context": "    CrmBackendMigrationApiAsync.MigrateSapCustomerAccount(MigrateAnnaCustomerAndServiceAccountFromSapRequest.migrateServiceAccountRequest.serviceAccountId, MigrateAnnaCustomerAndServiceAccountFromSapRequest.migrateCustomerAccountRequest)",
          "line": "3",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "CrmBackendMigrationApiAsync"
        },
        {
          "methodName": "MigrateSapServiceAccount",
          "context": "    BillingEngineMigrationApiAsync.MigrateSapServiceAccount(AccountId, MigrateAnnaCustomerAndServiceAccountFromSapRequest.migrateServiceAccountRequest)",
          "line": "32",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "BillingEngineMigrationApiAsync"
        },
        {
          "methodName": "MigrateSapSubscriptions",
          "context": "    BillingEngineMigrationApiAsync.MigrateSapSubscriptions(AccountId, ServiceAccountId, MigrateAnnaSubscriptionRequests)",
          "line": "38",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "BillingEngineMigrationApiAsync"
        },
        {
          "methodName": "SaveSapMandate",
          "context": "        BankComponentMigrationApiAsync.SaveSapMandate(AccountId, ServiceAccountId, MigrateAnnaCustomerAndServiceAccountFromSapRequest.mandate)",
          "line": "44",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "BankComponentMigrationApiAsync"
        },
        {
          "methodName": "AddMemberIbanToCustomerAccount",
          "context": "        CrmBackendMigrationApiAsync.AddMemberIbanToCustomerAccount(AccountId, MigrateAnnaCustomerAndServiceAccountFromSapRequest.mandate.memberIban)",
          "line": "45",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "CrmBackendMigrationApiAsync"
        },
        {
          "methodName": "MigrateSapServiceContract",
          "context": "        FulfillmentMigrationApiAsync.MigrateSapServiceContract(MigrateAnnaCustomerAndServiceAccountFromSapRequest)",
          "line": "47",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "FulfillmentMigrationApiAsync"
        },
        {
          "methodName": "MigrateSapServiceContract",
          "context": "    FulfillmentMigrationApiAsync.MigrateSapServiceContract(MigrateAnnaCustomerAndServiceAccountFromSapRequest)",
          "line": "52",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "FulfillmentMigrationApiAsync"
        },
        {
          "methodName": "ActivateSapServiceAccount",
          "context": "    BillingEngineMigrationApiAsync.ActivateSapServiceAccount(AccountId, ServiceAccountId, MigrateAnnaCustomerAndServiceAccountFromSapRequest.migrateServiceAccountRequest.startOn)",
          "line": "57",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MigrationApiAsync.bs",
          "serviceName": "BillingEngineMigrationApiAsync"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    MyNleCustomerAccountEntryDto = CrmBackend.GetCustomerAccountById(AccountId).ToMyNleEntryDto()",
          "line": "3",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "7",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    ServiceAccountsList = BillingEngine.GetServiceAccounts(AccountId)",
          "line": "8",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    MyNleServiceAccountEntryDtos = BillingEngine.GetServiceAccounts(AccountId).Select(x => x.ToMyNleEntryDto())",
          "line": "21",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionsByCustomerAccountId",
          "context": "    MyNleSubscriptionEntryDtos = BillingEngine.GetSubscriptionsByCustomerAccountId(AccountId).Select(x => x.ToMyNleEntryDto(ProductCatalog.GetProductName(x.productId)))",
          "line": "25",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInvoicesByServiceAccountId",
          "context": "    MyNleInvoiceDtos = InvoiceGenerator.GetInvoicesByServiceAccountId(ServiceAccountId).Select(x => x.ToMyNleEntryDto())",
          "line": "31",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetPaylinksForInvoices",
          "context": "        PaylinkDtoByInvoiceId = MailToPay.GetPaylinksForInvoices(InvoiceIds)",
          "line": "34",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "MailToPay"
        },
        {
          "methodName": "GetInvoicesByAccountId",
          "context": "    MyNleInvoiceDtos = InvoiceGenerator.GetInvoicesByAccountId(AccountId).Select(x => x.ToMyNleEntryDto())",
          "line": "41",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetPaylinksForInvoices",
          "context": "        PaylinkDtoByInvoiceId = MailToPay.GetPaylinksForInvoices(InvoiceIds)",
          "line": "44",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "MailToPay"
        },
        {
          "methodName": "ResetPasswordEmailForLogin",
          "context": "    IdentityServer.ResetPasswordEmailForLogin(Login)",
          "line": "51",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "ResetCustomerLoginPasswordByUniqueKey",
          "context": "    IdentityServer.ResetCustomerLoginPasswordByUniqueKey(UniqueKey, Password, ConfirmPassword)",
          "line": "55",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetCustomerLoginAndEmailByCustomerInfo",
          "context": "    CustomerLoginAndEmailDto = IdentityServer.GetCustomerLoginAndEmailByCustomerInfo(Zip, HouseNumber, Iban).ToDto()",
          "line": "59",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "SendResetUsernameEmail",
          "context": "    SendgridServiceAsync.SendResetUsernameEmail(Email, OldEmail, Login)",
          "line": "63",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "RemoveUniqueKeys",
          "context": "    IdentityServer.RemoveUniqueKeys(UniqueKey)",
          "line": "75",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetEmailByUniqueKey",
          "context": "    Email = IdentityServer.GetEmailByUniqueKey(UniqueKey)",
          "line": "79",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "ResendInitialInvoiceReminderByInvoiceId",
          "context": "    InvoiceGeneratorAsync.ResendInitialInvoiceReminderByInvoiceId(InvoiceId)",
          "line": "85",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "EnsureServiceAccountExists",
          "context": "    BillingEngine.EnsureServiceAccountExists(AccountId, ServiceAccountId)",
          "line": "91",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInitialInvoiceByServiceAccountId",
          "context": "    CrmPortalInvoiceDto = InvoiceGenerator.GetInitialInvoiceByServiceAccountId(ServiceAccountId).ToCrmPortalInvoiceDto()",
          "line": "92",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "102",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderById",
          "context": "        Order = Fulfillment.GetOrderById(DuplicateOrderId)",
          "line": "116",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "125",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetInstallationOrderDtoByEntityId",
          "context": "    InstallationOrderDto = PlanningstoolService.GetInstallationOrderDtoByEntityId(EntityId)",
          "line": "144",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetOrderIdByServiceAccount",
          "context": "    OrderId = Fulfillment.GetOrderIdByServiceAccount(ServiceAccountId)",
          "line": "150",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "154",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAvailablePropositonByOrderId",
          "context": "    AvailableProposition = Fulfillment.GetAvailablePropositonByOrderId(OrderId)",
          "line": "186",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetProductById",
          "context": "            Product = ProductCatalog.GetProductById(ProductId)",
          "line": "201",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetDiscountById",
          "context": "                    Discount = ProductCatalog.GetDiscountById(PricePlanId, BundleId)",
          "line": "208",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetOrderCustomerInfoScore",
          "context": "    OrderCustomerInfoScore = CrmBackend.GetOrderCustomerInfoScore()",
          "line": "232",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "CheckPropositionAvaliableForSalesOffice",
          "context": "        IfPropositionExistsForSalesOffice = ProductCatalog.CheckPropositionAvaliableForSalesOffice(Order.salesOfficeId, DashboardOrderDto.propositionId)",
          "line": "237",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetOrderPropositionVendorCheckStatus",
          "context": "        errors = Fulfillment.GetOrderPropositionVendorCheckStatus(Order.id).errors,",
          "line": "243",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "IsOrderPropositionVendorCheckPostoned",
          "context": "        isPostponed = Fulfillment.IsOrderPropositionVendorCheckPostoned(Order.id)",
          "line": "244",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SkipOrderCooldownPeriod",
          "context": "    OrderStatus = Fulfillment.SkipOrderCooldownPeriod(OrderId)",
          "line": "260",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetActiveOrClosedServiceInformationItemListByCustomerIdList",
          "context": "    ServiceInformationItemList = BillingEngine.GetActiveOrClosedServiceInformationItemListByCustomerIdList(CustomerIdList)",
          "line": "265",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPackages",
          "context": "    PackageAccountInfo = Fulfillment.GetPackages(AccountId, ServiceAccountId, TvTypeOfServiceId)",
          "line": "273",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    MyNleServiceAccountDtos = BillingEngine.GetServiceAccounts(AccountId).Where(x => x.getStatus(now) == ServiceAccountStatus.Active).Select(x => x.ToMyNleDto())",
          "line": "277",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SwitchTvPackages",
          "context": "    Fulfillment.SwitchTvPackages(CreatedBy, PackageChangeRequest)",
          "line": "287",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipSettingsId",
          "context": "    VoipSettingsId = Fulfillment.GetVoipSettingsId(AccountId, ServiceAccountId)",
          "line": "293",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipSettings",
          "context": "    GetSubscriberSettingsResponse = Fulfillment.GetVoipSettings(AccountId, ServiceAccountId, VoipSettingsId)",
          "line": "299",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetVoipSettings",
          "context": "    Fulfillment.SetVoipSettings(SubscriberSettingsDto, AccountId, ServiceAccountId)",
          "line": "305",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPhonebookEntry",
          "context": "    GetPhonebookEntryResponse = Fulfillment.GetPhonebookEntry(AccountId, ServiceAccountId)",
          "line": "311",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetPhonebookEntry",
          "context": "    Fulfillment.SetPhonebookEntry(PhonebookEntryDto, AccountId, ServiceAccountId)",
          "line": "317",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetVoipAccountStatus",
          "context": "    GetVoipAccountStatusResponse = Fulfillment.GetVoipAccountStatus(AccountId, ServiceAccountId)",
          "line": "323",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetVoipAccountStatus",
          "context": "    Fulfillment.SetVoipAccountStatus(AccountId, ServiceAccountId, VoipStateStatus, Voip_refLockedBy)",
          "line": "329",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetTvAccountState",
          "context": "    Fulfillment.SetTvAccountState(AccountId, ServiceAccountId, TVStateStatus)",
          "line": "335",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SetLineState",
          "context": "    Fulfillment.SetLineState(AccountId, ServiceAccountId, LineStatus, PageText)",
          "line": "341",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPackages",
          "context": "    PackageAccountInfo = Fulfillment.GetPackages(AccountId, ServiceAccountId, VoipTypeOfServiceId)",
          "line": "347",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SwitchVoipPackages",
          "context": "    Fulfillment.SwitchVoipPackages(CreatedBy, PackageChangeRequest)",
          "line": "357",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountEndOn",
          "context": "    EndOn = BillingEngine.GetServiceAccountEndOn(ServiceAccountId)",
          "line": "364",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateAdjustingOrder",
          "context": "    OrderId = Fulfillment.CreateAdjustingOrder(MyNleCreateAdjustingOrderRequest.customerId, MyNleCreateAdjustingOrderRequest.MyNleToCreateAdjustingOrderRequest())",
          "line": "370",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetCustomerContractAccessLink",
          "context": "    AwsStorageFileLink = FileStorageComponent.GetCustomerContractAccessLink(MyNleGetCustomerContractAccessLinkRequest.accountId, MyNleGetCustomerContractAccessLinkRequest.contractId)",
          "line": "374",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "GetInvoicePdfAccessLink",
          "context": "    AwsStorageFileLink = FileStorageComponent.GetInvoicePdfAccessLink(InvoiceId)",
          "line": "380",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "GetStartSupplyInfo",
          "context": "    StartSupplyInfoDto = Fulfillment.GetStartSupplyInfo(OrderId).ToDto()",
          "line": "390",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "    AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)",
          "line": "395",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDslConnectionInfo",
          "context": "    DslConnectionInfo = Fulfillment.GetDslConnectionInfo(AccountId, ServiceAccountId)",
          "line": "415",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "421",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SubscribeServiceAccountForInstallation",
          "context": "        PlanningstoolServiceAsync.SubscribeServiceAccountForInstallation(InstallationBookItemDate, InstallationRegionCode, DayPart, AccountId, ServiceAccountId, OrderId)",
          "line": "424",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "430",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "UnsubscribeServiceAccountForInstallation",
          "context": "        PlanningstoolServiceAsync.UnsubscribeServiceAccountForInstallation(InstallationBookItemDate, InstallationRegionCode, AccountId, ServiceAccountId)",
          "line": "433",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "GetServiceAccountCobsDataMap",
          "context": "    TriplePlayServiceAccountCobsData = Fulfillment.GetServiceAccountCobsDataMap(ServiceAccountId)",
          "line": "442",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CobsGetDslOrder",
          "context": "    CobsDslOrder = Fulfillment.CobsGetDslOrder(OrderNrReseller)",
          "line": "444",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "448",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetAvailableInstallationsForDateRange",
          "context": "    InstallationBookItems = PlanningstoolService.GetAvailableInstallationsForDateRange(",
          "line": "454",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetAvailableInstallationBookItems",
          "context": "    InstallationBookItems = PlanningstoolService.GetAvailableInstallationBookItems(Zip, StartOn, DaysQuantity, TakeOnly)",
          "line": "481",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetInvoicePartialCollectionByServiceAccountId",
          "context": "    GetInvoicePartialCollectionResponse = InvoiceGenerator.GetInvoicePartialCollectionByServiceAccountId(GetInvoicePartialCollectionRequest)",
          "line": "488",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetPaylinksForInvoices",
          "context": "        PaylinkDtoByInvoiceId = MailToPay.GetPaylinksForInvoices(InvoiceIds)",
          "line": "496",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "MailToPay"
        },
        {
          "methodName": "GetPaymentsViewEntriesByInvoiceId",
          "context": "    PaymentsViewEntries = BankComponent.GetPaymentsViewEntriesByInvoiceId(MyNleGetPaymentsViewEntriesByInvoiceIdRequest)",
          "line": "512",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "ChangeIban",
          "context": "    BankComponent.ChangeIban(ChangeIbanRequest)",
          "line": "520",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "ValidateIban",
          "context": "    ValidationResult = Fulfillment.ValidateIban(MemberIban)",
          "line": "524",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "530",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountMandate",
          "context": "    Mandate = BankComponent.GetServiceAccountMandate(ServiceAccountId)",
          "line": "537",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetOverstappenDossierDtoByOrderId",
          "context": "    OverstappenDossierDto = Fulfillment.GetOverstappenDossierDtoByOrderId(OrderId)",
          "line": "570",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetOverstappenDonorProcessByOrderId",
          "context": "    OverstappenDossier = Fulfillment.GetOverstappenDonorProcessByOrderId(OrderId)",
          "line": "576",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "RetryOverstappenRequest",
          "context": "    Fulfillment.RetryOverstappenRequest(OverstappenRetryRequest)",
          "line": "585",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CancelOverstappenRecipientProcess",
          "context": "    Fulfillment.CancelOverstappenRecipientProcess(OrderId, Note)",
          "line": "591",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "IsSwitchServiceNeeded",
          "context": "    Boolean = Fulfillment.IsSwitchServiceNeeded(OrderId)",
          "line": "597",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CheckDslProductForTriplePlayMovingProcess",
          "context": "    CheckDslProductForTriplePlayMovingProcessResponse = Fulfillment.CheckDslProductForTriplePlayMovingProcess(CheckDslProductForTriplePlayMovingProcessRequest)",
          "line": "609",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "EnsureCustomerAccountExists",
          "context": "    CrmBackend.EnsureCustomerAccountExists(AccountId)",
          "line": "615",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "616",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "UpdateCustomerAccountEmail",
          "context": "    CrmBackend.UpdateCustomerAccountEmail(UpdateCustomerAccountEmailRequest)",
          "line": "621",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetOutgoingEmailById",
          "context": "    SendgridEmailDto = SendgridService.GetOutgoingEmailById(EmailId)",
          "line": "631",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "SendgridService"
        },
        {
          "methodName": "GetEmailAttachmentAccessLink",
          "context": "    AwsStorageFileLink = FileStorageComponent.GetEmailAttachmentAccessLink(MyNleGetEmailAttachmentLinkRequest.storageFileId)",
          "line": "635",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "GetServiceCategoryBankPartByServiceCategoryId",
          "context": "    ServiceCategoryBankPart = BankComponent.GetServiceCategoryBankPartByServiceCategoryId(ServiceCategoryId)",
          "line": "645",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetAccountIdByToken",
          "context": "    AccountId = IdentityServer.GetAccountIdByToken(AccessToken)",
          "line": "649",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetDslConnectionInfo",
          "context": "    DslConnectionInfo = Fulfillment.GetDslConnectionInfo(AccountId, ServiceAccountId)",
          "line": "658",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "665",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInfoAboutPendingAdjustingOrdersForServiceAccount",
          "context": "    ServiceAccountPendingAdjustingOrdersInfo = Fulfillment.GetInfoAboutPendingAdjustingOrdersForServiceAccount(ServiceAccountId)",
          "line": "668",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    ServiceAccountsList = BillingEngine.GetServiceAccounts(AccountId)",
          "line": "10",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleVerification.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetAccountIdOfInvoice",
          "context": "    let InvoiceAccountId = InvoiceGenerator.GetAccountIdOfInvoice(InvoiceId)",
          "line": "21",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleVerification.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "41",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/MyNleVerification.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAllSalesOffices",
          "context": "    SalesOfficeList = ProductCatalog.GetAllSalesOffices()",
          "line": "7",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "TryGetPartnerAccountBySalesOfficeId",
          "context": "        PartnerAccount = CrmBackend.TryGetPartnerAccountBySalesOfficeId(SalesOfficeId)",
          "line": "13",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetAvailablePropositionsByZipCode",
          "context": "    GetAvailablePropositionsResponse = Fulfillment.GetAvailablePropositionsByZipCode(GetAvailablePropositionsRequest)",
          "line": "32",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAvailablePropositionsByZipCodeAndSalesOffice",
          "context": "    GetAvailablePropositionsResponse = Fulfillment.GetAvailablePropositionsByZipCodeAndSalesOffice(GetAvailablePropositionsRequest)",
          "line": "41",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateOrders",
          "context": "    CreateOrderResponsesList = Fulfillment.CreateOrders(CreatedBy, CreateOrderRequestsList)",
          "line": "49",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetDiscountsByPropositionId",
          "context": "    PartnerPortalDiscountDtos = ProductCatalog.GetDiscountsByPropositionId(PropositionId).Select(b => b.ToPartnerPortalDto())",
          "line": "52",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccountDto = CrmBackend.GetCustomerAccountById(AccountId).ToDto()",
          "line": "55",
          "file": "/src/Domain/components/ApiGateway/ApiGatewaySrc/PartnerPortalApi.bs",
          "serviceName": "CrmBackend"
        }
      ]
    },
    {
      "componentName": "BankComponent",
      "references": [
        {
          "methodName": "AddMemberIbanToCustomerAccount",
          "context": "        CrmBackendAsync.AddMemberIbanToCustomerAccount(CreateNewMandateOrUseExistedAsyncRequest.accountId, MemberIban)",
          "line": "108",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankComponentApi.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "CreateNewMandateOrUseExistedAsyncResponseHandler",
          "context": "    FulfillmentAsync.CreateNewMandateOrUseExistedAsyncResponseHandler(CreateNewMandateOrUseExistedAsyncResponse)",
          "line": "116",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankComponentApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CheckIfPendingCreditTransferExistsForBankTransactions",
          "context": "    PendingCreditTransferExistanceByBankTransactionId = BillingEngine.CheckIfPendingCreditTransferExistsForBankTransactions(BankTransactionIds)",
          "line": "16",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInvoice",
          "context": "        Invoice = InvoiceGenerator.GetInvoice(TransactionInvoiceMatchInformation.invoiceId) //throws error if invoice was not found",
          "line": "34",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "MatchTransactionToInvoices",
          "context": "    BillingEngine.MatchTransactionToInvoices(UnmatchedBankTransaction.id, ServiceAccountId, TransactionInvoiceMatchInformations, ChangedBy)",
          "line": "50",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CheckIfPendingCreditTransferExistsForBankTransactions",
          "context": "    PendingCreditTransferExistanceByBankTransactionId = BillingEngine.CheckIfPendingCreditTransferExistsForBankTransactions(BankTransactionIds)",
          "line": "59",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MatchTransactionToServiceAccount",
          "context": "    BillingEngine.MatchTransactionToServiceAccount",
          "line": "69",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "RevertPayments",
          "context": "        BillingEngine.RevertPayments",
          "line": "86",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateCreditTransferManuallyConfirmedGlEvent",
          "context": "        GeneralLedgerAsync.CreateCreditTransferManuallyConfirmedGlEvent",
          "line": "125",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "RejectPayback",
          "context": "            BillingEngine.RejectPayback(CreditTransfer.sourceServiceAccountId, CreditTransfer.id, CurrentDateTime)",
          "line": "140",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateCreditTransferForServiceAccountManuallyRejectedGlEvent",
          "context": "            GeneralLedgerAsync.CreateCreditTransferForServiceAccountManuallyRejectedGlEvent",
          "line": "141",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateCreditTransferForBankTransactionManuallyRejectedGlEvent",
          "context": "            GeneralLedgerAsync.CreateCreditTransferForBankTransactionManuallyRejectedGlEvent",
          "line": "149",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "IdentifyEntities",
          "context": "    BillingEngine.IdentifyEntities(ClearanceEntityIdentificationRequests)",
          "line": "205",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "IdentifyEntities",
          "context": "    InvoiceGenerator.IdentifyEntities(ClearanceEntityIdentificationRequests)",
          "line": "207",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "IdentifyEntities",
          "context": "    DunningService.IdentifyEntities(ClearanceEntityIdentificationRequests)",
          "line": "209",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionMatching.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "CheckIfPendingCreditTransferExistsForBankTransactions",
          "context": "    PendingCreditTransferExistanceByBankTransactionId = BillingEngine.CheckIfPendingCreditTransferExistsForBankTransactions(BankTransactionIds)",
          "line": "34",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateTransactionMannuallyMatchedGlEvent",
          "context": "            GeneralLedgerAsync.CreateTransactionMannuallyMatchedGlEvent",
          "line": "88",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateBankTransactionAutoMatchedGlEvent",
          "context": "                GeneralLedgerAsync.CreateBankTransactionAutoMatchedGlEvent",
          "line": "97",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateBankTransactionRejectionAutoMatchedGlEvent",
          "context": "                    GeneralLedgerAsync.CreateBankTransactionRejectionAutoMatchedGlEvent",
          "line": "108",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateTransactionMannuallyUnmatchedGlEvent",
          "context": "            GeneralLedgerAsync.CreateTransactionMannuallyUnmatchedGlEvent",
          "line": "122",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateUnmatchedDirectDebitBankTransactionReceivedGlEvent",
          "context": "            GeneralLedgerAsync.CreateUnmatchedDirectDebitBankTransactionReceivedGlEvent",
          "line": "130",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "ProcessRevertPaymentsRequests",
          "context": "        BillingEngineAsync.ProcessRevertPaymentsRequests(RevertPaymentsRequests)",
          "line": "171",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/BankTransactionsDal.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ValidateIban",
          "context": "            let ValidationResult = Fulfillment.ValidateIban(Iban)",
          "line": "28",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ChangeIbanLogic.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "                id = IdGenerator.GetNextAvailableId(TypeOfId.MandateId),",
          "line": "40",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ChangeIbanLogic.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "AddMemberIbanToCustomerAccount",
          "context": "            CrmBackend.AddMemberIbanToCustomerAccount(AccountId, Iban)",
          "line": "47",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ChangeIbanLogic.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "ResetIban",
          "context": "            CrmBackend.ResetIban(AccountId, ServiceAccountId, Iban, ChangeIbanRequest.mandate.startedOn, ChangeIbanRequest.mandate.city)",
          "line": "48",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ChangeIbanLogic.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "ChangePaymentMethodInServiceAccount",
          "context": "        BillingEngine.ChangePaymentMethodInServiceAccount(ChangeIbanRequest.accountId, ServiceAccountId, ChangeIbanRequest.paymentMethod)",
          "line": "49",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ChangeIbanLogic.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "        FullName = CrmBackend.GetCustomerAccountById(CreditTransferCreationRequest.accountId).fullName",
          "line": "36",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/CreditTransferLogic.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "CreateCreditTransferMessage",
          "context": "            PainFileService.CreateCreditTransferMessage(CreditTransferMessage.ToDto())",
          "line": "66",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/CreditTransferLogic.bs",
          "serviceName": "PainFileService"
        },
        {
          "methodName": "CreateCreditTransferGeneratedGlEvent",
          "context": "                GeneralLedgerAsync.CreateCreditTransferGeneratedGlEvent(CreateCreditTransferGeneratedGlEventRequest, ServiceCategoryBankPart.id)",
          "line": "75",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/CreditTransferLogic.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "DownloadStatementFiles",
          "context": "    StatementFiles.DownloadStatementFiles(AddedFiles)",
          "line": "117",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/CreditTransferLogic.bs",
          "serviceName": "StatementFiles"
        },
        {
          "methodName": "CreateBankTransactionManualExcasso",
          "context": "    BillingEngine.CreateBankTransactionManualExcasso(BankTransactionManualExcassoCreationRequest, Currency)",
          "line": "161",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/CreditTransferLogic.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ProcessRevertPaymentsRequests",
          "context": "        BillingEngineAsync.ProcessRevertPaymentsRequests(RevertPaymentsRequests)",
          "line": "54",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/FixApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "Fix",
          "context": "    BillingEnginePatchingService.Fix_CreateMissedPaybackRecords(CreditTransfers)",
          "line": "60",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/FixApi.bs",
          "serviceName": "BillingEnginePatchingService"
        },
        {
          "methodName": "Fix",
          "context": "    BillingEnginePatchingService.Fix_UpdateMissedPaybackRecords(CreditTransfers15March, CreditTransfers20March)",
          "line": "65",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/FixApi.bs",
          "serviceName": "BillingEnginePatchingService"
        },
        {
          "methodName": "GetBankTransactionIdsByServiceAccountId",
          "context": "    BankTransactionIds = BillingEngine.GetBankTransactionIdsByServiceAccountId(ServiceAccountId)",
          "line": "145",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/Getters.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateDirectDebitMessage",
          "context": "        PainFileService.CreateDirectDebitMessage(DirectDebitMessageDto)",
          "line": "42",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/InvoiceProcessing.bs",
          "serviceName": "PainFileService"
        },
        {
          "methodName": "CreateDirectDebitPaymentGeneratedGlEvent",
          "context": "        GeneralLedgerAsync.CreateDirectDebitPaymentGeneratedGlEvent(CreateDirectDebitPaymentGeneratedGlEventRequest, ServiceCategoryId)",
          "line": "53",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/InvoiceProcessing.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    With(CrmBackend.GetCustomerAccountById(Invoice.accountId),",
          "line": "56",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/InvoiceProcessing.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    With(CrmBackend.GetCustomerAccountById(PaymentArrangementPartDto.accountId),",
          "line": "94",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/InvoiceProcessing.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddUsedId",
          "context": "        IdGenerator.AddUsedId(TypeOfId.MandateId, Mandate.id)",
          "line": "7",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/MandateCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "AddUsedId",
          "context": "            IdGenerator.AddUsedId(TypeOfId.MandateId, Mandate.id)",
          "line": "8",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/MigrationApiAsync.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "MigrateSapMandateResponseHandler",
          "context": "    ApiGatewayMigrationApiAsync.MigrateSapMandateResponseHandler(AccountId, ServiceAccountId)",
          "line": "11",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "HandleMandateMigrationResult",
          "context": "    OldBEMigrationServiceAsync.HandleMandateMigrationResult(MandateMigrationResult)",
          "line": "12",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "OldBEMigrationServiceAsync"
        },
        {
          "methodName": "RejectPayback",
          "context": "                BillingEngineAsync.RejectPayback(CreditTransfer.sourceServiceAccountId, CreditTransfer.id, CurrentDateTime)",
          "line": "181",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateCreditTransferForServiceAccountRejectedGlEvent",
          "context": "                GeneralLedgerAsync.CreateCreditTransferForServiceAccountRejectedGlEvent",
          "line": "182",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateCreditTransferForBankTransactionRejectedGlEvent",
          "context": "                GeneralLedgerAsync.CreateCreditTransferForBankTransactionRejectedGlEvent",
          "line": "193",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateCreditTransferConfirmedGlEvent",
          "context": "            GeneralLedgerAsync.CreateCreditTransferConfirmedGlEvent",
          "line": "238",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "TryMatchBankTransactionsToMtpTransactions",
          "context": "        MailToPayAsync.TryMatchBankTransactionsToMtpTransactions(TryMatchBankTransactionToMtpTransactionRequests)",
          "line": "296",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "TryMatchBankTransactions",
          "context": "        BillingEngineAsync.TryMatchBankTransactions(DirectDebitMessageResponseCollection)",
          "line": "300",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ProcessRevertPaymentsRequests",
          "context": "        BillingEngineAsync.ProcessRevertPaymentsRequests(RevertPaymentsRequests)",
          "line": "302",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateUnknownBankTransactionReceivedGlEvent",
          "context": "    GeneralLedgerAsync.CreateUnknownBankTransactionReceivedGlEvent",
          "line": "321",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ProcessBankStatement.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "ProcessServiceAccountIdentificationResult",
          "context": "    FulfillmentAsync.ProcessServiceAccountIdentificationResult(ServiceAccountIdentificationResult)",
          "line": "22",
          "file": "/src/Domain/components/BankComponent/BankComponentSrc/ServiceAccountIdentificationLogic.bs",
          "serviceName": "FulfillmentAsync"
        }
      ]
    },
    {
      "componentName": "BillingEngine",
      "references": [
        {
          "methodName": "SetMatchInfos",
          "context": "        BankComponentAsync.SetMatchInfos(SetMatchInfoRequests)",
          "line": "19",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/AbstractPaymentLogic.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "SetMatchInfos",
          "context": "        BankComponentAsync.SetMatchInfos(SetMatchInfoRequestsForAllClearances)",
          "line": "55",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/AbstractPaymentLogic.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "ClearPaymentArrangementPart",
          "context": "        InvoiceGeneratorAsync.ClearPaymentArrangementPart",
          "line": "89",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "ClearInvoices",
          "context": "    InvoiceGeneratorAsync.ClearInvoices(ClearInvoiceRequests)",
          "line": "94",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "SetMatchInfos",
          "context": "    BankComponentAsync.SetMatchInfos(SetMatchInfoRequests)",
          "line": "95",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "GetMtpInvoices",
          "context": "        MtpInvoices = InvoiceGenerator.GetMtpInvoices(InvoiceIds)",
          "line": "112",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ClearInvoices",
          "context": "        InvoiceGeneratorAsync.ClearInvoices(ClearInvoiceRequests)",
          "line": "125",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "SetMatchInfo",
          "context": "        BankComponentAsync.SetMatchInfo(BankTransactionId, BankTransactionMatchInfo, ServiceCategoryId)",
          "line": "350",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "ClearInvoice",
          "context": "        InvoiceGeneratorAsync.ClearInvoice",
          "line": "368",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "RevertInvoiceClearance",
          "context": "            InvoiceGeneratorAsync.RevertInvoiceClearance(InvoiceClearance, PaymentReversalType.Unmatching)",
          "line": "409",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "SetMatchInfo",
          "context": "    BankComponentAsync.SetMatchInfo(BankTransactionId, BankTransactionMatchInfo, ServiceAccount.serviceCategoryId)",
          "line": "508",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BankTransactionMatching.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "GetServiceAccountsForServiceContractsUpdateResponseHandler",
          "context": "    FulfillmentServiceContractAsyncApi.GetServiceAccountsForServiceContractsUpdateResponseHandler(GetServiceAccountsForServiceContractUpdateResponse)",
          "line": "21",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillingEngineServiceContractApi.bs",
          "serviceName": "FulfillmentServiceContractAsyncApi"
        },
        {
          "methodName": "GetServiceAccountsForServiceContractsCreationResponseHandler",
          "context": "    FulfillmentServiceContractAsyncApi.GetServiceAccountsForServiceContractsCreationResponseHandler(GetServiceAccountsForServiceContractCreationResponse)",
          "line": "43",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillingEngineServiceContractApi.bs",
          "serviceName": "FulfillmentServiceContractAsyncApi"
        },
        {
          "methodName": "GetServiceAccountsForServiceContractsResponseHandler",
          "context": "    FulfillmentServiceContractAsyncApi.GetServiceAccountsForServiceContractsResponseHandler(ServiceAccountsList)",
          "line": "52",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillingEngineServiceContractApi.bs",
          "serviceName": "FulfillmentServiceContractAsyncApi"
        },
        {
          "methodName": "SetServiceContractIdToSubscriptions",
          "context": "    FulfillmentServiceContractAsyncApi.SetServiceContractIdToSubscriptions(ServiceAccountsList)",
          "line": "55",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillingEngineServiceContractApi.bs",
          "serviceName": "FulfillmentServiceContractAsyncApi"
        },
        {
          "methodName": "CreateInvoice",
          "context": "    InvoiceGeneratorAsync.CreateInvoice(InvoiceGenerationRequest)",
          "line": "31",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "CreateRegularVirtualBalanceRecordGeneratedGlEvent",
          "context": "            GeneralLedgerAsync.CreateRegularVirtualBalanceRecordGeneratedGlEvent(BundleVirtualBalanceRecord.ToGeneralLedgerRecordDto(), Bundle.typeOfServiceId, ServiceAccount.id, Subscription.id, SubscribedBundle.id)",
          "line": "100",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CancelPaymentArrangementsForServiceAccount",
          "context": "        InvoiceGenerator.CancelPaymentArrangementsForServiceAccount(ServiceAccountVirtualBalance.accountId, ServiceAccountId, InitiatedOn, \"System\")",
          "line": "231",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "CreateInvoices",
          "context": "        InvoiceGeneratorAsync.CreateInvoices(InvoiceGenerationRequests)",
          "line": "275",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "CreateCashbackGeneratedGlEvent",
          "context": "            GeneralLedgerAsync.CreateCashbackGeneratedGlEvent(CashbackVirtualBalanceRecord.ToGeneralLedgerRecordDto(), ServiceCategoryId, ServiceAccount.id, Subscription.id, SubscribedCashback.id)",
          "line": "391",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateCashbackGeneratedGlEvent",
          "context": "    GeneralLedgerAsync.CreateCashbackGeneratedGlEvent(CashbackVirtualBalanceRecord.ToGeneralLedgerRecordDto(), ServiceAccount.serviceCategoryId, ServiceAccount.id, \"\", PropositionCashback.id)",
          "line": "406",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateRegularVirtualBalanceRecordGeneratedGlEvent",
          "context": "            GeneralLedgerAsync.CreateRegularVirtualBalanceRecordGeneratedGlEvent(BundleVirtualBalanceRecord.ToGeneralLedgerRecordDto(), Bundle.typeOfServiceId, ServiceAccount.id, Subscription.id, SubscribedBundle.id)",
          "line": "440",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateRegularVirtualBalanceRecordGeneratedGlEvent",
          "context": "            GeneralLedgerAsync.CreateRegularVirtualBalanceRecordGeneratedGlEvent(DiscountVirtualBalanceRecord.ToGeneralLedgerRecordDto(), Discount.typeOfServiceId, ServiceAccount.id, Subscription.id, SubscribedBundle.id)",
          "line": "527",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateRegularVirtualBalanceRecordRevertedGlEvent",
          "context": "    GeneralLedgerAsync.CreateRegularVirtualBalanceRecordRevertedGlEvent(BundleVirtualBalanceRecord.ToGeneralLedgerRecordDto(), Bundle.typeOfServiceId)",
          "line": "589",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateRegularVirtualBalanceRecordRevertedGlEvent",
          "context": "    GeneralLedgerAsync.CreateRegularVirtualBalanceRecordRevertedGlEvent(DiscountVirtualBalanceRecord.ToGeneralLedgerRecordDto(), Discount.typeOfServiceId)",
          "line": "597",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateCashbackRevertedGlEvent",
          "context": "    GeneralLedgerAsync.CreateCashbackRevertedGlEvent(CashbackVirtualBalanceRecord.ToGeneralLedgerRecordDto(), ServiceAccount.serviceCategoryId)",
          "line": "602",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "SetFirstInvoiceStatusByServiceAccountId",
          "context": "    InvoiceGeneratorAsync.SetFirstInvoiceStatusByServiceAccountId(ServiceAccount.id, InvoiceEventType.MergeRequired)",
          "line": "686",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "UpdateServiceContract",
          "context": "        FulfillmentAsync.UpdateServiceContract(Subscription.serviceContractId)",
          "line": "733",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetInvoicesByServiceAccountId",
          "context": "    Invoices = InvoiceGenerator.GetInvoicesByServiceAccountId(ServiceAccountId = ServiceAccountId)",
          "line": "775",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "CancelInvoice",
          "context": "        InvoiceGenerator.CancelInvoice(Invoice.id, now)",
          "line": "777",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ProcessFinalInvoiceGenerationRequests",
          "context": "        InvoiceGeneratorAsync.ProcessFinalInvoiceGenerationRequests(FinalInvoiceGenerationRequests)",
          "line": "819",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "UpdateServiceAccount",
          "context": "    DunningServiceAsync.UpdateServiceAccount(ServiceAccount.ToDunningPart())",
          "line": "899",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "DunningServiceAsync"
        },
        {
          "methodName": "CreateAdjustingOrderAsync",
          "context": "    FulfillmentAsync.CreateAdjustingOrderAsync(CreateChangePriceForAutoProlongationOrderRequest.createdBy, CreateChangePriceForAutoProlongationOrderRequest)",
          "line": "1012",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/BillServiceAccount.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ProcessBillingResults",
          "context": "    CdrAsync.ProcessBillingResults(CallDataRecordBillingResults)",
          "line": "13",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/CallDataRecordBilling.bs",
          "serviceName": "CdrAsync"
        },
        {
          "methodName": "CallDataRecordProcessedGlEvent",
          "context": "    GeneralLedgerAsync.CallDataRecordProcessedGlEvent(CallDataRecordGlData, ServiceAccount.serviceCategoryId)",
          "line": "149",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/CallDataRecordBilling.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "ProcessBillingResults",
          "context": "    CdrAsync.ProcessBillingResults(CallDataRecordBillingResults)",
          "line": "269",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/CallDataRecordBilling.bs",
          "serviceName": "CdrAsync"
        },
        {
          "methodName": "CallDataRecordUnmatchedGlEvent",
          "context": "    GeneralLedgerAsync.CallDataRecordUnmatchedGlEvent(CallDataRecordGlData, ServiceAccount.serviceCategoryId)",
          "line": "356",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/CallDataRecordBilling.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "SendCallDataRecordCoverageFullyExhaustedNotification",
          "context": "        CrmBackendAsync.SendCallDataRecordCoverageFullyExhaustedNotification(ServiceAccount.accountId, ServiceAccount.id, ServiceAccount.shippingAddress.fullAddress, Bundle.name, ExpendbleBundleVirtualBalanceRecord.expenditureDetails.initialSize)",
          "line": "453",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/CallDataRecordBilling.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "SendCallDataRecordCoveragePartiallyExhaustedNotification",
          "context": "        CrmBackendAsync.SendCallDataRecordCoveragePartiallyExhaustedNotification(ServiceAccount.accountId, ServiceAccount.id, ServiceAccount.shippingAddress.fullAddress, Bundle.name, WarningLimit)",
          "line": "457",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/CallDataRecordBilling.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "GetInvoice",
          "context": "    Invoice = InvoiceGenerator.GetInvoice(InvoiceId)",
          "line": "11",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ClearanceBlockLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.ClearanceBlock),",
          "line": "19",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ClearanceBlockLogic.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "CreateDunningPenaltyGlEvent",
          "context": "    GeneralLedgerAsync.CreateDunningPenaltyGlEvent",
          "line": "8",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/DunningPenaltyCreationLogic.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateInvoice",
          "context": "    InvoiceGeneratorAsync.CreateInvoice(DunningInvoiceGenerationRequest)",
          "line": "16",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/DunningPenaltyCreationLogic.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "ProcessDunningInvoiceGenerationResult",
          "context": "    DunningServiceAsync.ProcessDunningInvoiceGenerationResult(DunningInvoiceGenerationResult)",
          "line": "32",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/DunningPenaltyCreationLogic.bs",
          "serviceName": "DunningServiceAsync"
        },
        {
          "methodName": "SendEndOfSupplyPaymentRequest",
          "context": "    DunningService.SendEndOfSupplyPaymentRequest(ServiceAccount.accountId, ServiceAccount.id, EndOfSupplyProcess.warningExpirationDate as DateTime)",
          "line": "26",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/EndOfSupply.bs",
          "serviceName": "DunningService"
        },
        {
          "methodName": "PutTaskInProgressBySystem",
          "context": "        TaskManager.PutTaskInProgressBySystem(EndOfSupplyProcess.taskId)",
          "line": "41",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/EndOfSupply.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CloseTaskBySystem",
          "context": "        TaskManager.CloseTaskBySystem(EndOfSupplyProcess.taskId, RelatedTaskIdList)",
          "line": "42",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/EndOfSupply.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CloseTaskById",
          "context": "    TaskManager.CloseTaskById(AccountId, EndOfSupplyProcess.taskId, RelatedTaskIdList, \"Task was closed\")",
          "line": "63",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/EndOfSupply.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CreateAdjustingOrderAsync",
          "context": "        FulfillmentAsync.CreateAdjustingOrderAsync",
          "line": "78",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/EndOfSupply.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CloseTaskById",
          "context": "    TaskManager.CloseTaskById(AccountId, EndOfSupplyProcess.taskId, RelatedTaskIdList, \"Task was closed\")",
          "line": "117",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/EndOfSupply.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CheckIfServiceAccountHasOpenInvoices",
          "context": "            !InvoiceGenerator.CheckIfServiceAccountHasOpenInvoices(sa.id)",
          "line": "10",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "CheckIfServiceAccountHasUncollectableInvoices",
          "context": "            !InvoiceGenerator.CheckIfServiceAccountHasUncollectableInvoices(sa.id)",
          "line": "12",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "                id = IdGenerator.GetNextAvailableId(TypeOfId.CreditTransferRequestId),",
          "line": "21",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetMandate",
          "context": "                targetCreditorIban = BankComponent.GetMandate(ServiceAccount.id).memberIban,",
          "line": "30",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "CreateCreditTransfers",
          "context": "        BankComponentAsync.CreateCreditTransfers(CreditTransferCreationRequestCollection)",
          "line": "37",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.CreditTransferRequestId),",
          "line": "74",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetMandate",
          "context": "        targetCreditorIban = BankComponent.GetMandate(CreateExcassoRequest.serviceAccountId).memberIban,",
          "line": "82",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "CreateCreditTransfer",
          "context": "    BankComponentAsync.CreateCreditTransfer(CreditTransferCreationRequest)",
          "line": "98",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.CreditTransferRequestId),",
          "line": "121",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Excasso.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    id = IdGenerator.GetNextAvailableId(TypeOfId.ExcassoBlock),",
          "line": "91",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ExcassoBlockLogic.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetEmployeeAccountsFullNames",
          "context": "        EmployeeAccountsFullNames = CrmBackend.GetEmployeeAccountsFullNames()",
          "line": "113",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FinancialActionRequestApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetMtpInvoices",
          "context": "        MtpInvoices = InvoiceGenerator.GetMtpInvoices(MtpTransactionConfirmrationInfo.invoiceIds)",
          "line": "11",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ClearInvoices",
          "context": "        InvoiceGeneratorAsync.ClearInvoices(ClearInvoiceRequests)",
          "line": "25",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "GetInvoice",
          "context": "            Invoice = InvoiceGenerator.GetInvoice(InvoiceId)",
          "line": "32",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "Fix",
          "context": "    InvoiceGeneratorFixApi.Fix_PrepareInvoiceClearancesForMtpPaymentCreation(ClearInvoiceRequests)",
          "line": "48",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "InvoiceGeneratorFixApi"
        },
        {
          "methodName": "MoveCreditTransfersToPending",
          "context": "    BankComponentAsync.MoveCreditTransfersToPending(CreditTransferIds)",
          "line": "73",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "SetMatchInfos",
          "context": "        BankComponentAsync.SetMatchInfos(SetMatchInfoRequests)",
          "line": "129",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "RematchCallDataRecords",
          "context": "    CdrAsync.RematchCallDataRecords(CallDataRecordRematchingRequests)",
          "line": "319",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/FixApi.bs",
          "serviceName": "CdrAsync"
        },
        {
          "methodName": "GetBankTransactionIds",
          "context": "    foreach BankTransactionId in MailToPay.GetBankTransactionIds(MtpTransactionIds)",
          "line": "107",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Getters.bs",
          "serviceName": "MailToPay"
        },
        {
          "methodName": "FillBillingEngineDataPartForInvoicePdf",
          "context": "    DocumentPrinterComponentAsync.FillBillingEngineDataPartForInvoicePdf(InvoiceId, InvoicePdfBillingEngineDataDto)",
          "line": "26",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/InvoicePdfGeneration.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        },
        {
          "methodName": "FillCdrPartForInvoicePdf",
          "context": "        CdrAsync.FillCdrPartForInvoicePdf(InvoiceId, InvoicePdfAccumulatedCallDataRecordDtoCollection)    ",
          "line": "202",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/InvoicePdfGeneration.bs",
          "serviceName": "CdrAsync"
        },
        {
          "methodName": "FillCdrPartForInvoicePdf",
          "context": "        DocumentPrinterComponentAsync.FillCdrPartForInvoicePdf(InvoiceId, InvoicePdfAccumulatedCallDataRecordDtoCollection)",
          "line": "204",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/InvoicePdfGeneration.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        },
        {
          "methodName": "FillVoddrPartForInvoicePdf",
          "context": "        VideoOnDemandAsync.FillVoddrPartForInvoicePdf(InvoiceId, InvoicePdfAccumulatedVideoOnDemandDataRecordDtoCollection)",
          "line": "221",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/InvoicePdfGeneration.bs",
          "serviceName": "VideoOnDemandAsync"
        },
        {
          "methodName": "FillVoddrPartForInvoicePdf",
          "context": "        DocumentPrinterComponentAsync.FillVoddrPartForInvoicePdf(InvoiceId, InvoicePdfAccumulatedVideoOnDemandDataRecordDtoCollection)",
          "line": "223",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/InvoicePdfGeneration.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        },
        {
          "methodName": "RecreateInvoice",
          "context": "    InvoiceGeneratorAsync.RecreateInvoice",
          "line": "13",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/InvoiceRecreation.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "CreateManualCorrectionVirtualBalanceRecordGeneratedGlEvent",
          "context": "    GeneralLedgerAsync.CreateManualCorrectionVirtualBalanceRecordGeneratedGlEvent(CreateManualCorrectionVirtualBalanceRecordGeneratedGlEventRequest, ServiceCategoryId)",
          "line": "91",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualBalanceCorrectionRequestApi.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "TryGetAccountNameById",
          "context": "    FullName = CrmBackend.TryGetAccountNameById(GetManualCorrectionVirtualBalanceRecordResponse.manualCorrection.createdBy)",
          "line": "201",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualBalanceCorrectionRequestApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetInvoice",
          "context": "    Invoice = InvoiceGenerator.GetInvoice(ManualInvoiceClearanceCreationRequest.invoiceId)",
          "line": "14",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualInvoiceClearanceRequestApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetInvoice",
          "context": "    Invoice = InvoiceGenerator.GetInvoice(ManualInvoiceClearanceRequest.invoiceId)",
          "line": "66",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualInvoiceClearanceRequestApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ClearInvoice",
          "context": "        InvoiceGenerator.ClearInvoice",
          "line": "111",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualInvoiceClearanceRequestApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "CreateManualInvoiceClearanceVirtualBalanceRecordGeneratedGlEvent",
          "context": "        GeneralLedgerAsync.CreateManualInvoiceClearanceVirtualBalanceRecordGeneratedGlEvent(ManualInvoiceClearanceGlEventCreationRequest, ServiceCategoryId)",
          "line": "137",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualInvoiceClearanceRequestApi.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "RevertInvoiceClearance",
          "context": "        InvoiceGenerator.RevertInvoiceClearance",
          "line": "149",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualInvoiceClearanceRequestApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "CreateManualInvoiceClearanceVirtualBalanceRecordGeneratedGlEvent",
          "context": "    GeneralLedgerAsync.CreateManualInvoiceClearanceVirtualBalanceRecordGeneratedGlEvent(ManualInvoiceClearanceGlEventCreationRequest, ServiceCategoryId)",
          "line": "202",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ManualInvoiceClearanceRequestApi.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "MigrateSapServiceAccountResponseHandler",
          "context": "    ApiGatewayMigrationApiAsync.MigrateSapServiceAccountResponseHandler(AccountId, MigrateServiceAccountRequest.serviceAccountId)",
          "line": "3",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "AddUsedId",
          "context": "    IdGenerator.AddUsedId(TypeOfId.ServiceAccountId, MigrateServiceAccountRequest.serviceAccountId)",
          "line": "4",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/MigrationApiAsync.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "MigrateSapSubscriptionResponseHandler",
          "context": "    ApiGatewayMigrationApiAsync.MigrateSapSubscriptionResponseHandler(AccountId, ServiceAccountId)",
          "line": "23",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "ActivateSapServiceAccountResponseHandler",
          "context": "        ApiGatewayMigrationApiAsync.ActivateSapServiceAccountResponseHandler(AccountId, ServiceAccountId)",
          "line": "31",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "ActivateSapServiceAccountResponseHandler",
          "context": "    ApiGatewayMigrationApiAsync.ActivateSapServiceAccountResponseHandler(AccountId, ServiceAccountId)",
          "line": "73",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "CompleteMoveDslOrder",
          "context": "    FulfillmentAsync.CompleteMoveDslOrder(MoveDslOrderCompletionResponse)",
          "line": "66",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/MovingFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "HandleServiceAccountMigrationResults",
          "context": "    OldBEMigrationServiceAsync.HandleServiceAccountMigrationResults(ServiceAccountMigrationResult)",
          "line": "50",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/OldBEMigrationApi.bs",
          "serviceName": "OldBEMigrationServiceAsync"
        },
        {
          "methodName": "ConfirmMigratedServiceAccountActivation",
          "context": "    OldBEMigrationServiceAsync.ConfirmMigratedServiceAccountActivation(ServiceAccountActivationChange.serviceAccountId)",
          "line": "61",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/OldBEMigrationApi.bs",
          "serviceName": "OldBEMigrationServiceAsync"
        },
        {
          "methodName": "ConfirmMigrationOfServiceAccountStopping",
          "context": "    OldBEMigrationServiceAsync.ConfirmMigrationOfServiceAccountStopping(ServiceAccountStoppingChange.serviceAccountId)",
          "line": "77",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/OldBEMigrationApi.bs",
          "serviceName": "OldBEMigrationServiceAsync"
        },
        {
          "methodName": "ConfirmMigrationOfServiceAccountCancelation",
          "context": "    OldBEMigrationServiceAsync.ConfirmMigrationOfServiceAccountCancelation(ServiceAccountCancelationChange.serviceAccountId)",
          "line": "90",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/OldBEMigrationApi.bs",
          "serviceName": "OldBEMigrationServiceAsync"
        },
        {
          "methodName": "ProcessFinalInvoiceGenerationRequests",
          "context": "        InvoiceGeneratorAsync.ProcessFinalInvoiceGenerationRequests(FinalInvoiceGenerationRequests)",
          "line": "81",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/Fix_CreateMissedPaybackRecords.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "CreateInvoice",
          "context": "                InvoiceGeneratorAsync.CreateInvoice(InvoiceGenerationRequest)",
          "line": "47",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/PatchBillingRun_15_01_19.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "RecreateInvoice",
          "context": "                InvoiceGeneratorAsync.RecreateInvoice",
          "line": "64",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/PatchBillingRun_15_01_19.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "GetProcessesForServiceAccount",
          "context": "    let Processes = Fulfillment.GetProcessesForServiceAccount(ServiceAccount.accountId, ServiceAccount.id)",
          "line": "16",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/PatchMainSubscriptionReactivateForBrokenMigratedSA_08_04_19.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAdjustingOrderById",
          "context": "        AdjustingOrder = Fulfillment.GetAdjustingOrderById(AdjustingOrderId)",
          "line": "19",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/PatchMainSubscriptionReactivateForBrokenMigratedSA_08_04_19.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "UpdateServiceAccounts",
          "context": "    DunningServiceAsync.UpdateServiceAccounts(ServiceAccountDunningPartCollection)",
          "line": "9",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/PathServiceAccountDunningPart.bs",
          "serviceName": "DunningServiceAsync"
        },
        {
          "methodName": "GenerateOffers",
          "context": "        FulfillmentAsync.GenerateOffers(OfferGenerationRequests)",
          "line": "21",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PatchingService/PathServiceAccountDunningPart.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "StartPaymentArrangement",
          "context": "    PaymentArrangementId = InvoiceGenerator.StartPaymentArrangement(NewStartPaymentArrangementRequest)",
          "line": "20",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PaymentArrangementLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetMinimumCollectionDateForPaymentArragement",
          "context": "    MinimumCollectionDate = InvoiceGenerator.GetMinimumCollectionDateForPaymentArragement(ServiceAccount.serviceCategoryId)",
          "line": "28",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PaymentArrangementLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "SetMatchInfo",
          "context": "    BankComponentAsync.SetMatchInfo(SetMatchInfoRequest.bankTransactionId, SetMatchInfoRequest.bankTransactionMatchInfo, SetMatchInfoRequest.serviceCategoryId)",
          "line": "64",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PaymentsCrud.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "RevertClearances",
          "context": "    InvoiceGenerator.RevertClearances(ServiceAccount.accountId, InvoiceClearanceCollection, PaymentArrangementPartId, PaymentReversalType)",
          "line": "76",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PaymentsCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "SetMatchInfos",
          "context": "        BankComponentAsync.SetMatchInfos(SetMatchInfoRequests)",
          "line": "165",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/PaymentsCrud.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "OnServiceAccountAutoProlongatedAsyncResponse",
          "context": "    FulfillmentAsync.OnServiceAccountAutoProlongatedAsyncResponse(StartOrderId, SubscriptionIds)",
          "line": "107",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SaveDefaultAvailablePropositionsForAddress",
          "context": "    FulfillmentAsync.SaveDefaultAvailablePropositionsForAddress(ServiceAccount.shippingAddress)",
          "line": "165",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(AutoProlongationFailedTaskCreationRequest)",
          "line": "186",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "CreateAdjustingOrderAsync",
          "context": "    FulfillmentAsync.CreateAdjustingOrderAsync(\"Billing Engine\", CreateAutoProlongationOrderRequest)",
          "line": "195",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ProlongateServiceAccountResponseHandler",
          "context": "    FulfillmentAsync.ProlongateServiceAccountResponseHandler(OrderId, SubscriptionIds)",
          "line": "357",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CheckIfServiceAccountHasPendingManualProlongationOrder",
          "context": "    ServiceAccountHasPendingManualProlongationOrderMap = Fulfillment.CheckIfServiceAccountHasPendingManualProlongationOrder(ServiceAccountIds)",
          "line": "392",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateAutoProlongationFailedTaskForServiceAccountsAsync",
          "context": "    TaskManagerAsync.CreateAutoProlongationFailedTaskForServiceAccountsAsync(AutoProlongationFailedTaskCreationDtoMap)",
          "line": "420",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "OnServiceAccountChangePriceForAutoProlongatedAsyncResponse",
          "context": "    FulfillmentAsync.OnServiceAccountChangePriceForAutoProlongatedAsyncResponse(StartOrderId, SubscriptionIds, OldSubscriptionIds)",
          "line": "482",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/Prolongation.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GenerateOffers",
          "context": "    FulfillmentAsync.GenerateOffers(OfferGenerationRequests)",
          "line": "14",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ProlongationOfferGenerationLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "Generate",
          "context": "    ReportGenerator.Generate(QuestPlusReportEntries)",
          "line": "7",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/QuestPlusApi.bs",
          "serviceName": "ReportGenerator"
        },
        {
          "methodName": "GetProductName",
          "context": "            ProductName = ProductCatalog.GetProductName(Subscription.productId)",
          "line": "16",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/QuestPlusApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "Generate",
          "context": "    ReportGenerator.Generate(QuestPlusReportEntries)",
          "line": "19",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/QuestPlusApi.bs",
          "serviceName": "ReportGenerator"
        },
        {
          "methodName": "Generate",
          "context": "    ReportGenerator.Generate(QuestPlusReportEntries)",
          "line": "73",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/QuestPlusApi.bs",
          "serviceName": "ReportGenerator"
        },
        {
          "methodName": "GetFilteredMandatesWithServiceAccountIds",
          "context": "        MandateWithServiceAccountIdList = BankComponent.GetFilteredMandatesWithServiceAccountIds(BaseFilterList)",
          "line": "22",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/SearchServiceInformationApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "2",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountContractMutationsCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        ServiceAccountId = IdGenerator.GetNextAvailableId(TypeOfId.ServiceAccountId)",
          "line": "28",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "AddUsedId",
          "context": "        IdGenerator.AddUsedId(TypeOfId.ServiceAccountId, CreateServiceAccountRequest.oldServiceAccountId)",
          "line": "31",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "AddCustomerAccountAssignedEmail",
          "context": "    CrmBackend.AddCustomerAccountAssignedEmail(AccountId, ServiceAccountId, CreateServiceAccountRequest.email, IsFirstServiceAccount)",
          "line": "57",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddCustomerAccountEmail",
          "context": "    CrmBackend.AddCustomerAccountEmail(AccountId, CreateServiceAccountRequest.email, IsFirstServiceAccount)",
          "line": "58",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GenerateClearanceEntityIdentification",
          "context": "            InvoiceGenerator.GenerateClearanceEntityIdentification",
          "line": "155",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ProcessClearanceEntityIdentificationResults",
          "context": "        BankComponentAsync.ProcessClearanceEntityIdentificationResults(ClearanceEntityIdentificationResults)",
          "line": "177",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "                CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "276",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountMandate",
          "context": "        Mandate = BankComponent.GetServiceAccountMandate(ServiceAccountId)",
          "line": "283",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetInvoicesByServiceAccountId",
          "context": "        Invoices = InvoiceGenerator.GetInvoicesByServiceAccountId(ServiceAccountId)",
          "line": "288",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetInvoice",
          "context": "        Invoice = InvoiceGenerator.GetInvoice(InvoiceId)",
          "line": "304",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "                CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "312",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountMandate",
          "context": "        Mandate = BankComponent.GetServiceAccountMandate(ServiceAccountId)",
          "line": "318",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetInvoicesByServiceAccountId",
          "context": "        Invoices = InvoiceGenerator.GetInvoicesByServiceAccountId(ServiceAccountId)",
          "line": "323",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "            CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "339",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetMandatesForServiceAccounts",
          "context": "        MandatesByServiceAccountId = BankComponent.GetMandatesForServiceAccounts(ServiceAccountIds)",
          "line": "349",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetOpenAndDunningInvoicesForServiceAccounts",
          "context": "        InvoicesByServiceAccountIdDto = InvoiceGenerator.GetOpenAndDunningInvoicesForServiceAccounts(ServiceAccountIds)",
          "line": "361",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetCustomerAccountsByFullName",
          "context": "        CustomerAccountList = CrmBackend.GetCustomerAccountsByFullName(FullName)",
          "line": "368",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetMandatesForServiceAccounts",
          "context": "        MandatesByServiceAccountId = BankComponent.GetMandatesForServiceAccounts(ServiceAccountIds)",
          "line": "378",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetOpenAndDunningInvoicesForServiceAccounts",
          "context": "        InvoicesByServiceAccountIdDto = InvoiceGenerator.GetOpenAndDunningInvoicesForServiceAccounts(ServiceAccountIds)",
          "line": "391",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetMandateById",
          "context": "        Mandate = BankComponent.GetMandateById(CrmPortalServiceAccountFilteringDto.mandateId)",
          "line": "397",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetServiceAccountIdsForMandateIds",
          "context": "        ServiceAccountIdsByMandateId = BankComponent.GetServiceAccountIdsForMandateIds(MandateIds)",
          "line": "404",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetOpenAndDunningInvoicesForServiceAccounts",
          "context": "        InvoicesByServiceAccountIdDto = InvoiceGenerator.GetOpenAndDunningInvoicesForServiceAccounts(ServiceAccountIds)",
          "line": "419",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetMandatesByServiceAccountIdByIban",
          "context": "        MandatesByServiceAccountId = BankComponent.GetMandatesByServiceAccountIdByIban(Iban)",
          "line": "426",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetServiceAccountIdsForMandateIds",
          "context": "        ServiceAccountIdsByMandateId = BankComponent.GetServiceAccountIdsForMandateIds(MandateIds)",
          "line": "429",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetOpenAndDunningInvoicesForServiceAccounts",
          "context": "        InvoicesByServiceAccountIdDto = InvoiceGenerator.GetOpenAndDunningInvoicesForServiceAccounts(ServiceAccountIds)",
          "line": "442",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetOpenAndDunningInvoicesForServiceAccounts",
          "context": "        InvoicesByServiceAccountIdDto = InvoiceGenerator.GetOpenAndDunningInvoicesForServiceAccounts(ServiceAccountIds)",
          "line": "458",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetMandatesForServiceAccounts",
          "context": "        MandatesByServiceAccountId = BankComponent.GetMandatesForServiceAccounts(ServiceAccountIds)",
          "line": "460",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "SendNotificationAboutNewServiceAccount",
          "context": "        CrmBackendAsync.SendNotificationAboutNewServiceAccount(CreateServiceAccountWithSubscriptionsRequest.accountId, ServiceAccountId)",
          "line": "510",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "CreateNewMandateOrUseExistedAsync",
          "context": "    BankComponentAsync.CreateNewMandateOrUseExistedAsync(CreateNewMandateOrUseExistedAsyncRequest)",
          "line": "533",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "CreateServiceAccountWithSubscriptionsAsyncResponseHandler",
          "context": "    FulfillmentAsync.CreateServiceAccountWithSubscriptionsAsyncResponseHandler(CreateServiceAccountWithSubscriptionsAsyncResponse)",
          "line": "542",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountCrud.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ProcessServiceAccountIdentificationResult",
          "context": "        FulfillmentAsync.ProcessServiceAccountIdentificationResult(ServiceAccountIdentificationResult)",
          "line": "13",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountIdentificationLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ProcessServiceAccountIdentificationResult",
          "context": "        FulfillmentAsync.ProcessServiceAccountIdentificationResult(ServiceAccountIdentificationResult)",
          "line": "19",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountIdentificationLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "IdentifyServiceAccount",
          "context": "        BankComponentAsync.IdentifyServiceAccount(ServiceAccountIds, ServiceAccountIdentificationRequest)",
          "line": "25",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountIdentificationLogic.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "ProcessServiceAccountIdentificationResult",
          "context": "    FulfillmentAsync.ProcessServiceAccountIdentificationResult(ServiceAccountIdentificationResult)",
          "line": "29",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/ServiceAccountIdentificationLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetMapOldBundleToNew",
          "context": "    MapOldBundleToNew = ProductCatalog.GetMapOldBundleToNew()",
          "line": "64",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/SharedObjects.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    SubscriptionId = IdGenerator.GetNextAvailableId(TypeOfId.SubscriptionId)",
          "line": "6",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/SubscriptionCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "UpdateServiceContract",
          "context": "        FulfillmentAsync.UpdateServiceContract(Subscription.serviceContractId)",
          "line": "215",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/SubscriptionCrud.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "UpdateServiceContract",
          "context": "        FulfillmentAsync.UpdateServiceContract(Subscription.serviceContractId)",
          "line": "289",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/SubscriptionCrud.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateInvoices",
          "context": "        InvoiceGeneratorAsync.CreateInvoices(InvoiceGenerationRequests)",
          "line": "119",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "RemoveServiceAccountDunningPart",
          "context": "    DunningServiceTestApi.RemoveServiceAccountDunningPart(ServiceAccountId)",
          "line": "135",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "DunningServiceTestApi"
        },
        {
          "methodName": "CreateInvoices",
          "context": "        InvoiceGeneratorAsync.CreateInvoices(InvoiceGenerationRequests)",
          "line": "193",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "CreateAdjustingOrderAsync",
          "context": "        FulfillmentAsync.CreateAdjustingOrderAsync(CreateCeaseDslOrderRequest.createdBy, CreateCeaseDslOrderRequest)",
          "line": "323",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SaveDefaultAvailablePropositionsForAddressList",
          "context": "    FulfillmentAsync.SaveDefaultAvailablePropositionsForAddressList(AddressList)",
          "line": "325",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ScheduledProcessServiceAccountChanges",
          "context": "    FulfillmentAsync.ScheduledProcessServiceAccountChanges(now)",
          "line": "327",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SaveDefaultAvailablePropositionsForAddressList",
          "context": "    FulfillmentAsync.SaveDefaultAvailablePropositionsForAddressList(AddressList)",
          "line": "341",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SaveDefaultAvailablePropositionsForAddressList",
          "context": "    FulfillmentAsync.SaveDefaultAvailablePropositionsForAddressList(AddressList)",
          "line": "349",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "RematchCallDataRecords",
          "context": "    CdrAsync.RematchCallDataRecords(CallDataRecordRematchingRequests)",
          "line": "432",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "CdrAsync"
        },
        {
          "methodName": "CreateInvoices",
          "context": "        InvoiceGeneratorAsync.CreateInvoices(InvoiceGenerationRequests)",
          "line": "453",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "SetServiceContractIdToSubscriptionsAsync",
          "context": "    BillingEngineServiceContractApiAsync.SetServiceContractIdToSubscriptionsAsync(ServiceAccountsList)",
          "line": "553",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/TestApi.bs",
          "serviceName": "BillingEngineServiceContractApiAsync"
        },
        {
          "methodName": "GetInvoice",
          "context": "    Invoice = InvoiceGenerator.GetInvoice(UncollectableInvoiceClearanceCreationRequest.invoiceId)",
          "line": "10",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetInvoice",
          "context": "    Invoice = InvoiceGenerator.GetInvoice(UncollectableInvoiceClearanceRequest.invoiceId)",
          "line": "57",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ClearInvoiceAsUncollectable",
          "context": "        InvoiceGenerator.ClearInvoiceAsUncollectable",
          "line": "99",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "RevertInvoiceClearance",
          "context": "        InvoiceGenerator.RevertInvoiceClearance",
          "line": "131",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "UncollectableAmountSettled",
          "context": "        UncollectableAmountService.UncollectableAmountSettled(Invoice.accountId)",
          "line": "140",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "UncollectableAmountService"
        },
        {
          "methodName": "CreateInvoiceMadeCollectableGlEvent",
          "context": "        GeneralLedgerAsync.CreateInvoiceMadeCollectableGlEvent(CreateInvoiceMadeCollectableGlEventRequest, ServiceCategoryId)",
          "line": "147",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "GetInvoiceOverview",
          "context": "    InvoiceOverview = InvoiceGenerator.GetInvoiceOverview(UncollectableInvoiceClearanceRequest.invoiceId)",
          "line": "183",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "UncollectableAmountAppeared",
          "context": "    UncollectableAmountService.UncollectableAmountAppeared(UncollectablePaymentDetails.accountId, InvoiceOverview)",
          "line": "184",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "UncollectableAmountService"
        },
        {
          "methodName": "CreateInvoiceMadeUncollectableGlEvent",
          "context": "    GeneralLedgerAsync.CreateInvoiceMadeUncollectableGlEvent(CreateInvoiceMadeUncollectableGlEventRequest, ServiceCategoryId)",
          "line": "189",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/UncollectableInvoiceClearanceApi.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "CreateVideoOnDemandDataRecordsProcessedGlEvent",
          "context": "        GeneralLedgerAsync.CreateVideoOnDemandDataRecordsProcessedGlEvent(CreateVideoOnDemandDataRecordsProcessedGlEventRequest, ServiceCategoryId)",
          "line": "39",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VideoOnDemandBilling.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "SendDataRecordsProcessingResults",
          "context": "    VideoOnDemand.SendDataRecordsProcessingResults(VideoOnDemandDataRecordProcessingResults)",
          "line": "40",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VideoOnDemandBilling.bs",
          "serviceName": "VideoOnDemand"
        },
        {
          "methodName": "SetVoipAccountStatus",
          "context": "                    FulfillmentAsync.SetVoipAccountStatus(ServiceAccount.accountId, ServiceAccount.id, VoipStateStatus.Normal, Voip_refLockedBy.ISP)",
          "line": "19",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VoipThresholds.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SendTresholdUnsuspendNotification",
          "context": "                    CrmBackendAsync.SendTresholdUnsuspendNotification(ServiceAccount.accountId, ServiceAccount.id, ServiceAccount.shippingAddress.fullAddress)",
          "line": "23",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VoipThresholds.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "SendTresholdWarningNotification",
          "context": "                    CrmBackendAsync.SendTresholdWarningNotification(ServiceAccount.accountId, ServiceAccount.id, ServiceAccount.shippingAddress.fullAddress, ActualWarningNotificationThreshold.ToString())",
          "line": "44",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VoipThresholds.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "SetVoipAccountStatus",
          "context": "                        FulfillmentAsync.SetVoipAccountStatus(ServiceAccount.accountId, ServiceAccount.id, VoipStateStatus.Suspend, Voip_refLockedBy.ISP)",
          "line": "50",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VoipThresholds.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SendTresholdSuspendNotification",
          "context": "                        CrmBackendAsync.SendTresholdSuspendNotification(ServiceAccount.accountId, ServiceAccount.id, ServiceAccount.shippingAddress.fullAddress, ActualSuspendNotificationThreshold.ToString())",
          "line": "53",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VoipThresholds.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "SendTresholdSuspendNotification",
          "context": "                            CrmBackendAsync.SendTresholdSuspendNotification(ServiceAccount.accountId, ServiceAccount.id, ServiceAccount.shippingAddress.fullAddress, AccumulatedCdrPriceCurrentNotificationThreshold.ToString())",
          "line": "61",
          "file": "/src/Domain/components/BillingEngine/BillingEngineSrc/VoipThresholds.bs",
          "serviceName": "CrmBackendAsync"
        }
      ]
    },
    {
      "componentName": "BlackList",
      "references": [
        {
          "methodName": "CheckCustomerInBlackListCallback",
          "context": "    FulfillmentAsync.CheckCustomerInBlackListCallback(AccountInBlackList, AccountId, OrderId)",
          "line": "11",
          "file": "/src/Domain/components/BlackList/BlackListSrc/BlackListApi.bs",
          "serviceName": "FulfillmentAsync"
        }
      ]
    },
    {
      "componentName": "Cdr",
      "references": [
        {
          "methodName": "GetAmountOfAllMatchedCallDataRecords",
          "context": "    AmountOfAllMatchedCallDataRecords = BillingEngine.GetAmountOfAllMatchedCallDataRecords()",
          "line": "62",
          "file": "/src/Domain/components/Cdr/CdrSrc/CallDataRecordsMigrationTestApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCallDataRecordBillingData",
          "context": "            CallDataRecordBillingData = BillingEngine.GetCallDataRecordBillingData(CallDataRecord.id, CallDataRecord.serviceAccountId)",
          "line": "111",
          "file": "/src/Domain/components/Cdr/CdrSrc/CallDataRecordsMigrationTestApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "RetrieveAllCallDataRecordFileNames",
          "context": "    CdrConnector.RetrieveAllCallDataRecordFileNames()",
          "line": "6",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "CdrConnector"
        },
        {
          "methodName": "RetrieveCallDataRecords",
          "context": "        CdrConnector.RetrieveCallDataRecords(CallDataRecordFileNameCollection)",
          "line": "14",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "CdrConnector"
        },
        {
          "methodName": "IdentifyServiceCalls",
          "context": "        ServiceCallsStorage.IdentifyServiceCalls(ServiceCallIdentificationRequests)",
          "line": "44",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "ServiceCallsStorage"
        },
        {
          "methodName": "IdentifyServiceCalls",
          "context": "    ServiceCallsStorage.IdentifyServiceCalls(ServiceCallIdentificationRequests)",
          "line": "83",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "ServiceCallsStorage"
        },
        {
          "methodName": "BillCallDataRecords",
          "context": "   BillingEngineAsync.BillCallDataRecords(CallDataRecordBillingRequests)",
          "line": "120",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "RematchCallDataRecords",
          "context": "        BillingEngineAsync.RematchCallDataRecords(CallDataRecordBillingRematchingRequests)",
          "line": "307",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "FillCdrPartForInvoicePdf",
          "context": "    DocumentPrinterComponentAsync.FillCdrPartForInvoicePdf(InvoiceId, InvoicePdfAccumulatedCallDataRecordDtoCollection)",
          "line": "327",
          "file": "/src/Domain/components/Cdr/CdrSrc/CdrApi.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        },
        {
          "methodName": "GetEventRateClassById",
          "context": "    EventRateClass = ProductCatalog.GetEventRateClassById(RateClassId)",
          "line": "8",
          "file": "/src/Domain/components/Cdr/CdrSrc/PhoneCodeApi.bs",
          "serviceName": "ProductCatalog"
        }
      ]
    },
    {
      "componentName": "CRMBackend",
      "references": [
        {
          "methodName": "ProcessMailAssignmentResult",
          "context": "    MailStorageAsync.ProcessMailAssignmentResult(MailAssignmentResult)",
          "line": "36",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "MailStorageAsync"
        },
        {
          "methodName": "SendTriplePlayUnsuspensionNotification",
          "context": "    SendgridServiceAsync.SendTriplePlayUnsuspensionNotification(CustomerInfo)",
          "line": "42",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "FillAccountPartForInvoicePdf",
          "context": "    DocumentPrinterComponentAsync.FillAccountPartForInvoicePdf(InvoiceId, InvoicePdfAccountDataDto)",
          "line": "47",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        },
        {
          "methodName": "SendNewServiceAccountEmailMessage",
          "context": "    SendgridServiceAsync.SendNewServiceAccountEmailMessage(CustomerInfo)",
          "line": "59",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendEmailWithProlongationContractToCustomer",
          "context": "        SendgridServiceAsync.SendEmailWithProlongationContractToCustomer(CustomerInfo, StorageFile.id, StorageFile.orderId, StartOn)",
          "line": "64",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetWishDateByOrderId",
          "context": "        DateTime = Fulfillment.GetWishDateByOrderId(StorageFile.orderId)",
          "line": "66",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendEmailWithContractToCustomer",
          "context": "        SendgridServiceAsync.SendEmailWithContractToCustomer(CustomerInfo, StorageFile.id, StorageFile.orderId, DateTime)",
          "line": "67",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "RegisterMyNleUserAndGeneratePasswordIfNeeded",
          "context": "        IdentityServerAsync.RegisterMyNleUserAndGeneratePasswordIfNeeded(CustomerInfo)",
          "line": "77",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CrmBackendApi.bs",
          "serviceName": "IdentityServerAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    AccountId = IdGenerator.GetNextAvailableId(TypeOfId.AccountId)",
          "line": "28",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "SendResetUsernameEmail",
          "context": "        SendgridServiceAsync.SendResetUsernameEmail(NewEmail, OldEmail, Login)",
          "line": "93",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "    ServiceAccountsList = BillingEngine.GetServiceAccounts(AccountId)",
          "line": "304",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountMandate",
          "context": "        Mandate = BankComponent.GetServiceAccountMandate(ServiceAccount.id)",
          "line": "312",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "346",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetInvoicePdfAttachmentId",
          "context": "    AttachmentId = FileStorageComponent.GetInvoicePdfAttachmentId(InvoiceNotificationRequest.invoiceId)",
          "line": "380",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "SendMonthlyInvoiceNotification",
          "context": "        SendgridServiceAsync.SendMonthlyInvoiceNotification(CustomerInfo, InvoiceNotificationRequest.amount, InvoiceNotificationRequest.collectionDate, AttachmentId)",
          "line": "383",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetMandate",
          "context": "        Iban = BankComponent.GetMandate(InvoiceNotificationRequest.serviceAccountId).memberIban",
          "line": "386",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "SendAnnouncementFirstIncasso",
          "context": "        SendgridServiceAsync.SendAnnouncementFirstIncasso(CustomerInfo, InvoiceNotificationRequest.amount, Iban, InvoiceNotificationRequest.invoiceDate, InvoiceNotificationRequest.collectionDate, AttachmentId)",
          "line": "387",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendFinalInvoiceNotification",
          "context": "            SendgridServiceAsync.SendFinalInvoiceNotification(CustomerInfo, InvoiceNotificationRequest.amount, InvoiceNotificationRequest.collectionDate, AttachmentId)",
          "line": "393",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendNewPhoneNumberIsActive",
          "context": "    SendgridServiceAsync.SendNewPhoneNumberIsActive(CustomerInfo, StartDate, Phone)",
          "line": "397",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendInstallationDate",
          "context": "    SendgridServiceAsync.SendInstallationDate(CustomerInfo, InstallationBookItemDate, DayPart.ToString())",
          "line": "401",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "NotifyScheduleDate",
          "context": "    SendgridServiceAsync.NotifyScheduleDate(CustomerInfo, ScheduleStartDateTime, ScheduleEndDateTime)",
          "line": "405",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetOutgoingEmailsListForEmail",
          "context": "    OutgoingEmailCustomerContacts = SendgridService.GetOutgoingEmailsListForEmail(AccountId).Select(id=> id.ToCustomerEmail(Email))",
          "line": "14",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerContactCrud.bs",
          "serviceName": "SendgridService"
        },
        {
          "methodName": "GetActiveOrClosedServiceInformationItemListByShippingAddressFilter",
          "context": "        PartiallyMatchedServiceDeliveryInformationItemList = BillingEngine.GetActiveOrClosedServiceInformationItemListByShippingAddressFilter(FiltersToSearchInBillingEngine).Select(si => si.ToServiceDeliveryInformationItem(FullFilterList, UniqueFiltersCount))",
          "line": "59",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPartiallyMatchedInProgressOrders",
          "context": "    PartiallyMatchedServiceDeliveryInformationItemList ++= Fulfillment.GetPartiallyMatchedInProgressOrders(FullFilterList, CustomerAccountIdList, FiltersToSearchInFulfillmentWithAssignedCustomers).Select(o => o.ToServiceDeliveryInformationItem(FullFilterList, FiltersToSearchInFulfillmentWithAssignedCustomers, UniqueFiltersCount))",
          "line": "61",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetBillingInfoByAccountId",
          "context": "        SearchServiceAccountsResponses = BillingEngine.GetBillingInfoByAccountId(CustomerAccountIdList)",
          "line": "125",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountIdsByServiceCategoryIdAndStatus",
          "context": "        CustomerAccountIdsDto = BillingEngine.GetCustomerAccountIdsByServiceCategoryIdAndStatus(PageNumber, PerPage, ServiceAccountFilteringRequest, CustomerAccountSearchRequest.status, CustomerAccountSearchRequest.statusSearch)",
          "line": "150",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountBySearch",
          "context": "        AccountId = BillingEngine.GetServiceAccountBySearch(CustomerAccountSearchRequest.serviceAccountId)",
          "line": "201",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetAccountIdByInvoiceId",
          "context": "        AccountId = InvoiceGenerator.GetAccountIdByInvoiceId(CustomerAccountSearchRequest.invoiceId)",
          "line": "213",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetCustomerAccountIdBySubscriptionId",
          "context": "        AccountId = BillingEngine.GetCustomerAccountIdBySubscriptionId(CustomerAccountSearchRequest.subscriptionId)",
          "line": "225",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/CustomerSearchFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    AccountId = IdGenerator.GetNextAvailableId(TypeOfId.AccountId)",
          "line": "19",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/EmployeeAccountCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "IsLoginInUse",
          "context": "        Boolean = IdentityServer.IsLoginInUse(UpdateEmployeeAccountRequest.email)",
          "line": "49",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/EmployeeAccountCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "SendResetUsernameEmail",
          "context": "            SendgridServiceAsync.SendResetUsernameEmail(NewEmail, OldEmail, Login)",
          "line": "55",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/EmployeeAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "ChangeLoginByAccountId",
          "context": "            IdentityServer.ChangeLoginByAccountId(UpdateEmployeeAccountRequest.id, Login)",
          "line": "56",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/EmployeeAccountCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "SetUserRoles",
          "context": "    IdentityServer.SetUserRoles(UpdateEmployeeAccountRequest.id, UpdateEmployeeAccountRequest.roles)",
          "line": "59",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/EmployeeAccountCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "UpdateAssignedEmployeeTaskSkills",
          "context": "    TaskManager.UpdateAssignedEmployeeTaskSkills(UpdateEmployeeAccountRequest.id, UpdateEmployeeAccountRequest.skills)",
          "line": "61",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/EmployeeAccountCrud.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "ResetIban",
          "context": "    SendgridServiceAsync.ResetIban(CustomerInfo, MemberIban, DateTime, City)",
          "line": "3",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendCallDataRecordCoveragePartiallyExhaustedNotification",
          "context": "    SendgridServiceAsync.SendCallDataRecordCoveragePartiallyExhaustedNotification(CustomerInfo, BundleName, WarningLimit)",
          "line": "9",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendCallDataRecordCoverageFullyExhaustedNotification",
          "context": "    SendgridServiceAsync.SendCallDataRecordCoverageFullyExhaustedNotification(CustomerInfo, BundleName, Size)",
          "line": "15",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendEndOfDeliveryNotification",
          "context": "    SendgridServiceAsync.SendEndOfDeliveryNotification(CustomerInfo, CreatedBy, EndDate, ReasonCodeName)",
          "line": "22",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendTresholdWarningNotification",
          "context": "    SendgridServiceAsync.SendTresholdWarningNotification(CustomerInfo, ThresholdValue)",
          "line": "28",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendTresholdSuspendNotification",
          "context": "    SendgridServiceAsync.SendTresholdSuspendNotification(CustomerInfo, ThresholdValue)",
          "line": "33",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendTresholdUnsuspendNotification",
          "context": "    SendgridServiceAsync.SendTresholdUnsuspendNotification(CustomerInfo)",
          "line": "39",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MailProxy.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "AddUsedId",
          "context": "        IdGenerator.AddUsedId(TypeOfId.AccountId, MigrateCustomerAccountRequest.accountId)",
          "line": "4",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MigrationApiAsync.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "MigrateSapCustomerAccountResponseHandler",
          "context": "    ApiGatewayMigrationApiAsync.MigrateSapCustomerAccountResponseHandler(MigrateCustomerAccountRequest.accountId, ServiceAccountId)",
          "line": "5",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "AddUsedId",
          "context": "            IdGenerator.AddUsedId(TypeOfId.AccountId, AccountId)",
          "line": "56",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/OldBEMigrationApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "HandleCustomerAccountMigrationResults",
          "context": "    OldBEMigrationServiceAsync.HandleCustomerAccountMigrationResults(CustomerAccountMigrationResult)",
          "line": "62",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/OldBEMigrationApi.bs",
          "serviceName": "OldBEMigrationServiceAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    AccountId = IdGenerator.GetNextAvailableId(TypeOfId.AccountId)",
          "line": "13",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/PartnerAccountCrud.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "SendResetUsernameEmail",
          "context": "        SendgridServiceAsync.SendResetUsernameEmail(NewEmail, OldEmail, Login)",
          "line": "47",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/PartnerAccountCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "Generate",
          "context": "    ReportGenerator.Generate(QuestPlusReportEntries)",
          "line": "12",
          "file": "/src/Domain/components/CRMBackend/CRMBackendSrc/QuestPlusApi.bs",
          "serviceName": "ReportGenerator"
        }
      ]
    },
    {
      "componentName": "DocumentPrinterComponent",
      "references": [
        {
          "methodName": "GetPropositionCashbackAmount",
          "context": "        energyCustomerDiscount = ProductCatalog.GetPropositionCashbackAmount(Order.propositionId))",
          "line": "27",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAddressesToUpDownSpeeds",
          "context": "    AddressToUpDownSpeeds = Fulfillment.GetAddressesToUpDownSpeeds(Order.shippingAddress.fullAddress)",
          "line": "28",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetPropositionById",
          "context": "    let Proposition = ProductCatalog.GetPropositionById(Order.propositionId)",
          "line": "30",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetProductById",
          "context": "        Product = ProductCatalog.GetProductById(CreateSubscriptionRequest.productId)",
          "line": "43",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetDiscountByDiscountId",
          "context": "                Discount = ProductCatalog.GetDiscountByDiscountId(Product.pricePlan.id, SubscribeBundleWithDiscountRequest.discountId)",
          "line": "55",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "PrintTriplePlay",
          "context": "    DocumentPrinterService.PrintTriplePlay(TriplePlayContract)",
          "line": "80",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "DocumentPrinterService"
        },
        {
          "methodName": "GetProductById",
          "context": "    Product = ProductCatalog.GetProductById(ProductId)",
          "line": "106",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetPropositionCashbackAmount",
          "context": "                ProductCatalog.GetPropositionCashbackAmount(Order.propositionId),",
          "line": "126",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetProductById",
          "context": "        Product = ProductCatalog.GetProductById(CreateSubscriptionRequest.productId)",
          "line": "132",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "PrintAnna",
          "context": "    DocumentPrinterService.PrintAnna(AnnaContract)",
          "line": "145",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "DocumentPrinterService"
        },
        {
          "methodName": "RemoveStorageInvoiceFiles",
          "context": "    FileStorageComponent.RemoveStorageInvoiceFiles(InvoiceIds)",
          "line": "171",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponent.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "PrintInvoice",
          "context": "        DocumentPrinterService.PrintInvoice(InvoicePdfDto)",
          "line": "10",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/DocumentPrinterComponentAsyncApi.bs",
          "serviceName": "DocumentPrinterService"
        },
        {
          "methodName": "GetOrderById",
          "context": "    Order = Fulfillment.GetOrderById(OrderId)",
          "line": "5",
          "file": "/src/Domain/components/DocumentPrinterComponent/DocumentPrinterComponentSrc/OrderContractGenerationFunctionality.bs",
          "serviceName": "Fulfillment"
        }
      ]
    },
    {
      "componentName": "DunningComponent",
      "references": [
        {
          "methodName": "TryFindInvoiceForDunningBlock",
          "context": "        InvoiceGenerator.TryFindInvoiceForDunningBlock(InvoiceId, CorrelationId)",
          "line": "34",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningBlockApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    id = IdGenerator.GetNextAvailableId(TypeOfId.DunningBlock),",
          "line": "56",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningBlockApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.DunningProcessId),",
          "line": "66",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningBlockApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetInvoice",
          "context": "    Invoice = InvoiceGenerator.GetInvoice(InvoiceId = InvoiceId)",
          "line": "120",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningBlockApi.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "TrySetVoipAccountStatus",
          "context": "    FulfillmentAsync.TrySetVoipAccountStatus",
          "line": "27",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningClosureActionsLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "TrySetTvAccountState",
          "context": "    FulfillmentAsync.TrySetTvAccountState(DunningProcess.accountId, DunningProcess.serviceAccountId, TVStateStatus.Normal)",
          "line": "35",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningClosureActionsLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "TrySetLineState",
          "context": "    FulfillmentAsync.TrySetLineState(DunningProcess.accountId, DunningProcess.serviceAccountId, LineStatus.Normal, PageText)",
          "line": "41",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningClosureActionsLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ProcessTriplePlayServicesUnsuspension",
          "context": "    CrmBackend.ProcessTriplePlayServicesUnsuspension(DunningProcess.accountId, TriplePlayServicesSuspension.serviceAccountId)",
          "line": "57",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/DunningClosureActionsLogic.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "UpdateEndOfSupplyTriggerStatus",
          "context": "        BillingEngineAsync.UpdateEndOfSupplyTriggerStatus",
          "line": "38",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/EndOfSupply.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "SetEndOfSupplyTriggerIsActive",
          "context": "        BillingEngineAsync.SetEndOfSupplyTriggerIsActive",
          "line": "45",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/EndOfSupply.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateDunningPenalty",
          "context": "    BillingEngine.CreateDunningPenalty",
          "line": "8",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/LevelTransitionLogic.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "TrySetVoipAccountStatus",
          "context": "    Fulfillment.TrySetVoipAccountStatus",
          "line": "127",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/LevelTransitionLogic.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "TrySetTvAccountState",
          "context": "    FulfillmentAsync.TrySetTvAccountState(DunningProcess.accountId, DunningProcess.serviceAccountId, TVStateStatus.Suspend)",
          "line": "135",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/LevelTransitionLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "TrySetLineState",
          "context": "    FulfillmentAsync.TrySetLineState(DunningProcess.accountId, DunningProcess.serviceAccountId, LineStatus.Restricted_PageText, DslSuspensionDescription)",
          "line": "157",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/LevelTransitionLogic.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SendDunningPaymentRequest",
          "context": "    MailToPayAsync.SendDunningPaymentRequest",
          "line": "11",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/MtpReminder.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "GetServiceAccountShippingAddress",
          "context": "        variable5 = BillingEngine.GetServiceAccountShippingAddress(DunningProcess.serviceAccountId)",
          "line": "42",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/MtpReminder.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SendEndOfSupplyPaymentRequest",
          "context": "    MailToPayAsync.SendEndOfSupplyPaymentRequest",
          "line": "140",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/MtpReminder.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "RemoveSentToDunningInvoiceByInvoiceId",
          "context": "        InvoiceGenerator.RemoveSentToDunningInvoiceByInvoiceId(IncomingInvoiceOverview.id)",
          "line": "16",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "StartDunning",
          "context": "        InvoiceGenerator.StartDunning(InvoiceIds)",
          "line": "26",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    DunningProcessId = IdGenerator.GetNextAvailableId(TypeOfId.DunningProcessId)",
          "line": "64",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "StartDunning",
          "context": "    InvoiceGenerator.StartDunning(InvoiceIds)",
          "line": "82",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "DunningStarted",
          "context": "    DunningNotificationService.DunningStarted(DunningProcess.accountId, InvoiceOverviews)",
          "line": "86",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "DunningNotificationService"
        },
        {
          "methodName": "ProcessClearanceEntityIdentificationResults",
          "context": "    BankComponentAsync.ProcessClearanceEntityIdentificationResults(ClearanceEntityIdentificationResults)",
          "line": "255",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "RemoveSentToDunningInvoices",
          "context": "    InvoiceGenerator.RemoveSentToDunningInvoices(RemovedInvoiceIds)",
          "line": "396",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "DuunnigStopped",
          "context": "    DunningNotificationService.DuunnigStopped(DunningProcess.accountId, !DunningProcessesHistory.hasActiveDunningProcesses())",
          "line": "407",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/ProcessDunningLogic.bs",
          "serviceName": "DunningNotificationService"
        },
        {
          "methodName": "CollectQuestPlusServiceAccountReportEntries",
          "context": "            BillingEngine.CollectQuestPlusServiceAccountReportEntries(ServiceAccountIds)",
          "line": "17",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/QuestPlusApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CollectQuestPlusSubscriptionReportEntries",
          "context": "            BillingEngine.CollectQuestPlusSubscriptionReportEntries(ServiceAccountIds)",
          "line": "18",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/QuestPlusApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CollectQuestPlusInvoiceClearanceReportEntries",
          "context": "            BillingEngine.CollectQuestPlusInvoiceClearanceReportEntries(QuestPlusDunningInvoiceClearanceInfos)",
          "line": "20",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/QuestPlusApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CollectQuestPlusAccountReportEntries",
          "context": "            CrmBackend.CollectQuestPlusAccountReportEntries(AccountIds)",
          "line": "22",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/QuestPlusApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "CollectQuestPlusInvoiceReportEntries",
          "context": "            InvoiceGenerator.CollectQuestPlusInvoiceReportEntries(QuestPlusDunningInvoiceInfos)",
          "line": "24",
          "file": "/src/Domain/components/DunningComponent/DunningComponentSrc/QuestPlusApi.bs",
          "serviceName": "InvoiceGenerator"
        }
      ]
    },
    {
      "componentName": "FileStorageComponent",
      "references": [
        {
          "methodName": "GenerageFileAccessLink",
          "context": "                AwsStorageFileLink = FileStorageReceieverComponentService.GenerageFileAccessLink(StorageFile.storageFileKey)",
          "line": "10",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "FileStorageReceieverComponentService"
        },
        {
          "methodName": "GenerageFileAccessLink",
          "context": "    AwsStorageFileLink = FileStorageReceieverComponentService.GenerageFileAccessLink(FileStorageObjectKey)",
          "line": "29",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "FileStorageReceieverComponentService"
        },
        {
          "methodName": "InitiateInvoicePdfGeneration",
          "context": "    InvoiceGeneratorAsync.InitiateInvoicePdfGeneration(InvoiceId)",
          "line": "34",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "GenerageFileAccessLink",
          "context": "        AwsStorageFileLink = FileStorageReceieverComponentService.GenerageFileAccessLink(StorageMailAttachment.storageFileKey)",
          "line": "42",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "FileStorageReceieverComponentService"
        },
        {
          "methodName": "GetFile",
          "context": "        String = FileStorageReceieverComponentService.GetFile(StorageMailAttachment.storageFileKey)",
          "line": "53",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "FileStorageReceieverComponentService"
        },
        {
          "methodName": "SendContractAndRegisterUserIfNeeded",
          "context": "    CrmBackendAsync.SendContractAndRegisterUserIfNeeded(StorageFile, SaveContractConfirmation.startOn)",
          "line": "88",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "SendInvoiceNotification",
          "context": "    InvoiceGeneratorAsync.SendInvoiceNotification(SaveInvoiceConfirmation.invoiceId)",
          "line": "114",
          "file": "/src/Domain/components/FileStorageComponent/FileStorageComponentSrc/OrderContractApi.bs",
          "serviceName": "InvoiceGeneratorAsync"
        }
      ]
    },
    {
      "componentName": "Fulfillment",
      "references": [
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, CreateExtraHardwareOrderRequest.serviceAccountId)",
          "line": "12",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "51",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetBundleById",
          "context": "    BundleName = ProductCatalog.GetBundleById(CreateExtraHardwareOrderRequest.orders.First().bundleId).name",
          "line": "52",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "AddSTB",
          "context": "    SendgridServiceAsync.AddSTB(CustomerInfo, today, BundleName, TotalAmountOfStb)",
          "line": "54",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(CreateStartTvOrderRequest.customerId, CreateStartTvOrderRequest.serviceAccountId)",
          "line": "69",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, CreateStartTvOrderRequest.serviceAccountId)",
          "line": "79",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId)",
          "line": "84",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(CreateStartVoipOrderRequest.customerId, CreateStartVoipOrderRequest.serviceAccountId)",
          "line": "180",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, CreateStartVoipOrderRequest.serviceAccountId)",
          "line": "190",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId)",
          "line": "195",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetServiceAccountEndOn",
          "context": "        EndOn = BillingEngine.GetServiceAccountEndOn(ServiceAccountId)",
          "line": "253",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountPropositionIdByServiceAccountId",
          "context": "    PropositionId = BillingEngine.GetServiceAccountPropositionIdByServiceAccountId(ServiceAccountId)",
          "line": "256",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId)",
          "line": "262",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId),",
          "line": "269",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetServiceAccountEndOn",
          "context": "        EndOn = BillingEngine.GetServiceAccountEndOn(ServiceAccountId)",
          "line": "284",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountPropositionIdByServiceAccountId",
          "context": "    PropositionId = BillingEngine.GetServiceAccountPropositionIdByServiceAccountId(ServiceAccountId)",
          "line": "287",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId)",
          "line": "293",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId),",
          "line": "300",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, CreateUpgradeDslOrderRequest.serviceAccountId)",
          "line": "319",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfo = ProductCatalog.GetCobsExternalBundleInfos().First(b => b.bundleId == MainBundle.id) //AvailableBundles.First(b => b.id == MainBundle.id)",
          "line": "333",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId)",
          "line": "379",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId)",
          "line": "408",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "429",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "EnsureUserAccountExists",
          "context": "        CrmBackend.EnsureUserAccountExists(CreatedBy)",
          "line": "442",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "445",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SendEndOfDeliveryNotification",
          "context": "    CrmBackendAsync.SendEndOfDeliveryNotification(ServiceAccount.accountId, ServiceAccount.id, AdjustingOrder.createdBy, AdjustingOrder.startWishDate.Date(), CreateCeaseDslOrderRequest.reason.description)",
          "line": "467",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "EnsureUserAccountExists",
          "context": "        CrmBackend.EnsureUserAccountExists(CreatedBy)",
          "line": "476",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "479",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountByServiceAccountId",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountByServiceAccountId(ServiceAccountId)",
          "line": "510",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(ServiceAccount.accountId, ServiceAccount.id)",
          "line": "552",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendCreateMovingOrderEmail",
          "context": "    SendgridServiceAsync.SendCreateMovingOrderEmail(CustomerInfo, ServiceAccount.shippingAddress.fullAddress, CreateMoveDslOrderRequest.newDelieveryAddress.ToFullAddress(), CreateMoveDslOrderRequest.movingDate, ProductInformation.oldDslPrice, ProductInformation.newDslPrice, ProductInformation.oldDslProduct, ProductInformation.newDslProduct)",
          "line": "553",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(CreateChangePriceForAutoProlongationOrderRequest.customerId, CreateChangePriceForAutoProlongationOrderRequest.serviceAccountId)",
          "line": "564",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.AdjustingOrderId)",
          "line": "577",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/AdjustingOrderCreation.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "EnsureUserAccountExists",
          "context": "    CrmBackend.EnsureUserAccountExists(AccountId)",
          "line": "38",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/MoveToOrderStateFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(StopTvOrder.id)",
          "line": "36",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(StopVoipOrder.id)",
          "line": "47",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(StartTvOrder.id)",
          "line": "54",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(StartVoipOrder.id)",
          "line": "61",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(PackageAddOrder.id)",
          "line": "77",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PackageAddOrder.assignedOrderInfo.customerId, PackageAddOrder.assignedOrderInfo.serviceAccountId)",
          "line": "80",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddVoipBundles",
          "context": "    SendgridServiceAsync.AddVoipBundles(CustomerInfo, StartDate, AddedBundleNames)",
          "line": "83",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(CeaseDslOrder.id)",
          "line": "90",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(PackageDropOrder.id)",
          "line": "105",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PackageDropOrder.assignedOrderInfo.customerId, PackageDropOrder.assignedOrderInfo.serviceAccountId)",
          "line": "114",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "DropVOIPBundle",
          "context": "    SendgridServiceAsync.DropVOIPBundle(CustomerInfo, EndDate, DroppedBundleNames)",
          "line": "117",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PackageDropOrder.assignedOrderInfo.customerId, PackageDropOrder.assignedOrderInfo.serviceAccountId)",
          "line": "120",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "DropTVBundle",
          "context": "    SendgridServiceAsync.DropTVBundle(CustomerInfo, EndDate, DroppedBundleNames)",
          "line": "123",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(AutoProlongationOrder.id)",
          "line": "126",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToOnHoldOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToOnHoldOrderStateAsync(ExtraHardwareOrder.id, false)",
          "line": "148",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(ExtraHardwareOrder.id)",
          "line": "153",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(UpgradeDslOrder.id)",
          "line": "156",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "PostCodeCheckV9ForOrderAsync",
          "context": "    CobsServiceAsync.PostCodeCheckV9ForOrderAsync(AdjustingOrder.id, AdjustingOrder.shippingAddress.ToPostCodeCheckRequest(PqccCheckType.Coverage))",
          "line": "171",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "PostCodeCheckV9ForOrderAsync",
          "context": "    CobsServiceAsync.PostCodeCheckV9ForOrderAsync(MoveDslOrder.id, MoveDslOrder.newDelieveryAddress.ToPostCodeCheckRequest(PqccCheckType.Coverage))",
          "line": "175",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(AdjustingOrder.id)",
          "line": "179",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(MoveDslOrder.id)",
          "line": "186",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "PostCodeCheckV9ForOrderAsync",
          "context": "    CobsServiceAsync.PostCodeCheckV9ForOrderAsync(MoveDslOrder.id, MoveDslOrder.newDelieveryAddress.ToPostCodeCheckRequest(MoveDslOrder.orderLines))",
          "line": "190",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(MoveDslOrder.id)",
          "line": "191",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateSubscription",
          "context": "        SubscriptionId = BillingEngine.CreateSubscription(",
          "line": "201",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId)",
          "line": "213",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "227",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId)",
          "line": "228",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "StartTvEmail",
          "context": "    SendgridServiceAsync.StartTvEmail(CustomerInfo, StartDate, BundleNames)",
          "line": "232",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "AutoProlongateServiceAccountAsync",
          "context": "    BillingEngineAsync.AutoProlongateServiceAccountAsync(",
          "line": "237",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateSubscription",
          "context": "            SubscriptionId = BillingEngine.CreateSubscription(",
          "line": "250",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "        SubscriptionsList = BillingEngine.GetSubscriptions(StartVoipOrder.assignedOrderInfo.customerId, StartVoipOrder.assignedOrderInfo.serviceAccountId)",
          "line": "258",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "268",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId)",
          "line": "269",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SendEmailWithStartVoipNotification",
          "context": "    SendgridServiceAsync.SendEmailWithStartVoipNotification(CustomerInfo, StartDate, BundleNames)",
          "line": "273",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "                FulfillmentAsync.MoveToNextRegularOrderStateAsync(Flow.id)",
          "line": "310",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CompleteAutoProlongationProcess",
          "context": "    BillingEngineAsync.CompleteAutoProlongationProcess(AutoProlongationOrder.assignedOrderInfo.customerId,",
          "line": "321",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(StartTvOrder.assignedOrderInfo.customerId, StartTvOrder.assignedOrderInfo.serviceAccountId)",
          "line": "331",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ActivateSubscriptionById",
          "context": "        BillingEngine.ActivateSubscriptionById(StartTvOrder.assignedOrderInfo.customerId, StartTvOrder.assignedOrderInfo.serviceAccountId, Subscription.id, now)",
          "line": "335",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(StartVoipOrder.assignedOrderInfo.customerId, StartVoipOrder.assignedOrderInfo.serviceAccountId)",
          "line": "344",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ActivateSubscriptionById",
          "context": "        BillingEngine.ActivateSubscriptionById(StartVoipOrder.assignedOrderInfo.customerId, StartVoipOrder.assignedOrderInfo.serviceAccountId, Subscription.id, now)",
          "line": "349",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(StartVoipOrder.assignedOrderInfo.customerId, StartVoipOrder.assignedOrderInfo.serviceAccountId)",
          "line": "351",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendNewPhoneNumberIsActive",
          "context": "        SendgridServiceAsync.SendNewPhoneNumberIsActive(CustomerInfo, today, PhoneNumber)",
          "line": "356",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "StopServiceAccount",
          "context": "    BillingEngine.StopServiceAccount(AccountId, ServiceAccountId, EndOn, ReasonDto, IncludeCostsTillEndOfContract, CeaseCosts)",
          "line": "372",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    let SubscriptionIds =  BillingEngine.GetSubscriptions(StopTvOrder.assignedOrderInfo.customerId, StopTvOrder.assignedOrderInfo.serviceAccountId).Where(t => t.getStatus(now) == SubscriptionStatus.Active && PublishedProductCatalogEntity.productMap[t.productId].productTemplate.typeOfServiceId == TvTypeOfServiceId).Select(s => s.id)",
          "line": "380",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "405",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "407",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "DropTVSubscription",
          "context": "    SendgridServiceAsync.DropTVSubscription(CustomerInfo, EndDate, BundleNames)",
          "line": "414",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    let SubscriptionIds =  BillingEngine.GetSubscriptions(StopVoipOrder.assignedOrderInfo.customerId, StopVoipOrder.assignedOrderInfo.serviceAccountId).Where(t => t.getStatus(now) == SubscriptionStatus.Active && PublishedProductCatalogEntity.productMap[t.productId].productTemplate.typeOfServiceId == VoipTypeOfServiceId).Select(s => s.id)",
          "line": "419",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "444",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "446",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "DropVOIPSubscription",
          "context": "    SendgridServiceAsync.DropVOIPSubscription(CustomerInfo, EndDate, BundleNames)",
          "line": "453",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "StopAndRecalculateSubscription",
          "context": "        BillingEngine.StopAndRecalculateSubscription(StopTvOrder.assignedOrderInfo.customerId, StopTvOrder.assignedOrderInfo.serviceAccountId, SubscriptionId, now)",
          "line": "468",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "        Subscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "489",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "StopAndRecalculateSubscription",
          "context": "            BillingEngine.StopAndRecalculateSubscription(StopVoipOrder.assignedOrderInfo.customerId, StopVoipOrder.assignedOrderInfo.serviceAccountId, SubscriptionId, now)",
          "line": "492",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(UpgradeDslOrder.assignedOrderInfo.customerId, UpgradeDslOrder.assignedOrderInfo.serviceAccountId)",
          "line": "506",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ChangePriceForAutoProlongatedServiceAccountAsync",
          "context": "    BillingEngineAsync.ChangePriceForAutoProlongatedServiceAccountAsync(",
          "line": "532",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(UpgradeDslOrder.assignedOrderInfo.customerId, UpgradeDslOrder.assignedOrderInfo.serviceAccountId)",
          "line": "542",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(ServiceAccount.accountId, ServiceAccount.id)",
          "line": "543",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(UpgradeDslOrder.assignedOrderInfo.customerId, UpgradeDslOrder.assignedOrderInfo.serviceAccountId)",
          "line": "550",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(UpgradeDslOrder.id)",
          "line": "556",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SubscribeBundleWithDiscount",
          "context": "    BillingEngineAsync.SubscribeBundleWithDiscount(ServiceAccount.accountId,",
          "line": "576",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "UnsubscribeBundleWithDiscount",
          "context": "    BillingEngineAsync.UnsubscribeBundleWithDiscount(ServiceAccount.accountId,",
          "line": "583",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateSubscription",
          "context": "            SubscriptionId = BillingEngine.CreateSubscription(",
          "line": "598",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ActivateSubscriptionById",
          "context": "            BillingEngineAsync.ActivateSubscriptionById(",
          "line": "607",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "SubscribeBundleWithDiscount",
          "context": "                BillingEngineAsync.SubscribeBundleWithDiscount(UpgradeDslOrder.assignedOrderInfo.customerId,",
          "line": "615",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(ExtraHardwareOrder.assignedOrderInfo.customerId, ExtraHardwareOrder.assignedOrderInfo.serviceAccountId)",
          "line": "623",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SubscribeBundleWithDiscount",
          "context": "            BillingEngine.SubscribeBundleWithDiscount(ExtraHardwareOrder.assignedOrderInfo.customerId, ExtraHardwareOrder.assignedOrderInfo.serviceAccountId, ExistingSubscription.id, SubscribeBundleWithDiscountRequest, ExtraHardwareOrder.dslOrderCompletedOn)",
          "line": "631",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateSubscription",
          "context": "        SubscriptionId = BillingEngine.CreateSubscription(",
          "line": "633",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ActivateSubscriptionById",
          "context": "        BillingEngine.ActivateSubscriptionById(ExtraHardwareOrder.assignedOrderInfo.customerId, ExtraHardwareOrder.assignedOrderInfo.serviceAccountId, SubscriptionId, ExtraHardwareOrder.dslOrderCompletedOn)",
          "line": "639",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SubscribeMonthlyTerminableBundles",
          "context": "    BillingEngine.SubscribeMonthlyTerminableBundles(AccountId, ServiceAccountId, AddedPackages, PackageAddOrder.typeOfServiceId, now)",
          "line": "654",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PackageAddOrder.assignedOrderInfo.customerId, PackageAddOrder.assignedOrderInfo.serviceAccountId)",
          "line": "663",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddTVBundle",
          "context": "    SendgridServiceAsync.AddTVBundle(CustomerInfo, StartDate, AddedBundleNames)",
          "line": "666",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "UnsubscribeMonthlyterminableBundles",
          "context": "    BillingEngine.UnsubscribeMonthlyterminableBundles(AccountId, ServiceAccountId, PackageChanges, PackageDropOrder.typeOfServiceId, now)",
          "line": "672",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CompleteChangePriceForAutoProlongationProcess",
          "context": "    BillingEngineAsync.CompleteChangePriceForAutoProlongationProcess(",
          "line": "682",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(AccountId, ServiceAccountId)",
          "line": "792",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CancelSubscription",
          "context": "        BillingEngineAsync.CancelSubscription(AccountId, ServiceAccountId, Subscription.id)",
          "line": "805",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(StartVoipOrder.assignedOrderInfo.customerId, StartVoipOrder.assignedOrderInfo.serviceAccountId)",
          "line": "814",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CancelSubscription",
          "context": "    BillingEngineAsync.CancelSubscription(AccountId, ServiceAccountId, Subscription.id)",
          "line": "828",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(MoveDslOrder.id)",
          "line": "847",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "864",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendConfirmMovingOrderEmail",
          "context": "    SendgridServiceAsync.SendConfirmMovingOrderEmail(CustomerInfo, MoveDslOrder.shippingAddress.fullAddress, MoveDslOrder.newDelieveryAddress.ToFullAddress(), MoveDslOrder.movingDate, MoveDslOrder.productInformation.oldDslPrice, MoveDslOrder.productInformation.newDslPrice, MoveDslOrder.productInformation.oldDslProduct, MoveDslOrder.productInformation.newDslProduct)",
          "line": "865",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "ProcessMoveOrderCompletion",
          "context": "    BillingEngineAsync.ProcessMoveOrderCompletion(MoveDslOrderCompletionRequest)",
          "line": "873",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/OnEnterAdjustingOrderFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, CreateAdjustingOrderRequest.serviceAccountId)",
          "line": "6",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/ValidateOrders.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "    Subscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "18",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/ValidateOrders.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfo = ProductCatalog.GetCobsExternalBundleInfos().First(b => b.bundleId == MainBundle.id)  //AvailableBundles.First(b => b.id == MainBundle.id) ",
          "line": "236",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/AdjustinOrderFunctionality/ValidateOrders.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateTask",
          "context": "        TaskId = TaskManager.CreateTask(TaskRequest)",
          "line": "11",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BlackListCheckApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(OrderId)",
          "line": "18",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BlackListCheckApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "30",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    let HardwareBundles = ProductCatalog.GetCobsExternalBundleInfos().Where(b => b.productType == CobsProductType.hardware)",
          "line": "109",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSubscriptionProductId",
          "context": "        ProductId = BillingEngine.GetSubscriptionProductId(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "166",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountPropositionIdByServiceAccountId",
          "context": "    PropositionId = BillingEngine.GetServiceAccountPropositionIdByServiceAccountId(ServiceAccountId)",
          "line": "221",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionProductId",
          "context": "        ProductIds ++= BillingEngine.GetSubscriptionProductId(AccountId, ServiceAccountId, DropPackageChange.subscriptionId)",
          "line": "246",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionProductId",
          "context": "    ProductIds ++= BillingEngine.GetSubscriptionProductId(AccountId, ServiceAccountId, StopTvOrder.subscriptionId)",
          "line": "258",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionProductId",
          "context": "    ProductIds ++= BillingEngine.GetSubscriptionProductId(AccountId, ServiceAccountId, StopVoipOrder.subscriptionId)",
          "line": "264",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "286",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "346",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPropositionById",
          "context": "    Proposition = ProductCatalog.GetPropositionById(ServiceAccount.getPropositionId(now))",
          "line": "347",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "374",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetActiveSubscriptionIdsByTypeOfServiceId",
          "context": "    SubscriptionIds = BillingEngine.GetActiveSubscriptionIdsByTypeOfServiceId(AccountId, ServiceAccountId, InternetTypeOfServiceId)",
          "line": "375",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "        DslSubscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "378",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "        CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "390",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetActiveSubscriptionIdsByTypeOfServiceId",
          "context": "    SubscriptionIds = BillingEngine.GetActiveSubscriptionIdsByTypeOfServiceId(AccountId, ServiceAccountId, TvTypeOfServiceId)",
          "line": "417",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "424",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "        TvSubscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "435",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    let ExternalBundles = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "442",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackagesApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(PackageChangeRequest.accountId, PackageChangeRequest.serviceAccountId)",
          "line": "2",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackageSwitching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(AdjustingOrder.id)",
          "line": "123",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/PackageSwitching.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    let CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "59",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(PackageChangeOrder.id)",
          "line": "64",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "84",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(TvPackageSubscriptionTaskCreationRequest)",
          "line": "117",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(ExternalSystemIssueFoundRequest)",
          "line": "127",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "131",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "143",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetTvAccountState",
          "context": "    CobsService.SetTvAccountState(TvProductInstanceNumber, TVStateStatus, TvProductInstanceNumberIsp)",
          "line": "158",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "162",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "173",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetDslState",
          "context": "    CobsService.SetDslState(CobsDslProductInstanceNumber, LineStatus, PageText, TvProductInstanceNumberIsp)",
          "line": "189",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/TvPackageSwitching.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "5",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetVoipSettingsId",
          "context": "    VoipSettingsId = CobsService.GetVoipSettingsId(CobsOrderNumber, PhoneNumber)",
          "line": "21",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "24",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetVoipSettings",
          "context": "    GetSubscriberSettingsResponse = CobsService.GetVoipSettings(CobsVoipProductNumber, CobsOrderNumber, PhoneNumber, VoipSettingsId)",
          "line": "43",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "49",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetVoipSettings",
          "context": "    CobsService.SetVoipSettings(SubscriberSettingsDto, CobsOrderNumber, PhoneNumber)",
          "line": "73",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "76",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetVoipAccountStatus",
          "context": "    GetVoipAccountStatusResponse = CobsService.GetVoipAccountStatus(CobsOrderNumber, PhoneNumber)",
          "line": "91",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "94",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "109",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetVoipAccountStatus",
          "context": "    CobsService.SetVoipAccountStatus(CobsOrderNumber, PhoneNumber, VoipStateStatus,  Voip_refLockedBy)",
          "line": "129",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "134",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPhonebookEntry",
          "context": "    GetPhonebookEntryResponse = CobsService.GetPhonebookEntry(CobsOrderNumber, PhoneNumber)",
          "line": "149",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "154",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetPhonebookEntry",
          "context": "    CobsService.SetPhonebookEntry(PhonebookEntryDto, CobsOrderNumber, PhoneNumber)",
          "line": "169",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(ExternalSystemIssueFoundRequest)",
          "line": "214",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "SetVoipSettings",
          "context": "    CobsService.SetVoipSettings(SubscriberSettingsDto, CobsOrderNumber, PhoneNumber)",
          "line": "229",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "SetVoipSettings",
          "context": "        CobsService.SetVoipSettings(SubscriberSettingsDto, CobsOrderNumber, PhoneNumber)",
          "line": "263",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "SetPhonebookEntry",
          "context": "        CobsService.SetPhonebookEntry(PhonebookEntryDto, CobsOrderNumber, PhoneNumber)",
          "line": "270",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "SetPhonebookEntry",
          "context": "    CobsService.SetPhonebookEntry(PhonebookEntryDto, CobsOrderNumber, PhoneNumber)",
          "line": "276",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/BundleSwitchingFunctionality/VoipManagement.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "CreateTask",
          "context": "    TaskId = TaskManager.CreateTask(FailedOrderOperationTaskCreationRequest)",
          "line": "11",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(FailedOrderOperationTaskCreationRequest)",
          "line": "35",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "CreateTask",
          "context": "    TaskId = TaskManager.CreateTask(DslOrderCompletedInstallationHelpTaskCreationRequest)",
          "line": "46",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "            CustomerInfo = CrmBackend.GetCustomerInfoForEmail(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "92",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendTrackAndTraceEmail",
          "context": "            SendgridServiceAsync.SendTrackAndTraceEmail(CustomerInfo, TrackAndTraceUrls)",
          "line": "93",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "            CustomerInfo = CrmBackend.GetCustomerInfoForEmail(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "107",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendTvPinEmail",
          "context": "            SendgridServiceAsync.SendTvPinEmail(CustomerInfo, CobsTvOrder.pinCode, CobsTvOrder.tvAccountNumber)",
          "line": "108",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "121",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetServiceAccountPropositionIdByServiceAccountId",
          "context": "    PropositionId = BillingEngine.GetServiceAccountPropositionIdByServiceAccountId(ServiceAccountId)",
          "line": "146",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/AdditionalFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(StartTvOrder.id)",
          "line": "27",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(MoveDslOrder.assignedOrderInfo.customerId, MoveDslOrder.assignedOrderInfo.serviceAccountId)",
          "line": "85",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "            CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "98",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendTechDeliveredStatusMovingOrderEmail",
          "context": "            SendgridServiceAsync.SendTechDeliveredStatusMovingOrderEmail(CustomerInfo)",
          "line": "99",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "AppendNewAddressToShippingAddressHistory",
          "context": "                    BillingEngineAsync.AppendNewAddressToShippingAddressHistory(ServiceAccountId, MoveDslOrderInformation.newAddress)",
          "line": "138",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "                SubscriptionsList = BillingEngine.GetSubscriptions(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "245",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "                            ServiceAccount = BillingEngine.GetServiceAccountById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "286",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "                        CobsExternalBundleInfo = ProductCatalog.GetCobsExternalBundleInfos().First(b => b.externalCode == CobsDslOrder.header.productTypeCode)",
          "line": "292",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(StartTvOrder.id)",
          "line": "351",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "378",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "            ServiceAccount = BillingEngine.GetServiceAccountById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "424",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ApplyStatusChange.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextTvOrderStatus",
          "context": "    CobsGetNextTvOrderStatusResponse = CobsService.GetNextTvOrderStatus(CobsGetNextTvOrderStatusRequest)",
          "line": "59",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetNextVoipOrderStatus",
          "context": "    CobsGetNextVoipOrderStatusResponse = CobsService.GetNextVoipOrderStatus(CobsGetNextVoipOrderStatusRequest)",
          "line": "62",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "SubmitVoipOrderAsync",
          "context": "    CobsServiceAsync.SubmitVoipOrderAsync(OrderId, CobsVoipOrder.ToDto())",
          "line": "65",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "GetNextDslOrderStatus",
          "context": "    CobsGetNextDslOrderStatusResponse = CobsService.GetNextDslOrderStatus(LastPolledId)",
          "line": "68",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "SubmitVoipOrderAsync",
          "context": "    CobsServiceAsync.SubmitVoipOrderAsync(OrderId, CobsVoipChangeOrder.ToDto())",
          "line": "72",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "SubmitVoipOrderAsync",
          "context": "    CobsServiceAsync.SubmitVoipOrderAsync(OrderId, CobsVoipMoveOrder.ToDto())",
          "line": "76",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "80",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendInstallationReminder",
          "context": "    SendgridServiceAsync.SendInstallationReminder(CustomerInfo)",
          "line": "82",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "CreateInstallationBookItemsRange",
          "context": "    PlanningstoolServiceAsync.CreateInstallationBookItemsRange(InstallationBookItemStartOn, InstallationBookItemEndOn)",
          "line": "85",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "TryCreatePendingInstallationRequest",
          "context": "    PlanningstoolServiceAsync.TryCreatePendingInstallationRequest(InstallationOrderCreationRequest)",
          "line": "101",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "SubscribeServiceAccountForInstallation1",
          "context": "    PlanningstoolServiceAsync.SubscribeServiceAccountForInstallation1(InstallationOrderCreationRequest)",
          "line": "106",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "RetrieveTvOrder",
          "context": "    CobsRetrieveTvOrderStatusResponse = CobsService.RetrieveTvOrder(CobsRetrieveTvOrderStatusRequest)",
          "line": "115",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "ReservePhoneNumber",
          "context": "    String = CobsService.ReservePhoneNumber(ReservePhoneNumberRequest.ToDto())",
          "line": "134",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "RetrieveVoipOrder",
          "context": "        CobsVoipOrder = CobsService.RetrieveVoipOrder(CobsOrderNumber, ResellerOrderNumber).FromDto()",
          "line": "146",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "CobsGetAssociatedNumbers",
          "context": "    CobsGetAssociatedNumbersResponse = CobsService.CobsGetAssociatedNumbers(CobsGetAssociatedNumbersRequest)",
          "line": "154",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "159",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "164",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "169",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "CancelDslOrder",
          "context": "        CobsCancelDslOrderResponse = CobsService.CancelDslOrder(CobsDslOrder.orderNrBaByXl)",
          "line": "183",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "CancelDslOrder",
          "context": "        CobsCancelDslOrderResponse = CobsService.CancelDslOrder(CobsDslOrder.orderNrBaByXl)",
          "line": "195",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "RetrieveDslOrder",
          "context": "            CobsGetDslOrderResponse = CobsService.RetrieveDslOrder(CobsGetDslOrderRequest)",
          "line": "216",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    let AllCobsExtrernalBundles = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "495",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetProductById",
          "context": "            Product = ProductCatalog.GetProductById(ProductId)",
          "line": "658",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSalesOfficeById",
          "context": "    SalesOffice = ProductCatalog.GetSalesOfficeById(GetAvailablePropositionsRequest.salesOfficeId)",
          "line": "672",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/CobsOrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "        CrmBackend.GetCustomerInfoForEmail(MoveDslOrder.assignedOrderInfo.customerId, MoveDslOrder.assignedOrderInfo.serviceAccountId), //i am sorry ((",
          "line": "51",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/InstallationOrderFormulas.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "33",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    let Subscriptions = BillingEngine.GetSubscriptions(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId)",
          "line": "51",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "188",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    let Subscriptions = BillingEngine.GetSubscriptions(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId)",
          "line": "206",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(Flow.assignedOrderInfo.customerId)",
          "line": "245",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(CustomerAccount.id, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "246",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "250",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "296",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(Flow.assignedOrderInfo.customerId)",
          "line": "301",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(CustomerAccount.id, Flow.assignedOrderInfo.serviceAccountId)",
          "line": "302",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(MoveDslOrder.assignedOrderInfo.customerId)",
          "line": "322",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "332",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/DslOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "10",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/TvOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "48",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/TvOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "107",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/TvOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "129",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/TvOrderGeneration.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "4",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/VoipOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(Flow.assignedOrderInfo.customerId)",
          "line": "12",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/VoipOrderGeneration.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    let GeneratedOrderPart = IdGenerator.GetNextAvailableId(TypeOfId.CobsOrder)",
          "line": "46",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderGeneration/VoipOrderGeneration.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "SubmitDslOrderAsync",
          "context": "    CobsServiceAsync.SubmitDslOrderAsync(OrderId, CobsDslSubmitOrderRequest)",
          "line": "78",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderSubmition/DslOrderSubmition.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "SubmitTvOrderAsync",
          "context": "    CobsServiceAsync.SubmitTvOrderAsync(OrderId, CobsSubmitTvOrderRequest)",
          "line": "31",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderSubmition/TvOrderSubmition.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "SubmitTvOrderAsync",
          "context": "    CobsServiceAsync.SubmitTvOrderAsync(OrderId, CobsSubmitTvOrderRequest)",
          "line": "50",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderSubmition/TvOrderSubmition.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "SubmitVoipOrderAsync",
          "context": "    CobsServiceAsync.SubmitVoipOrderAsync(OrderId, CobsVoipOrderDto)",
          "line": "48",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderSubmition/VoipOrderSubmition.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "SubmitVoipOrderAsync",
          "context": "    CobsServiceAsync.SubmitVoipOrderAsync(OrderId, CobsVoipOrderDto)",
          "line": "59",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderSubmition/VoipOrderSubmition.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "SubmitVoipOrderAsync",
          "context": "    CobsServiceAsync.SubmitVoipOrderAsync(OrderId, CobsVoipOrderDto)",
          "line": "76",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/OrderSubmition/VoipOrderSubmition.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "GetSubscriptionsByStatus",
          "context": "    CurrentSubscriptionList = BillingEngine.GetSubscriptionsByStatus(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId, SubscriptionStatus.Active, Order.startWishDate)",
          "line": "8",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CobsFunctionality/ProlongationProcessing.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "IdentifyServiceAccount",
          "context": "    BillingEngineAsync.IdentifyServiceAccount(ContractTerminationRequestMessage.ToServiceAccountIdentificationRequest())",
          "line": "16",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "SendContractTerminationRequestAnswer",
          "context": "    OverstappenService.SendContractTerminationRequestAnswer(ContractTerminationRequestAnswerMessage)",
          "line": "128",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendContractTerminationRequestAnswer",
          "context": "    OverstappenService.SendContractTerminationRequestAnswer(ContractTerminationRequestAnswerMessage)",
          "line": "137",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendContractTerminationChangeRequestAnswer",
          "context": "    OverstappenService.SendContractTerminationChangeRequestAnswer(ChangeAnswerMessage)",
          "line": "146",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "GetServiceAccountByServiceAccountId",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountByServiceAccountId(ServiceAccountId)",
          "line": "312",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(CoinIncorrectRequestTaskCreationRequest)",
          "line": "398",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(CoinRequestWishDateDoesntMatchTaskCreationRequest)",
          "line": "414",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenDonorApi.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "SendContractTerminationRequest",
          "context": "    OverstappenService.SendContractTerminationRequest(ContractTerminationRequestMessage)",
          "line": "43",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendCurrentProviderInfoRequest",
          "context": "        SendgridServiceAsync.SendCurrentProviderInfoRequest(CustomerInfo)",
          "line": "109",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendOverstapServiceCanceled",
          "context": "        SendgridServiceAsync.SendOverstapServiceCanceled(CustomerInfoCollection)",
          "line": "124",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendContractTerminationPerformedRequest",
          "context": "    OverstappenService.SendContractTerminationPerformedRequest(ContractTerminationPerformedMessage)",
          "line": "145",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendChangeContractTerminationRequest",
          "context": "    OverstappenService.SendChangeContractTerminationRequest(ChangeMessage)",
          "line": "187",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendCancelContractTerminationRequest",
          "context": "        OverstappenService.SendCancelContractTerminationRequest(CancelMessage)",
          "line": "247",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(OverstappenProcessBlockedTaskCreationRequest)",
          "line": "321",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "   TaskManagerAsync.CreateTaskAsync(OverstappenErrorFoundTaskCreationRequest)",
          "line": "345",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "SendChangeContractTerminationRequest",
          "context": "    OverstappenService.SendChangeContractTerminationRequest(ChangeMessage)",
          "line": "458",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendCancelContractTerminationRequest",
          "context": "    OverstappenService.SendCancelContractTerminationRequest(CancelMessage)",
          "line": "466",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendContractTerminationRequest",
          "context": "    OverstappenService.SendContractTerminationRequest(ContractTerminationRequestMessage)",
          "line": "494",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "SendContractTerminationPerformedRequest",
          "context": "    OverstappenService.SendContractTerminationPerformedRequest(ContractTerminationPerformedMessage)",
          "line": "501",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenRecipientApi.bs",
          "serviceName": "OverstappenService"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    MessageId = IdGenerator.GetNextAvailableId(TypeOfId.OverstappenMessage)",
          "line": "3",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/OverstappenSharedApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "CreateMultipleTasks",
          "context": "        TaskManager.CreateMultipleTasks(BaseTaskCreationRequests)",
          "line": "33",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/Schedulers.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "SendOverstapServiceCanceled",
          "context": "        SendgridServiceAsync.SendOverstapServiceCanceled(CustomerInfoCollection)",
          "line": "70",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CoinFunctionality/Schedulers.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerCreditScore",
          "context": "    CustomerCreditCheckResponse = CreditCheckService.GetCustomerCreditScore(CreditCheckCustomerDto)",
          "line": "2",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CreditCheckOrderApi.bs",
          "serviceName": "CreditCheckService"
        },
        {
          "methodName": "CreateTask",
          "context": "        TaskId = TaskManager.CreateTask(TaskRequest)",
          "line": "29",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CreditCheckOrderApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "39",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CreditCheckOrderApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCustomerCreditScoreAsync",
          "context": "    CreditCheckServiceAsync.GetCustomerCreditScoreAsync(OrderId, CreditCheckCustomerDto)",
          "line": "42",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/CreditCheckOrderApi.bs",
          "serviceName": "CreditCheckServiceAsync"
        },
        {
          "methodName": "PostCodeCheckV9ForOrderAsync",
          "context": "                CobsServiceAsync.PostCodeCheckV9ForOrderAsync(OrderId, PostCodeCheckRequest)",
          "line": "9",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/DeepCheckFunctionality/Schedulers.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "        PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "65",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/DeepCheckFunctionality/Schedulers.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "2",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentApi.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetGateway",
          "context": "    GatewayDto = PlugwiseService.GetGateway(ExternalId)",
          "line": "15",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentApi.bs",
          "serviceName": "PlugwiseService"
        },
        {
          "methodName": "ActivateServiceAccount",
          "context": "                    BillingEngine.ActivateServiceAccount(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId, CurrentDateTime)",
          "line": "44",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ActivateServiceAccount",
          "context": "                    BillingEngine.ActivateServiceAccount(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId, CurrentDateTime)",
          "line": "50",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Flow.id)",
          "line": "144",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Flow.id)",
          "line": "181",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Flow.id)",
          "line": "202",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Flow.id)",
          "line": "240",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "262",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "AddNewAddressToShippingAddressHistory",
          "context": "    BillingEngineAsync.AddNewAddressToShippingAddressHistory(ServiceAccountId, ServiceAccountCobsDataWithTvInfoDto.address, DslProductsHistory.validFrom, DslProductsHistory.validTo)",
          "line": "273",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountById(TriplePlayServiceAccountCobsData.accountId, ServiceAccountId)",
          "line": "276",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "314",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateNewServiceContractAsync",
          "context": "    FulfillmentAsync.CreateNewServiceContractAsync(TriplePlayOrder.id)",
          "line": "327",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "329",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateChangePriceForAutoProlongationRequest",
          "context": "        BillingEngineAsync.CreateChangePriceForAutoProlongationRequest(ServiceAccountId, PropositionId, CreatedBy)",
          "line": "348",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateChangePriceForAllActiveAutoProlongationRequest",
          "context": "    BillingEngineAsync.CreateChangePriceForAllActiveAutoProlongationRequest(PropositionId, CreatedBy)",
          "line": "355",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FulfillmentAsyncApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "InitiateNewAnnaOrder",
          "context": "    FutureConnectionsOrderResponseDto = FutureConnectionsService.InitiateNewAnnaOrder(FutureConnectionsInitiateOrderRequest)",
          "line": "7",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FutureConnectionsFunctionality/FutureConnectionsApi.bs",
          "serviceName": "FutureConnectionsService"
        },
        {
          "methodName": "UpdateExistingAnnaOrder",
          "context": "    FutureConnectionsOrderResponseDto = FutureConnectionsService.UpdateExistingAnnaOrder(FutureConnectionsUpdateOrderRequest)",
          "line": "13",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FutureConnectionsFunctionality/FutureConnectionsApi.bs",
          "serviceName": "FutureConnectionsService"
        },
        {
          "methodName": "CancelExistingAnnaOrder",
          "context": "    FutureConnectionsOrderResponseDto = FutureConnectionsService.CancelExistingAnnaOrder(FutureConnectionsCancelOrderRequest)",
          "line": "19",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FutureConnectionsFunctionality/FutureConnectionsApi.bs",
          "serviceName": "FutureConnectionsService"
        },
        {
          "methodName": "InitiateNewTriplePlayOrder",
          "context": "    FutureConnectionsOrderResponseDto = FutureConnectionsService.InitiateNewTriplePlayOrder(FutureConnectionsInitiateOrderRequest)",
          "line": "29",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FutureConnectionsFunctionality/FutureConnectionsApi.bs",
          "serviceName": "FutureConnectionsService"
        },
        {
          "methodName": "UpdateExistingTriplePlayOrder",
          "context": "    FutureConnectionsOrderResponseDto = FutureConnectionsService.UpdateExistingTriplePlayOrder(FutureConnectionsUpdateOrderRequest)",
          "line": "35",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FutureConnectionsFunctionality/FutureConnectionsApi.bs",
          "serviceName": "FutureConnectionsService"
        },
        {
          "methodName": "CancelExistingTriplePlayOrder",
          "context": "    FutureConnectionsOrderResponseDto = FutureConnectionsService.CancelExistingTriplePlayOrder(FutureConnectionsCancelOrderRequest)",
          "line": "41",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/FutureConnectionsFunctionality/FutureConnectionsApi.bs",
          "serviceName": "FutureConnectionsService"
        },
        {
          "methodName": "CreateTask",
          "context": "    TaskId = TaskManager.CreateTask(FailedOrderOperationTaskCreationRequest)",
          "line": "11",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/Helpers/TaskCreationFunctionality.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "SendServiceAccountsPaidNotification",
          "context": "    MendixNotificationServiceAsync.SendServiceAccountsPaidNotification(ServiceAccountId)",
          "line": "3",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MendixFunctionality/MendixApi.bs",
          "serviceName": "MendixNotificationServiceAsync"
        },
        {
          "methodName": "GetProductInstanceDetailsByProductInstanceNumber",
          "context": "            CobsMigrationServiceAsync.GetProductInstanceDetailsByProductInstanceNumber(TriplePlayServiceAccountCobsData.serviceAccountId, DslProductsHistory.dslProductInstanceNumber)",
          "line": "4",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApi.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "GetProductInstanceDetailsByProductInstanceNumber",
          "context": "        CobsMigrationServiceAsync.GetProductInstanceDetailsByProductInstanceNumber(TriplePlayServiceAccountCobsData.serviceAccountId, DslProductsHistory.dslProductInstanceNumber)",
          "line": "9",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApi.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "RetrieveProductInstancesCobsStatus",
          "context": "            CobsMigrationServiceAsync.RetrieveProductInstancesCobsStatus(RetrieveProductInstancesCobsStatusRequest)",
          "line": "36",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApi.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "RetrieveProductInstancesCobsStatus",
          "context": "        CobsMigrationServiceAsync.RetrieveProductInstancesCobsStatus(RetrieveProductInstancesCobsStatusRequest)",
          "line": "48",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApi.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "AppendNewAddressToShippingAddressHistoryWithDates",
          "context": "            BillingEngineAsync.AppendNewAddressToShippingAddressHistoryWithDates(ServiceAccountId, Address, StartOn, EndOn)",
          "line": "81",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MigrateSapServiceContractResponseHandler",
          "context": "        ApiGatewayMigrationApiAsync.MigrateSapServiceContractResponseHandler(AccountId, ServiceAccountId)",
          "line": "6",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "12",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetServiceContract",
          "context": "    BillingEngineAsync.SetServiceContract(ServiceContractId, AccountId, ServiceAccountId, SubscriptionIds)",
          "line": "42",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MigrateSapServiceContractResponseHandler",
          "context": "    ApiGatewayMigrationApiAsync.MigrateSapServiceContractResponseHandler(AccountId, ServiceAccountId)",
          "line": "44",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "ApiGatewayMigrationApiAsync"
        },
        {
          "methodName": "GetCustomerCodeIspByTvProductInstanceNumber",
          "context": "        CobsMigrationServiceAsync.GetCustomerCodeIspByTvProductInstanceNumber(TriplePlayServiceAccountCobsData.ToGetCustomerCodeIspForTvInstanceMigrationRequest())",
          "line": "53",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "GetCustomerCodeIspByTvProductInstanceNumber",
          "context": "    CobsMigrationServiceAsync.GetCustomerCodeIspByTvProductInstanceNumber(TriplePlayServiceAccountCobsData.ToGetCustomerCodeIspForTvInstanceMigrationRequest())",
          "line": "57",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "CreateTriplePlayServiceAccountCobsDataFromFile",
          "context": "    CobsMigrationServiceAsync.CreateTriplePlayServiceAccountCobsDataFromFile(FullFilePath)",
          "line": "65",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "MigrateSpecificTriplePlayServiceAccountCobsDataFromFile",
          "context": "    CobsMigrationServiceAsync.MigrateSpecificTriplePlayServiceAccountCobsDataFromFile(FullFilePath)",
          "line": "68",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "SetDslPinFromFile",
          "context": "    CobsMigrationServiceAsync.SetDslPinFromFile(FullFilePath)",
          "line": "71",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "SetTvPinFromFile",
          "context": "    CobsMigrationServiceAsync.SetTvPinFromFile(FullFilePath)",
          "line": "74",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "SetVoipPinFromFile",
          "context": "    CobsMigrationServiceAsync.SetVoipPinFromFile(FullFilePath)",
          "line": "77",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/MigrationApiAsync.bs",
          "serviceName": "CobsMigrationServiceAsync"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "    CobsExternalBundleInfos = ProductCatalog.GetCobsExternalBundleInfos()",
          "line": "22",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/NleNlApi/Helpers.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(Offer.accountId, Offer.serviceAccountId)",
          "line": "64",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/NleNlApi/NleNlApiFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(Offer.accountId)",
          "line": "65",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/NleNlApi/NleNlApiFunctionality.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "70",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/NleNlApi/NleNlApiFunctionality.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "    PostCodeCheckResultDto = CobsService.PostCodeCheck(PostCodeCheckRequest)",
          "line": "111",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/NleNlApi/NleNlApiFunctionality.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "EnsurePropositionIsAvailableForProlongation",
          "context": "    BillingEngine.EnsurePropositionIsAvailableForProlongation(CreateOfferRequest.propositionId, CreateOfferRequest.serviceAccountId)",
          "line": "25",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OfferFunctionality/OfferCrud.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "AcknowledgeOffersGeneration",
          "context": "        BillingEngineAsync.AcknowledgeOffersGeneration(OfferGenerationResults)",
          "line": "58",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OfferFunctionality/OfferCrud.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ExpireOfferLink",
          "context": "    BillingEngineAsync.ExpireOfferLink(Offer.serviceAccountId)",
          "line": "110",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OfferFunctionality/OfferCrud.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CheckIsBundlePresentInProposition",
          "context": "    !IsEmpty(PropositionId) && ProductCatalog.CheckIsBundlePresentInProposition(PropositionId, OrderFilterDto.stringCriteria)",
          "line": "44",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OnHoldFunctionality.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSalesOfficeById",
          "context": "            SalesOffice = ProductCatalog.GetSalesOfficeById(OrderFilterDto.stringCriteria)",
          "line": "69",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OnHoldFunctionality.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    SettingId = IdGenerator.GetNextAvailableId(TypeOfId.OnHoldSettingId)",
          "line": "104",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OnHoldFunctionality.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "MoveToOnHoldOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToOnHoldOrderStateAsync(Order.id, false)",
          "line": "140",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OnHoldFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToOnHoldOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToOnHoldOrderStateAsync(Order.id, true)",
          "line": "188",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OnHoldFunctionality.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.OrderId)",
          "line": "178",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    OrderId = IdGenerator.GetNextAvailableId(TypeOfId.OrderId)",
          "line": "199",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "        CustomerAccount = CrmBackend.GetCustomerAccountById(Offer.accountId)",
          "line": "215",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetActiveBundleIds",
          "context": "            BundleIds = BillingEngine.GetActiveBundleIds(Offer.serviceAccountId)",
          "line": "219",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(Order.assignedOrderInfo.customerId, ServiceAccount.id)",
          "line": "242",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetFilteredTaskList",
          "context": "    TaskList = TaskManager.GetFilteredTaskList(TaskFilterList)",
          "line": "287",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "AddCustomerAccountEmail",
          "context": "    CrmBackend.AddCustomerAccountEmail(AccountId, Order.customer.contactInfo.email, true)",
          "line": "293",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddMemberIbanToCustomerAccount",
          "context": "    CrmBackend.AddMemberIbanToCustomerAccount(AccountId, Order.mandate.memberIban)",
          "line": "294",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "CreateMyNleAccount",
          "context": "    AccountId = CrmBackend.CreateMyNleAccount(Order.ToCreateCustomerAccountRequest())",
          "line": "300",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "371",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetTaskListByTaskIdList",
          "context": "    TaskList = TaskManager.GetTaskListByTaskIdList(TaskIdList)",
          "line": "404",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "PutTaskInProgressBySystem",
          "context": "            TaskManager.PutTaskInProgressBySystem(BaseTask.id)",
          "line": "409",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CloseTaskBySystem",
          "context": "            TaskManager.CloseTaskBySystem(BaseTask.id, RelatedTaskIdList)",
          "line": "411",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "MakeTaskClosable",
          "context": "        TaskManagerAsync.MakeTaskClosable(TaskId)",
          "line": "425",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "GetPropositionById",
          "context": "    Proposition = ProductCatalog.GetPropositionById(PropositionId)",
          "line": "470",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CobsCancelDslOrder",
          "context": "            FulfillmentAsync.CobsCancelDslOrder(OrderId)",
          "line": "547",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "602",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    let ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "626",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "UnsubscribeBundleWithDiscount",
          "context": "        BillingEngine.UnsubscribeBundleWithDiscount(AccountId, ServiceAccountId, Subscription.id, SubscribedBundle.id, now, \"\")",
          "line": "632",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SubscribeBundleWithDiscount",
          "context": "        BillingEngine.SubscribeBundleWithDiscount(AccountId, ServiceAccountId, Subscription.id, SubscribeBundleWithDiscountRequest, now)",
          "line": "638",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "643",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddVoipBundles",
          "context": "    SendgridServiceAsync.AddVoipBundles(CustomerInfo, today, AddedBundleNames)",
          "line": "644",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "752",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCobsExternalBundleInfos",
          "context": "        CobsExternalBundleInfo = ProductCatalog.GetCobsExternalBundleInfos().First(b => b.bundleId == MainBundle.id) //AvailableBundles.First(cexb => cexb.id == MainBundle.id)",
          "line": "773",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "829",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetPropositionById",
          "context": "    Proposition = ProductCatalog.GetPropositionById(Proposition.id)",
          "line": "854",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllSalesOffices",
          "context": "    SalesOfficeList = ProductCatalog.GetAllSalesOffices()",
          "line": "915",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CheckPropositionAvaliableForSalesOffice",
          "context": "        IfPropositionExistsForSalesOffice = ProductCatalog.CheckPropositionAvaliableForSalesOffice(SalesOffice.salesOfficeId, AdjustingOrder.propositionId)",
          "line": "917",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetTypeOfServiceIdBySubscriptionId",
          "context": "    TypeOfServiceId = BillingEngine.GetTypeOfServiceIdBySubscriptionId(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "928",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(Offer.accountId)",
          "line": "945",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(Offer.accountId, Offer.serviceAccountId)",
          "line": "946",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetMandate",
          "context": "        Mandate = BankComponent.GetMandate(ServiceAccount.id)",
          "line": "954",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetProlongationContractStartOn",
          "context": "    StartOn = BillingEngine.GetProlongationContractStartOn(ServiceAccount.accountId, ServiceAccount.id, ExpectedOrderCompletionOn)",
          "line": "957",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.OrderId),",
          "line": "959",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetSalesOfficeName",
          "context": "        SalesOfficeName = ProductCatalog.GetSalesOfficeName(Order.salesOfficeId)",
          "line": "1157",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderApi.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "CancelServiceAccount",
          "context": "    BillingEngine.CancelServiceAccount(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId, CancellationCosts)",
          "line": "9",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderCancellationFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "OnManualProlongationProcessEnded",
          "context": "    BillingEngineAsync.OnManualProlongationProcessEnded(Order.assignedOrderInfo.serviceAccountId)",
          "line": "19",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderCancellationFunctionality.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CancelSubscriptions",
          "context": "    BillingEngine.CancelSubscriptions(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId, Order.assignedOrderInfo.subscriptionIdList)",
          "line": "25",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderCancellationFunctionality.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "TryCancelInstallationOrder",
          "context": "    PlanningstoolServiceAsync.TryCancelInstallationOrder(EntityId)",
          "line": "128",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderCancellationFunctionality.bs",
          "serviceName": "PlanningstoolServiceAsync"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(DslOrderHangingTaskCreationRequest)",
          "line": "9",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/CeaseDsl.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(IncorrectCobsCeaseTaskCreationRequest)",
          "line": "69",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/CeaseDsl.bs",
          "serviceName": "TaskManagerAsync"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "        Subscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "50",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/UpdateOrderInfo.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateSubscription",
          "context": "        SubscriptionId = BillingEngine.CreateSubscription(AccountId, ServiceAccountId, CreateSubscriptionRequest, StartOn) // what to take instead of StartOn ? i can look for it but what if it is a new thing like TV ? Order.startOn",
          "line": "56",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/UpdateOrderInfo.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "        Subscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "57",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/UpdateOrderInfo.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "        Subscription = BillingEngine.GetSubscriptionById(AccountId, ServiceAccountId, SubscriptionId)",
          "line": "65",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/UpdateOrderInfo.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "StopSubscription",
          "context": "        BillingEngine.StopSubscription(AccountId, ServiceAccountId, SubscriptionId, EndOn)",
          "line": "67",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderFunctionality/UpdateOrderInfo.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CheckPropositionAvaliableForSalesOffice",
          "context": "    IfPropositionExistsForSalesOffice = ProductCatalog.CheckPropositionAvaliableForSalesOffice(Order.salesOfficeId, Proposition.id)",
          "line": "33",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderPropositionVendorCheck.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "12",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "22",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "OnManualProlongationProcessStarted",
          "context": "    BillingEngineAsync.OnManualProlongationProcessStarted(ProlongationTriplePlayOrder.assignedOrderInfo.serviceAccountId)",
          "line": "33",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(ProlongationTriplePlayOrder.id)",
          "line": "34",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "PostCodeCheckV9ForOrderAsync",
          "context": "    CobsServiceAsync.PostCodeCheckV9ForOrderAsync(TriplePlayOrder.id, TriplePlayOrder.shippingAddress.ToPostCodeCheckRequest(PqccCheckType.Coverage))",
          "line": "39",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "CreateServiceAccountWithSubscriptionsAsync",
          "context": "    BillingEngineAsync.CreateServiceAccountWithSubscriptionsAsync(CreateServiceAccountWithSubscriptionsAsyncRequest)",
          "line": "49",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    Subscription = BillingEngine.GetSubscriptions(TriplePlayOrder.assignedOrderInfo.customerId, TriplePlayOrder.assignedOrderInfo.serviceAccountId).First(x => x.GetTypeOfServiceId() == InternetTypeOfServiceId)",
          "line": "79",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "86",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "PostCodeCheckV9ForOrderAsync",
          "context": "    CobsServiceAsync.PostCodeCheckV9ForOrderAsync(TriplePlayOrder.id, PostCodeCheckRequest)",
          "line": "105",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CobsServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "106",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(ProlongationTriplePlayOrder.id)",
          "line": "138",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "149",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "FindCustomersMatchingOrder",
          "context": "        CustomerAccountMatches = CrmBackend.FindCustomersMatchingOrder(Order)",
          "line": "155",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "        CustomerAccount = CrmBackend.GetCustomerAccountById(Offer.accountId)",
          "line": "170",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "193",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CheckCustomerInBlackListAsync",
          "context": "    BlackListServiceAsync.CheckCustomerInBlackListAsync(AccountId, Order.id)",
          "line": "209",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BlackListServiceAsync"
        },
        {
          "methodName": "CreateTask",
          "context": "        TaskId = TaskManager.CreateTask(TaskRequest)",
          "line": "224",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "230",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateTask",
          "context": "        TaskId = TaskManager.CreateTask(TaskRequest)",
          "line": "247",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "253",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetServiceAccountByAddress",
          "context": "    ActiveSupplyDetails = BillingEngine.GetServiceAccountByAddress(Order.shippingAddress.fullAddress, Order.serviceCategoryId)",
          "line": "257",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId)",
          "line": "282",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "286",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "289",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "292",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SendActiveSupplyCheckEmail",
          "context": "        SendgridServiceAsync.SendActiveSupplyCheckEmail(CustomerInfo, \"A\")",
          "line": "296",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendActiveSupplyCheckEmail",
          "context": "        SendgridServiceAsync.SendActiveSupplyCheckEmail(CustomerInfo, \"B\")",
          "line": "300",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "CreateTask",
          "context": "        TaskId = TaskManager.CreateTask(TaskRequest)",
          "line": "315",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "SendActiveSupplyCheckEmail",
          "context": "        SendgridServiceAsync.SendActiveSupplyCheckEmail(CustomerInfo, \"E\")",
          "line": "325",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendActiveSupplyCheckEmail",
          "context": "        SendgridServiceAsync.SendActiveSupplyCheckEmail(CustomerInfo, \"F\")",
          "line": "329",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetServiceAccounts",
          "context": "        ServiceAccountsList = BillingEngine.GetServiceAccounts(ProlongationTriplePlayOrder.assignedOrderInfo.customerId).Where(sa => sa.serviceCategoryId == TriplePlayServiceCategoryId)",
          "line": "334",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "            FulfillmentAsync.MoveToNextRegularOrderStateAsync(ProlongationTriplePlayOrder.id)",
          "line": "342",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountById(Offer.accountId, Offer.serviceAccountId)",
          "line": "346",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToNextRegularOrderStateAsync(ProlongationTriplePlayOrder.id)",
          "line": "349",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "361",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "        CustomerInfo = CrmBackend.GetCustomerInfoForEmail(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId)",
          "line": "379",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendCancelOrder",
          "context": "            SendgridServiceAsync.SendCancelOrder(CustomerInfo)",
          "line": "381",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendCancelProlongation",
          "context": "            SendgridServiceAsync.SendCancelProlongation(CustomerInfo)",
          "line": "383",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "419",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "428",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateSubscription",
          "context": "        SubscriptionId = BillingEngine.CreateSubscription(Order.assignedOrderInfo.customerId, Order.assignedOrderInfo.serviceAccountId, CreateSubscriptionRequest, Order.startOn)",
          "line": "436",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreateOrderContract",
          "context": "    DocumentPrinterComponent.CreateOrderContract(Order)",
          "line": "442",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "DocumentPrinterComponent"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "444",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateOrderContract",
          "context": "    DocumentPrinterComponent.CreateOrderContract(TriplePlayOrder)",
          "line": "449",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "DocumentPrinterComponent"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "454",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "CreateInitialVirtualBalanceRecordsForServiceAccount",
          "context": "    BillingEngine.CreateInitialVirtualBalanceRecordsForServiceAccount(Order.assignedOrderInfo.customerId,Order.assignedOrderInfo.serviceAccountId,Order.riskLevel, now)",
          "line": "466",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CobsCancelDslOrder",
          "context": "        FulfillmentAsync.CobsCancelDslOrder(TriplePlayOrder.id)",
          "line": "480",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "ResendInitialInvoiceReminderByServiceAccountId",
          "context": "    InvoiceGeneratorAsync.ResendInitialInvoiceReminderByServiceAccountId(TriplePlayOrder.assignedOrderInfo.serviceAccountId)",
          "line": "483",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "ResendInitialInvoiceReminderByServiceAccountId",
          "context": "    InvoiceGeneratorAsync.ResendInitialInvoiceReminderByServiceAccountId(AnnaOrder.assignedOrderInfo.serviceAccountId)",
          "line": "496",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "ResendInitialInvoiceReminderByServiceAccountId",
          "context": "    InvoiceGeneratorAsync.ResendInitialInvoiceReminderByServiceAccountId(HollandWarmteOrder.assignedOrderInfo.serviceAccountId)",
          "line": "503",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "PutTaskInProgressBySystem",
          "context": "    TaskManager.PutTaskInProgressBySystem(NoFirstPaymentReceivedOrderState.relatedTaskId)",
          "line": "514",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CloseTaskBySystem",
          "context": "            TaskManager.CloseTaskBySystem(ReminderSentOrderState.relatedTaskId, new RelatedTaskIdList())",
          "line": "523",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(TriplePlayOrder.assignedOrderInfo.customerId)",
          "line": "530",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "535",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(ProlongationTriplePlayOrder.id)",
          "line": "541",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetSubscriptions",
          "context": "    SubscriptionsList = BillingEngine.GetSubscriptions(TriplePlayOrder.assignedOrderInfo.customerId, TriplePlayOrder.assignedOrderInfo.serviceAccountId)",
          "line": "550",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ActivateServiceAccount",
          "context": "    BillingEngineAsync.ActivateServiceAccount(TriplePlayOrder.assignedOrderInfo.customerId, TriplePlayOrder.assignedOrderInfo.serviceAccountId, CobsDslOrder.currentStatus.statusDateField)",
          "line": "557",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(TriplePlayOrder.assignedOrderInfo.customerId, TriplePlayOrder.assignedOrderInfo.serviceAccountId)",
          "line": "559",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(TriplePlayOrder.assignedOrderInfo.customerId, TriplePlayOrder.assignedOrderInfo.serviceAccountId)",
          "line": "560",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SendTripplePlayOnAirMessage",
          "context": "    SendgridServiceAsync.SendTripplePlayOnAirMessage(CustomerInfo, ServiceAccount.startOn, ServiceAccount.endOn, Proposition.contractDuration, ProductsString, ServiceAccount.billDay)",
          "line": "587",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "SendNewPhoneNumberIsActive",
          "context": "        CrmBackend.SendNewPhoneNumberIsActive(TriplePlayOrder.assignedOrderInfo.customerId, today, TriplePlayOrder.assignedOrderInfo.serviceAccountId, TriplePlayServiceAccountCobsData.voipData.voipTelephoneNumber)",
          "line": "593",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "ProlongateServiceAccount",
          "context": "    BillingEngineAsync.ProlongateServiceAccount",
          "line": "601",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ActivateServiceAccount",
          "context": "    BillingEngine.ActivateServiceAccount(AnnaOrder.assignedOrderInfo.customerId, AnnaOrder.assignedOrderInfo.serviceAccountId, now)",
          "line": "617",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "    FulfillmentAsync.MoveToNextRegularOrderStateAsync(TriplePlayOrder.id)",
          "line": "626",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/OnEnterOrderState.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "IsInitialInvoicePaid",
          "context": "        if InvoiceGenerator.IsInitialInvoicePaid(Order.assignedOrderInfo.serviceAccountId)",
          "line": "24",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "ResendCobsOrderAfterFirstPaymentCheckBlock",
          "context": "                FulfillmentAsync.ResendCobsOrderAfterFirstPaymentCheckBlock(Order.id)",
          "line": "26",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "MoveToNextRegularOrderStateAsync",
          "context": "                FulfillmentAsync.MoveToNextRegularOrderStateAsync(Order.id)",
          "line": "28",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "IsInitialInvoicePaid",
          "context": "        if InvoiceGenerator.IsInitialInvoicePaid(Order.assignedOrderInfo.serviceAccountId)",
          "line": "36",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "SendServiceAccountsPaidNotification",
          "context": "            FulfillmentAsync.SendServiceAccountsPaidNotification(Order.assignedOrderInfo.serviceAccountId)",
          "line": "38",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "IsInitialInvoicePaid",
          "context": "        if not IsEmpty(ReminderSentOrderState) and InvoiceGenerator.IsInitialInvoicePaid(Order.assignedOrderInfo.serviceAccountId)",
          "line": "65",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetServiceAccountShippingAddress",
          "context": "    Address = BillingEngine.GetServiceAccountShippingAddress(Flow.assignedOrderInfo.serviceAccountId)",
          "line": "71",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "            PostCodeCheckResultDto = CobsService.PostCodeCheck(Address.ToPostCodeCheckRequest(PqccCheckType.Copper))",
          "line": "77",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "            PostCodeCheckResultDto = CobsService.PostCodeCheck(Address.ToPostCodeCheckRequest(PqccCheckType.Fiber))",
          "line": "79",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "PostCodeCheck",
          "context": "        PostCodeCheckResultDto = CobsService.PostCodeCheck(Address.ToPostCodeCheckRequest(PqccCheckType))",
          "line": "81",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderStateFunctionality/Schedulers.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "GetSalesOfficeById",
          "context": "        SalesOffice = ProductCatalog.GetSalesOfficeById(CreateOrderRequest.salesOfficeId)",
          "line": "47",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/OrderValidations/PropositionFieldsValidations.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetAllSalesOffices",
          "context": "    SalesOfficeList = ProductCatalog.GetAllSalesOffices()",
          "line": "137",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ProductCatalog.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "    NewSubscription = BillingEngine.GetSubscriptionById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId, TriplePlayCobsIdsMap.dslSubscriptionId)",
          "line": "54",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ResendToCobs.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "    TvSubscription = BillingEngine.GetSubscriptionById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId, TriplePlayCobsIdsMap.tvSubscriptionId)",
          "line": "76",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ResendToCobs.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "    NewSubscription = BillingEngine.GetSubscriptionById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId, TriplePlayCobsIdsMap.tvSubscriptionId)",
          "line": "91",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ResendToCobs.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "    OldSubscription = BillingEngine.GetSubscriptionById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId, SubscriptionId)",
          "line": "98",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ResendToCobs.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetSubscriptionById",
          "context": "    VoipSubscription = BillingEngine.GetSubscriptionById(Flow.assignedOrderInfo.customerId, Flow.assignedOrderInfo.serviceAccountId, TriplePlayCobsIdsMap.voipSubscriptionId)",
          "line": "119",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ResendToCobs.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    ServiceContractId = IdGenerator.GetNextAvailableId(TypeOfId.ServiceContractId)",
          "line": "3",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "CreateNewServiceContract",
          "context": "    FulfillmentAsync.CreateNewServiceContract(OrderId, ServiceContractId)",
          "line": "4",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "10",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetServiceContract",
          "context": "    BillingEngineAsync.SetServiceContract(ServiceContractId, AccountId, ServiceAccountId, Order.assignedOrderInfo.subscriptionIdList)",
          "line": "57",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountById(ServiceContract.customerId, ServiceContract.serviceAccountId)",
          "line": "73",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountsForServiceContractsUpdate",
          "context": "    BillingEngineServiceContractApiAsync.GetServiceAccountsForServiceContractsUpdate(GetServiceAccountsForServiceContractUpdateRequest)",
          "line": "138",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngineServiceContractApiAsync"
        },
        {
          "methodName": "GetServiceAccountsForServiceContractsCreation",
          "context": "    BillingEngineServiceContractApiAsync.GetServiceAccountsForServiceContractsCreation(GetServiceAccountsForServiceContractCreationRequest)",
          "line": "150",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngineServiceContractApiAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        ServiceContractId = IdGenerator.GetNextAvailableId(TypeOfId.ServiceContractId)",
          "line": "166",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetServiceAccountsForServiceContracts",
          "context": "    BillingEngineServiceContractApiAsync.GetServiceAccountsForServiceContracts(ServiceAccountIds)",
          "line": "187",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngineServiceContractApiAsync"
        },
        {
          "methodName": "SetServiceContract",
          "context": "                BillingEngineAsync.SetServiceContract(ServiceContract.id, ServiceAccount.id, ServiceAccount.id, SubscriptionIds)",
          "line": "204",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceAccountByServiceAccountId",
          "context": "    ServiceAccount = BillingEngine.GetServiceAccountByServiceAccountId(ServiceAccountId)",
          "line": "212",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        ServiceContractId = IdGenerator.GetNextAvailableId(TypeOfId.ServiceContractId)",
          "line": "292",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "SetServiceContract",
          "context": "        BillingEngineAsync.SetServiceContract(ServiceContractId, AccountId, ServiceAccountId, SubscriptionIds)",
          "line": "339",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    ServiceContractId = IdGenerator.GetNextAvailableId(TypeOfId.ServiceContractId)",
          "line": "355",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/ServiceContractApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "GetMapOldBundleToNew",
          "context": "    MapOldBundleToNew = ProductCatalog.GetMapOldBundleToNew()",
          "line": "46",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/SharedObjects.bs",
          "serviceName": "ProductCatalog"
        },
        {
          "methodName": "GetServiceAccountById",
          "context": "        ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "56",
          "file": "/src/Domain/components/Fulfillment/FulfillmentSrc/StartSupply.bs",
          "serviceName": "BillingEngine"
        }
      ]
    },
    { "componentName": "GeneralLedger", "references": [] },
    {
      "componentName": "IdentityServer",
      "references": [
        {
          "methodName": "GetUserAccountById",
          "context": "    UserAccountDto = CrmBackend.GetUserAccountById(AccountId).ToDto()",
          "line": "19",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/ApiUserApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendCredentials",
          "context": "            SendgridServiceAsync.SendCredentials(CustomerInfo, LoginInfo.login, Password)",
          "line": "43",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/ApiUserApi.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "EnsureUserAccountExists",
          "context": "    CrmBackend.EnsureUserAccountExists(AccountId)",
          "line": "75",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/IdentityServer.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AuthorizationCredentials[Login.ToLower()].accountId)",
          "line": "309",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/IdentityServer.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "EnsureUserAccountExists",
          "context": "    CrmBackend.EnsureUserAccountExists(AccountId)",
          "line": "330",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/IdentityServer.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccounts",
          "context": "    CustomerAccountList = CrmBackend.GetCustomerAccounts()",
          "line": "385",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/IdentityServer.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "EnsureUserAccountExists",
          "context": "    CrmBackend.EnsureUserAccountExists(SetEmployeeNewPasswordRequest.accountId)",
          "line": "43",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/LoginInfoCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(CustomerAccount.id, empty)",
          "line": "61",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/LoginInfoCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendResetPasswordEmail",
          "context": "    SendgridServiceAsync.SendResetPasswordEmail(CustomerInfo, UniqueKey, Login)",
          "line": "62",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/LoginInfoCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "            CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, ServiceAccountId)",
          "line": "69",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/LoginInfoCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendCredentials",
          "context": "            SendgridServiceAsync.SendCredentials(CustomerInfo, LoginInfo.login, Password)",
          "line": "74",
          "file": "/src/Domain/components/IdentityServer/IdentityServerSrc/LoginInfoCrud.bs",
          "serviceName": "SendgridServiceAsync"
        }
      ]
    },
    { "componentName": "IdGenerator", "references": [] },
    {
      "componentName": "InvoiceGenerator",
      "references": [
        {
          "methodName": "GetServiceAccountById",
          "context": "            ServiceAccount = BillingEngine.GetServiceAccountById(AccountId, ServiceAccountId)",
          "line": "10",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/DirectDebitBlockLogic.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "            Account = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "15",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/DirectDebitBlockLogic.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    id = IdGenerator.GetNextAvailableId(TypeOfId.DirectDebitBlock),",
          "line": "101",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/DirectDebitBlockLogic.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "ConfirmInvoiceClearances",
          "context": "    BillingEngineAsync.ConfirmInvoiceClearances(ConfirmInvoiceClearanceRequests)",
          "line": "28",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/FixApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "FillAccountPartForInvoicePdf",
          "context": "        CrmBackendAsync.FillAccountPartForInvoicePdf(InvoiceId, Invoice.accountId)",
          "line": "26",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InitiateInvoicePdfGenerationLogic.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "FillBillingEngineDataPartForInvoicePdf",
          "context": "        BillingEngineAsync.FillBillingEngineDataPartForInvoicePdf(InvoiceGenerationResult)",
          "line": "30",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InitiateInvoicePdfGenerationLogic.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "RemoveInvoicePdfs",
          "context": "    DocumentPrinterComponent.RemoveInvoicePdfs(InvoiceIds)",
          "line": "74",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InitiateInvoicePdfGenerationLogic.bs",
          "serviceName": "DocumentPrinterComponent"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "52",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "ExportInvoiceToFile",
          "context": "    InvoiceSender.ExportInvoiceToFile(InvoiceToFileDto)",
          "line": "54",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "InvoiceSender"
        },
        {
          "methodName": "CreateInvoiceCanceledGlEvent",
          "context": "    GeneralLedgerAsync.CreateInvoiceCanceledGlEvent(CreateInvoiceCanceledGlEventRequest, ServiceCategoryId)",
          "line": "193",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "ProcessClearanceEntityIdentificationResults",
          "context": "    BankComponentAsync.ProcessClearanceEntityIdentificationResults(ClearanceEntityIdentificationResults)",
          "line": "274",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "ProcessClearanceEntityIdentificationResults",
          "context": "    BankComponentAsync.ProcessClearanceEntityIdentificationResults(ClearanceEntityIdentificationResults)",
          "line": "291",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "InitiateInvoiceRecreation",
          "context": "    BillingEngine.InitiateInvoiceRecreation",
          "line": "376",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SendInvoiceNotification",
          "context": "        CrmBackendAsync.SendInvoiceNotification(InvoicesByInvoiceId[InvoiceId].ToInvoiceNotificationRequest())",
          "line": "522",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "SendInvoicePaymentRequest",
          "context": "    MailToPayAsync.SendInvoicePaymentRequest",
          "line": "551",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceApi.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "ConfirmInvoiceClearance",
          "context": "    BillingEngine.ConfirmInvoiceClearance(RequestId, InvoiceClearanceCollection, ChangedBy)",
          "line": "8",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceClearing.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ConfirmInvoiceClearance",
          "context": "    BillingEngine.ConfirmInvoiceClearance(RequestId, InvoiceClearanceCollection, \"System\")",
          "line": "84",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceClearing.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ConfirmInvoiceClearance",
          "context": "    BillingEngine.ConfirmInvoiceClearance(RequestId, InvoiceClearanceCollection, \"System\")",
          "line": "169",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceClearing.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ConfirmInvoiceClearances",
          "context": "    BillingEngineAsync.ConfirmInvoiceClearances(ConfirmInvoiceClearanceRequests)",
          "line": "181",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceClearing.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MoveToReminderSentOrderStateAsync",
          "context": "        FulfillmentAsync.MoveToReminderSentOrderStateAsync(Invoice.serviceAccountId, DateTime)",
          "line": "65",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationAndProcessing.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "SendToMailToPayPaylinkRequest",
          "context": "        MailToPayAsync.SendToMailToPayPaylinkRequest",
          "line": "69",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationAndProcessing.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "ProcessInvoice",
          "context": "        DunningServiceAsync.ProcessInvoice(Invoice.ToInvoiceProcessingRequest(), DateTime)",
          "line": "80",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationAndProcessing.bs",
          "serviceName": "DunningServiceAsync"
        },
        {
          "methodName": "ClearInvoiceGenerationRequestIds",
          "context": "        BillingEngineAsync.ClearInvoiceGenerationRequestIds(ServiceAccountVirtualBalanceRecordsRequestCollection)",
          "line": "155",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationAndProcessing.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "AcknowledgeFinalInvoiceCreationRequestsProcessed",
          "context": "        BillingEngineAsync.AcknowledgeFinalInvoiceCreationRequestsProcessed(ServiceAccountIds)",
          "line": "163",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationAndProcessing.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetIbansByServiceAccountIds",
          "context": "    IbansByServiceaccountId = BankComponent.GetIbansByServiceAccountIds(ServiceAccountIds)",
          "line": "5",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "SendMultipleInvoicePaymentRequests",
          "context": "        MailToPayAsync.SendMultipleInvoicePaymentRequests(SendMtpInvoicePaymentRequestCollection)",
          "line": "21",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "GetMandate",
          "context": "    Iban = BankComponent.GetMandate(InvoiceGenerationRequest.serviceAccountInvoiceInfo.serviceAccountId).memberIban",
          "line": "25",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "SendMultipleInvoicePaymentRequests",
          "context": "            MailToPayAsync.SendMultipleInvoicePaymentRequests(SendMtpInvoicePaymentRequestCollection)",
          "line": "38",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "CreateInvoiceGeneratedGlEvent",
          "context": "    GeneralLedgerAsync.CreateInvoiceGeneratedGlEvent(CreateInvoiceGeneratedGlEventRequest, ServiceCategoryId)",
          "line": "78",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "FillAccountPartForInvoicePdf",
          "context": "        CrmBackendAsync.FillAccountPartForInvoicePdf(InvoiceId, Invoice.accountId)",
          "line": "83",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "FillInvoiceDataPartForInvoicePdf",
          "context": "    DocumentPrinterComponentAsync.FillInvoiceDataPartForInvoicePdf(Invoice.id, Invoice.ToInvoicePdfDataDto(), InvoicePdfMergedInvoiceDtoCollection)",
          "line": "109",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        },
        {
          "methodName": "CreateInvoiceMergedGlEvent",
          "context": "        GeneralLedgerAsync.CreateInvoiceMergedGlEvent(CreateInvoiceMergedGlEventRequest, ServiceCategoryId)",
          "line": "152",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "ProcessDunningInvoiceRecreationRequest",
          "context": "            DunningServiceAsync.ProcessDunningInvoiceRecreationRequest",
          "line": "164",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "DunningServiceAsync"
        },
        {
          "methodName": "ProcessInvoiceGenerationResult",
          "context": "    BillingEngineAsync.ProcessInvoiceGenerationResult(InvoiceGenerationResult)",
          "line": "182",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/InvoiceCreationLogic.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "GetServiceCategoryBankPartByServiceCategoryId",
          "context": "    let CollectionDateDelays = BankComponent.GetServiceCategoryBankPartByServiceCategoryId(ServiceCategoryId).requestedCollectionDateDelays",
          "line": "2",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/PaymentArrangementLogic.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetServiceCategoryBankPartByServiceCategoryId",
          "context": "    let CollectionDateDelays = BankComponent.GetServiceCategoryBankPartByServiceCategoryId(StartPaymentArrangementRequest.serviceCategoryId).requestedCollectionDateDelays",
          "line": "10",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/PaymentArrangementLogic.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "GetVirtualBalanceRecords",
          "context": "            AdditionalAmount = BillingEngine.GetVirtualBalanceRecords(QuestPlusDunningInvoiceInfo.serviceAccountId)",
          "line": "7",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/QuestPlusApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "Generate",
          "context": "    ReportGenerator.Generate(QuestPlusReportEntries)",
          "line": "13",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/QuestPlusApi.bs",
          "serviceName": "ReportGenerator"
        },
        {
          "methodName": "CreateAndSendDirectDebitMessage",
          "context": "        BankComponentAsync.CreateAndSendDirectDebitMessage(CreateAndSendDirectDebitMessageRequest = CreateAndSendDirectDebitMessageRequest)",
          "line": "46",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/SendingInvoicesToBank.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "SendMultipleInvoicePaymentRequests",
          "context": "    MailToPayAsync.SendMultipleInvoicePaymentRequests(SendMtpInvoicePaymentRequestCollection)",
          "line": "42",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/TestApi.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "SendInvoicePaymentRequest",
          "context": "    MailToPayAsync.SendInvoicePaymentRequest(",
          "line": "52",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/TestApi.bs",
          "serviceName": "MailToPayAsync"
        },
        {
          "methodName": "ConfirmInvoiceDunningBlockCreationRequest",
          "context": "        DunningServiceAsync.ConfirmInvoiceDunningBlockCreationRequest(Invoice.accountId, Invoice.serviceAccountId,InvoiceId, CorrelationId)",
          "line": "4",
          "file": "/src/Domain/components/InvoiceGenerator/InvoiceGeneratorSrc/TryFindInvoiceForDunningBlock.bs",
          "serviceName": "DunningServiceAsync"
        }
      ]
    },
    {
      "componentName": "MailStorage",
      "references": [
        {
          "methodName": "ProccessMailAssignmentRequest",
          "context": "    CrmBackend.ProccessMailAssignmentRequest(MailAssignmentRequest)",
          "line": "34",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "AddCustomerAccountContact",
          "context": "        CrmBackend.AddCustomerAccountContact(AccountId, CustomerContact)",
          "line": "67",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "CreateMultipleTasks",
          "context": "    TaskManager.CreateMultipleTasks(BaseTaskCreationRequests)",
          "line": "76",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetEmailAttachmentAccessLink",
          "context": "    accesableLink = FileStorageComponent.GetEmailAttachmentAccessLink(EmailAttachment.attachmentId)",
          "line": "95",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "FileStorageComponent"
        },
        {
          "methodName": "RetrieveMails",
          "context": "    MailStorageConnector.RetrieveMails(MailsRetrieveRequest)",
          "line": "142",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "MailStorageConnector"
        },
        {
          "methodName": "AddCustomerAccountContact",
          "context": "    CrmBackend.AddCustomerAccountContact(AccountId = AccountId, CustomerContact = CustomerContact)",
          "line": "182",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetTasksByTaskType",
          "context": "    TaskList = TaskManager.GetTasksByTaskType(TaskType.MailReceived)",
          "line": "191",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "MakeTaskClosable",
          "context": "    TaskManager.MakeTaskClosable(BaseTask.id)",
          "line": "193",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "    TaskManagerAsync.CreateTaskAsync(BaseTaskCreationRequest)",
          "line": "195",
          "file": "/src/Domain/components/MailStorage/MailStorageSrc/MailStorageApi.bs",
          "serviceName": "TaskManagerAsync"
        }
      ]
    },
    {
      "componentName": "MailToPay",
      "references": [
        {
          "methodName": "GetServiceAccountShippingAddress",
          "context": "    let ShippingAddress = BillingEngine.GetServiceAccountShippingAddress(ServiceAccountId)",
          "line": "2",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/Helpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetProductsTextForMailToPay",
          "context": "        variable3 = BillingEngine.GetProductsTextForMailToPay(ServiceAccountId),",
          "line": "8",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/Helpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountShippingAddress",
          "context": "    let ShippingAddress = BillingEngine.GetServiceAccountShippingAddress(ServiceAccountId)",
          "line": "14",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/Helpers.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SetMtpExpirationStatusToInvoices",
          "context": "            InvoiceGeneratorAsync.SetMtpExpirationStatusToInvoices(MtpInvoiceExiprationRequestCollection)",
          "line": "21",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "ChangeMessageStatusByMpId",
          "context": "    MailToPayServiceAsync.ChangeMessageStatusByMpId(MtpPaymentRequest.mpId, MtpNewMessageStatus.Withdrawn, MtpPaymentRequest.serviceCategoryId)",
          "line": "58",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayServiceAsync"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "            id = IdGenerator.GetNextAvailableId(TypeOfId.MtpTransactionId),",
          "line": "66",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "MatchMtpTransactions",
          "context": "        BillingEngineAsync.MatchMtpTransactions(MtpTransactionList)",
          "line": "73",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "CreateBanktransactionAutoMatchedToMtpTransactionGlEvent",
          "context": "        GeneralLedgerAsync.CreateBanktransactionAutoMatchedToMtpTransactionGlEvent(BankTransactionId, Amount, CreatedOn, ServiceCategoryId)",
          "line": "88",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "GeneralLedgerAsync"
        },
        {
          "methodName": "GetAmoutsOfInvoicesByInvoiceId",
          "context": "            InvoiceAmounts = InvoiceGenerator.GetAmoutsOfInvoicesByInvoiceId(InvoiceIds)",
          "line": "95",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "InvoiceGenerator"
        },
        {
          "methodName": "GetMessageStatus",
          "context": "    MtpMessageStatusInfo = MailToPayService.GetMessageStatus(MessageId, ServiceCategoryId)",
          "line": "127",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayService"
        },
        {
          "methodName": "GetIbansByServiceAccountIds",
          "context": "    IbansByServiceaccountId = BankComponent.GetIbansByServiceAccountIds(ServiceAccountIds)",
          "line": "151",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "BankComponent"
        },
        {
          "methodName": "SendMessage",
          "context": "    MailToPayServiceAsync.SendMessage(MtpMessageInfo)",
          "line": "173",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayServiceAsync"
        },
        {
          "methodName": "SendMessage",
          "context": "    MailToPayServiceAsync.SendMessage(MtpMessageInfo)",
          "line": "211",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayServiceAsync"
        },
        {
          "methodName": "GetProductsTextForMailToPay",
          "context": "        variable3 = BillingEngine.GetProductsTextForMailToPay(ServiceAccountId),",
          "line": "241",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetServiceAccountShippingAddress",
          "context": "        variable5 = BillingEngine.GetServiceAccountShippingAddress(ServiceAccountId)",
          "line": "242",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "SendMessage",
          "context": "    MailToPayServiceAsync.SendMessage(MtpMessageInfo)",
          "line": "257",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayServiceAsync"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "279",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerAccountById",
          "context": "    CustomerAccount = CrmBackend.GetCustomerAccountById(AccountId)",
          "line": "324",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "CreateLink",
          "context": "    MailToPayServiceAsync.CreateLink(MtpCreateLinkRequest)",
          "line": "342",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayServiceAsync"
        },
        {
          "methodName": "ConfirmPostingToMailToPayForInvocies",
          "context": "            InvoiceGeneratorAsync.ConfirmPostingToMailToPayForInvocies(ConfirmInvociePostingToMailToPayRequestCollection)",
          "line": "405",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "ConfirmPostingToMailToPayForInvocies",
          "context": "        InvoiceGeneratorAsync.ConfirmPostingToMailToPayForInvocies(ConfirmInvociePostingToMailToPayRequestCollection)",
          "line": "417",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "InvoiceGeneratorAsync"
        },
        {
          "methodName": "GetMtPMessagesStatuses",
          "context": "    MailToPayServiceAsync.GetMtPMessagesStatuses(MtPGetPaymentMessagesStatusRequest)",
          "line": "457",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "MailToPayServiceAsync"
        },
        {
          "methodName": "SetMatchInfos",
          "context": "    BankComponentAsync.SetMatchInfos(SetMatchInfoRequests)",
          "line": "532",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPay.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "SetMtpExpirationStatusToInvoices",
          "context": "        InvoiceGeneratorAsync.SetMtpExpirationStatusToInvoices(MtpInvoiceExiprationRequestCollection)",
          "line": "8",
          "file": "/src/Domain/components/MailToPay/MailToPaySrc/MailToPayExpirationLogic.bs",
          "serviceName": "InvoiceGeneratorAsync"
        }
      ]
    },
    {
      "componentName": "NleNlApiComponent",
      "references": [
        {
          "methodName": "ValidateApiUser",
          "context": "    IsValid = IdentityServer.ValidateApiUser(Login, Password)",
          "line": "2",
          "file": "/src/Domain/components/NleNlApiComponent/NleNlApiComponentSrc/NleNlApi.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetProposition",
          "context": "    NleNleGetPropositionResponse = FulfillmentNleNlApi.GetProposition(NleNleGetPropositionRequest)",
          "line": "5",
          "file": "/src/Domain/components/NleNlApiComponent/NleNlApiComponentSrc/NleNlApi.bs",
          "serviceName": "FulfillmentNleNlApi"
        },
        {
          "methodName": "CreateNewTriplePlayOrderFromNleNl",
          "context": "    CreateOrderResponse = FulfillmentNleNlApi.CreateNewTriplePlayOrderFromNleNl(NleNlApiImportNewTriplePlayOrderRequest)",
          "line": "9",
          "file": "/src/Domain/components/NleNlApiComponent/NleNlApiComponentSrc/NleNlApi.bs",
          "serviceName": "FulfillmentNleNlApi"
        },
        {
          "methodName": "GetRetention",
          "context": "    GetRetentionResponse = FulfillmentNleNlApi.GetRetention(TokenId)",
          "line": "20",
          "file": "/src/Domain/components/NleNlApiComponent/NleNlApiComponentSrc/NleNlApi.bs",
          "serviceName": "FulfillmentNleNlApi"
        },
        {
          "methodName": "CreateProlongationOrder",
          "context": "    CreateOrderResponse = Fulfillment.CreateProlongationOrder(CreateProlongationOrderRequest)",
          "line": "23",
          "file": "/src/Domain/components/NleNlApiComponent/NleNlApiComponentSrc/NleNlApi.bs",
          "serviceName": "Fulfillment"
        }
      ]
    },
    {
      "componentName": "OldBEMigrationComponent",
      "references": [
        {
          "methodName": "GetNewServiceAccountsFromOldBE",
          "context": "    MigrationConnectorService.GetNewServiceAccountsFromOldBE()",
          "line": "2",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "GetActivationChangesForServiceAccounts",
          "context": "    MigrationConnectorService.GetActivationChangesForServiceAccounts()",
          "line": "5",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "GetStoppingChangesForServiceAccounts",
          "context": "    MigrationConnectorService.GetStoppingChangesForServiceAccounts()",
          "line": "8",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "GetCancelationChangesForServiceAccounts",
          "context": "    MigrationConnectorService.GetCancelationChangesForServiceAccounts()",
          "line": "11",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "MigrateCustomerAccountsFromOldBE",
          "context": "        CrmBackendAsync.MigrateCustomerAccountsFromOldBE(MigrationAccountDto.account)",
          "line": "21",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "MigrateServiceAccountFromOldBE",
          "context": "        BillingEngineAsync.MigrateServiceAccountFromOldBE(MigrationAccountDto.serviceAccount)",
          "line": "26",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MigrateMandatesFromOldBE",
          "context": "        BankComponentAsync.MigrateMandatesFromOldBE(MigrationAccountDto.mandate)",
          "line": "31",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationApi.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "MigrateCustomerAccountsFromOldBE",
          "context": "            CrmBackendAsync.MigrateCustomerAccountsFromOldBE(MigrationAccountDto.account)",
          "line": "13",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationAsynApi.bs",
          "serviceName": "CrmBackendAsync"
        },
        {
          "methodName": "MigrateServiceAccountFromOldBE",
          "context": "        BillingEngineAsync.MigrateServiceAccountFromOldBE(MigrationAccountDto.serviceAccount)",
          "line": "27",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationAsynApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "MigrateMandatesFromOldBE",
          "context": "        BankComponentAsync.MigrateMandatesFromOldBE(MigrationAccountDto.mandate)",
          "line": "38",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationAsynApi.bs",
          "serviceName": "BankComponentAsync"
        },
        {
          "methodName": "ConfirmServiceAccountMigrationFromOldBE",
          "context": "    MigrationConnectorService.ConfirmServiceAccountMigrationFromOldBE(OldServiceAccountId)",
          "line": "50",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/OldBEMigrationAsynApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "ActivateMigratedServiceAccount",
          "context": "        BillingEngineAsync.ActivateMigratedServiceAccount(ServiceAccountActivationChange)",
          "line": "5",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/ServiceAccountStatusChangeAsynApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ConfirmMigratedServiceAccountActivation",
          "context": "    MigrationConnectorService.ConfirmMigratedServiceAccountActivation(ServiceAccountId)",
          "line": "11",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/ServiceAccountStatusChangeAsynApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "StopMigratedServiceAccounts",
          "context": "        BillingEngineAsync.StopMigratedServiceAccounts(ServiceAccountStoppingChange)",
          "line": "17",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/ServiceAccountStatusChangeAsynApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ConfirmMigrationOfServiceAccountStopping",
          "context": "    MigrationConnectorService.ConfirmMigrationOfServiceAccountStopping(ServiceAccountId)",
          "line": "22",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/ServiceAccountStatusChangeAsynApi.bs",
          "serviceName": "MigrationConnectorService"
        },
        {
          "methodName": "CancelMigratedServiceAccount",
          "context": "        BillingEngineAsync.CancelMigratedServiceAccount(ServiceAccountCancelationChange)",
          "line": "29",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/ServiceAccountStatusChangeAsynApi.bs",
          "serviceName": "BillingEngineAsync"
        },
        {
          "methodName": "ConfirmMigrationOfServiceAccountCancelation",
          "context": "    MigrationConnectorService.ConfirmMigrationOfServiceAccountCancelation(ServiceAccountId)",
          "line": "35",
          "file": "/src/Domain/components/OldBEMigrationComponent/OldBEMigrationComponentSrc/ServiceAccountStatusChangeAsynApi.bs",
          "serviceName": "MigrationConnectorService"
        }
      ]
    },
    {
      "componentName": "PlanningstoolComponent",
      "references": [
        {
          "methodName": "SetOrderInstallationDate",
          "context": "    Fulfillment.SetOrderInstallationDate(OrderId, InstallationBookItemDate as DateTime)",
          "line": "17",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationBookApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendInstallationDate",
          "context": "    CrmBackend.SendInstallationDate",
          "line": "139",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationBookApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetServiceAccountShippingAddress",
          "context": "            InstallationRegionCode = BillingEngine.GetServiceAccountShippingAddress(InstallationRecord.serviceAccountId).zip.ToRegionCode()",
          "line": "88",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationBookItemCrud.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        id = IdGenerator.GetNextAvailableId(TypeOfId.InstallationProcessId),",
          "line": "62",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProcessApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "CreateOrder",
          "context": "    InstallationProviderConnector.CreateOrder(InstallationOrderCreationRequest)",
          "line": "10",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "InstallationProviderConnector"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "        InstallationOrderId = IdGenerator.GetNextAvailableId(TypeOfId.InstallationOrderId)",
          "line": "17",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "CheckIfCobsOrderCancelledOrDenied",
          "context": "    IsCobsCancelledOrder = Fulfillment.CheckIfCobsOrderCancelledOrDenied(EntityId)",
          "line": "79",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "UpdateOrder",
          "context": "    InstallationProviderConnector.UpdateOrder(InstallationOrderUpdateRequest)",
          "line": "96",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "InstallationProviderConnector"
        },
        {
          "methodName": "NotifyScheduleDate",
          "context": "    CrmBackend.NotifyScheduleDate(InstallationOrder.accountId, InstallationOrder.serviceAccountId, InstallationOrderState.scheduledBeginDate, InstallationOrderState.scheduledEndDate)",
          "line": "170",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SetOrderInstallationDate",
          "context": "        Fulfillment.SetOrderInstallationDate(InstallationOrder.entityId, InstallationDate)",
          "line": "323",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CancelOrder",
          "context": "    InstallationProviderConnector.CancelOrder(InstallationOrderCancelRequest)",
          "line": "361",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "InstallationProviderConnector"
        },
        {
          "methodName": "CreateTask",
          "context": "    TaskId = TaskManager.CreateTask(InstallationOrderBlockedTaskCreationRequest)",
          "line": "411",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/InstallationProviderApi.bs",
          "serviceName": "TaskManager"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PendingInstallationRequest.accountId, PendingInstallationRequest.serviceAccountId)",
          "line": "29",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/PendingInstallationRequestCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendUrlForInstallationDate",
          "context": "    SendgridServiceAsync.SendUrlForInstallationDate(CustomerInfo, PendingInstallationRequest.orderId)",
          "line": "31",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/PendingInstallationRequestCrud.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "            CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PendingInstallationRequest.accountId, PendingInstallationRequest.serviceAccountId)",
          "line": "5",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/Schedulers.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendPlanningsToolInstallationDateReminder",
          "context": "            SendgridServiceAsync.SendPlanningsToolInstallationDateReminder(CustomerInfo, PendingInstallationRequest.orderId)",
          "line": "7",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/Schedulers.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "            CustomerInfo = CrmBackend.GetCustomerInfoForEmail(PendingInstallationRequest.accountId, PendingInstallationRequest.serviceAccountId)",
          "line": "11",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/Schedulers.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendPlanningsToolInstallationDateReminder",
          "context": "            SendgridServiceAsync.SendPlanningsToolInstallationDateReminder(CustomerInfo, PendingInstallationRequest.orderId)",
          "line": "13",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/Schedulers.bs",
          "serviceName": "SendgridServiceAsync"
        },
        {
          "methodName": "InitiateOrdersPolling",
          "context": "    InstallationProviderConnector.InitiateOrdersPolling(InstallationOrdersPollingRequest)",
          "line": "37",
          "file": "/src/Domain/components/PlanningstoolComponent/PlanningstoolComponentSrc/Schedulers.bs",
          "serviceName": "InstallationProviderConnector"
        }
      ]
    },
    {
      "componentName": "PollingComponent",
      "references": [
        {
          "methodName": "GetNextDslOrderStatus",
          "context": "    CobsGetNextDslOrderStatusResponse = CobsService.GetNextDslOrderStatus(LastPolledId)",
          "line": "7",
          "file": "/src/Domain/components/PollingComponent/PollingComponentSrc/UpdateCobsDslOrderStatuses.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "ApplyStatusChangeToDslOrder",
          "context": "        FulfillmentAsync.ApplyStatusChangeToDslOrder(CobsGetNextDslOrderStatusResponse.cobsGetDslOrderResponse)",
          "line": "10",
          "file": "/src/Domain/components/PollingComponent/PollingComponentSrc/UpdateCobsDslOrderStatuses.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetNextTvOrderStatus",
          "context": "    CobsGetNextTvOrderStatusResponse = CobsService.GetNextTvOrderStatus(CobsGetNextTvOrderStatusRequest)",
          "line": "18",
          "file": "/src/Domain/components/PollingComponent/PollingComponentSrc/UpdateCobsDslOrderStatuses.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "ApplyStatusChangeToTvOrder",
          "context": "        FulfillmentAsync.ApplyStatusChangeToTvOrder(CobsTvOrderStatusInfo)",
          "line": "22",
          "file": "/src/Domain/components/PollingComponent/PollingComponentSrc/UpdateCobsDslOrderStatuses.bs",
          "serviceName": "FulfillmentAsync"
        },
        {
          "methodName": "GetNextVoipOrderStatus",
          "context": "    CobsGetNextVoipOrderStatusResponse = CobsService.GetNextVoipOrderStatus(CobsGetNextVoipOrderStatusRequest)",
          "line": "30",
          "file": "/src/Domain/components/PollingComponent/PollingComponentSrc/UpdateCobsDslOrderStatuses.bs",
          "serviceName": "CobsService"
        },
        {
          "methodName": "ApplyStatusChangeToVoipOrder",
          "context": "        FulfillmentAsync.ApplyStatusChangeToVoipOrder(CobsGetNextVoipOrderStatusResponse.orderInfo)",
          "line": "33",
          "file": "/src/Domain/components/PollingComponent/PollingComponentSrc/UpdateCobsDslOrderStatuses.bs",
          "serviceName": "FulfillmentAsync"
        }
      ]
    },
    {
      "componentName": "ProductCatalog",
      "references": [
        {
          "methodName": "RefreshMapOldBundleToNew",
          "context": "    Fulfillment.RefreshMapOldBundleToNew()",
          "line": "22",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/MapOldBundleToNewCrud.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "RefreshMapOldBundleToNew",
          "context": "    Fulfillment.RefreshMapOldBundleToNew()",
          "line": "37",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/MapOldBundleToNewCrud.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "RefreshMapOldBundleToNew",
          "context": "    Fulfillment.RefreshMapOldBundleToNew()",
          "line": "44",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/MapOldBundleToNewCrud.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CheckUsageOfEventRateClass",
          "context": "    if Cdr.CheckUsageOfEventRateClass(RateClassId)",
          "line": "30",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/EventRateClassCrud.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "CheckIfAnyOrderContainsProposition",
          "context": "    IsPropositionFound = Fulfillment.CheckIfAnyOrderContainsProposition(PropositionId)",
          "line": "312",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/PropositionCrud.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "GetAllServiceCategories",
          "context": "    ServiceCategoryIds = BillingEngine.GetAllServiceCategories()",
          "line": "375",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/PropositionCrud.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "CreatePartnerAccount",
          "context": "    AccountId = CrmBackend.CreatePartnerAccount(CreatePartnerAccountRequest)",
          "line": "80",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetPartnerAccountBySalesOfficeId",
          "context": "    PartnerAccount = CrmBackend.GetPartnerAccountBySalesOfficeId(SalesOfficeId)",
          "line": "105",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "UpdatePartnerAccount",
          "context": "    CrmBackend.UpdatePartnerAccount(UpdatePartnerAccountRequest)",
          "line": "111",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "TryAssignRoleFromUser",
          "context": "        IdentityServer.TryAssignRoleFromUser(PartnerAccount.id, RoleName)",
          "line": "114",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "TryRevokeRoleFromUser",
          "context": "        IdentityServer.TryRevokeRoleFromUser(PartnerAccount.id, RoleName)",
          "line": "116",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetPartnerAccountBySalesOfficeId",
          "context": "    PartnerAccount = CrmBackend.GetPartnerAccountBySalesOfficeId(SalesOfficeId)",
          "line": "171",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "EndSession",
          "context": "    IdentityServer.EndSession(PartnerAccount.id)",
          "line": "173",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteCredentials",
          "context": "    IdentityServer.DeleteCredentials(PartnerAccount.id)",
          "line": "174",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/SalesOfficeCrud.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "CheckGlAccountExists",
          "context": "    if not GeneralLedger.CheckGlAccountExists(TypeOfServiceCreationRequest.glAccountNumber)",
          "line": "2",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/TypeOfServiceCrud.bs",
          "serviceName": "GeneralLedger"
        },
        {
          "methodName": "CreateTypeOfServiceGlPart",
          "context": "    GeneralLedger.CreateTypeOfServiceGlPart(CreateTypeOfServiceGlPartRequest)",
          "line": "36",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/ProductCatalogCrudLogic/TypeOfServiceCrud.bs",
          "serviceName": "GeneralLedger"
        },
        {
          "methodName": "TryUpdateProductCatalogEntity",
          "context": "    BillingEngine.TryUpdateProductCatalogEntity(RootPersistentObject.currentProductCatalogEntity.version)",
          "line": "57",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/Publish.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "TryUpdateProductCatalogEntity",
          "context": "    Fulfillment.TryUpdateProductCatalogEntity(RootPersistentObject.currentProductCatalogEntity.version)",
          "line": "63",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/Publish.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreatePhoneCodeOneway",
          "context": "    Cdr.CreatePhoneCodeOneway",
          "line": "125",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/SeedPhoneCodes.bs",
          "serviceName": "Cdr"
        },
        {
          "methodName": "CreatePhoneCodeOneway",
          "context": "    Cdr.CreatePhoneCodeOneway",
          "line": "139",
          "file": "/src/Domain/components/ProductCatalog/ProductCatalogSrc/SeedPhoneCodes.bs",
          "serviceName": "Cdr"
        }
      ]
    },
    {
      "componentName": "SendgridComponent",
      "references": [
        {
          "methodName": "GetCustomerAccounts",
          "context": "    CustomerAccountList = CrmBackend.GetCustomerAccounts()",
          "line": "9",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "DoesLoginExist",
          "context": "    if IdentityServer.DoesLoginExist(Email)",
          "line": "16",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AddUniqueKey",
          "context": "    IdentityServer.AddUniqueKey(UniqueKeyInfo)",
          "line": "22",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AddResetUniqueKey",
          "context": "    IdentityServer.AddResetUniqueKey(ResetUniqueKeyInfo)",
          "line": "23",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AddRestoreUniqueKey",
          "context": "    IdentityServer.AddRestoreUniqueKey(RestoreUniqueKeyInfo)",
          "line": "24",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetCustomerAccountByLogin",
          "context": "    CustomerAccount = IdentityServer.GetCustomerAccountByLogin(Login)",
          "line": "26",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(CustomerAccount.id, empty)",
          "line": "27",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendResetUsernameEmail",
          "context": "    SendgridComponentService.SendResetUsernameEmail(CustomerInfo, Email, UniqueKey)",
          "line": "29",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "GetResetUniqueKeyInfo",
          "context": "    if IsEmpty(IdentityServer.GetResetUniqueKeyInfo(UniqueKey))",
          "line": "32",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "ValidatePassword",
          "context": "    IsPasswordValidated = IdentityServer.ValidatePassword(Password)",
          "line": "35",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetRestoreUniqueKeyInfo",
          "context": "    RestoreUniqueKeyInfo = IdentityServer.GetRestoreUniqueKeyInfo(UniqueKey)",
          "line": "39",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetResetUniqueKeyInfo",
          "context": "    ResetUniqueKeyInfo = IdentityServer.GetResetUniqueKeyInfo(UniqueKey)",
          "line": "41",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetLoginInfo",
          "context": "    LoginInfo = IdentityServer.GetLoginInfo(Email = ResetUniqueKeyInfo.login)",
          "line": "46",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteResetUniqueKeyInfo",
          "context": "    IdentityServer.DeleteResetUniqueKeyInfo(ResetUniqueKeyInfo)",
          "line": "51",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetCustomerAccountByLogin",
          "context": "    CustomerAccount = IdentityServer.GetCustomerAccountByLogin(Login)",
          "line": "54",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteLoginInfo",
          "context": "    IdentityServer.DeleteLoginInfo(Email = ResetUniqueKeyInfo.login)",
          "line": "56",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AddLoginInfo",
          "context": "    IdentityServer.AddLoginInfo(LoginInfo, Email = ResetUniqueKeyInfo.email)",
          "line": "57",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetRestoreUniqueKeyInfo",
          "context": "    RestoreUniqueKeyInfo = IdentityServer.GetRestoreUniqueKeyInfo(UniqueKey)",
          "line": "65",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetLoginInfo",
          "context": "    LoginInfo = IdentityServer.GetLoginInfo(Email = RestoreUniqueKeyInfo.email)",
          "line": "69",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetResetUniqueKeyInfo",
          "context": "    if !IsEmpty(IdentityServer.GetResetUniqueKeyInfo(UniqueKey))",
          "line": "73",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetResetUniqueKeyInfo",
          "context": "        ResetUniqueKeyInfo = IdentityServer.GetResetUniqueKeyInfo(UniqueKey)",
          "line": "74",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteResetUniqueKeyInfo",
          "context": "        IdentityServer.DeleteResetUniqueKeyInfo(ResetUniqueKeyInfo)",
          "line": "75",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetCustomerAccountByLogin",
          "context": "    CustomerAccount = IdentityServer.GetCustomerAccountByLogin(Login)",
          "line": "78",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteLoginInfo",
          "context": "    IdentityServer.DeleteLoginInfo(Email = RestoreUniqueKeyInfo.email)",
          "line": "80",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AddLoginInfo",
          "context": "    IdentityServer.AddLoginInfo(LoginInfo, Email = LoginInfo.login)",
          "line": "81",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "DeleteRestoreUniqueKey",
          "context": "    IdentityServer.DeleteRestoreUniqueKey(RestoreUniqueKeyInfo)",
          "line": "83",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "SendCallDataRecordCoveragePartiallyExhaustedNotification",
          "context": "    SendgridComponentService.SendCallDataRecordCoveragePartiallyExhaustedNotification(CustomerInfo, BundleName, WarningLimit)",
          "line": "93",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendCallDataRecordCoverageFullyExhaustedNotification",
          "context": "    SendgridComponentService.SendCallDataRecordCoverageFullyExhaustedNotification(CustomerInfo, BundleName, Size)",
          "line": "96",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendResetPasswordEmail",
          "context": "    SendgridComponentService.SendResetPasswordEmail(CustomerInfo, UniqueKey, Login)",
          "line": "99",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendCredentials",
          "context": "    SendgridComponentService.SendCredentials(CustomerInfo, Login, Password)",
          "line": "102",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "RegisterUser",
          "context": "    IdentityServer.RegisterUser(CustomerInfo.email, Password, ConfirmPassword, CustomerInfo.customerId)",
          "line": "123",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "AssignRoles",
          "context": "    IdentityServer.AssignRoles(CustomerInfo.customerId, RoleNames) ",
          "line": "126",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "GetUniqueCustomerKey",
          "context": "    UniqueKey = IdentityServer.GetUniqueCustomerKey(Login)",
          "line": "128",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "IdentityServer"
        },
        {
          "methodName": "SendCancelOrder",
          "context": "    SendgridComponentService.SendCancelOrder(CustomerInfo)",
          "line": "132",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendCancelProlongation",
          "context": "    SendgridComponentService.SendCancelProlongation(CustomerInfo)",
          "line": "135",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendActiveSupplyCheckEmail",
          "context": "    SendgridComponentService.SendActiveSupplyCheckEmail(CustomerInfo, EmailMessageType)",
          "line": "143",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "ChangingVoipBundlesEmail",
          "context": "    SendgridComponentService.ChangingVoipBundlesEmail(CustomerInfo, StartDate, AddedBundleNames)",
          "line": "147",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendNewServiceAccountEmailMessage",
          "context": "    SendgridComponentService.SendNewServiceAccountEmailMessage(CustomerInfo)",
          "line": "150",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTrackAndTraceEmail",
          "context": "    SendgridComponentService.SendTrackAndTraceEmail(CustomerInfo, TrackAndTraceUrls)",
          "line": "156",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTvPinEmail",
          "context": "    SendgridComponentService.SendTvPinEmail(CustomerInfo, PinCode, SubscriptionNumber)",
          "line": "162",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "StopTvEmail",
          "context": "    SendgridComponentService.StopTvEmail(CustomerInfo, StopTvDate, BundleNames)",
          "line": "165",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "StartTvEmail",
          "context": "    SendgridComponentService.StartTvEmail(CustomerInfo, StartTvDate, BundleNames)",
          "line": "168",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "StopVoipEmail",
          "context": "    SendgridComponentService.StopVoipEmail(CustomerInfo, StopVoipDate, BundleNames)",
          "line": "171",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendEmailWithContractToCustomer",
          "context": "    SendgridComponentService.SendEmailWithContractToCustomer(CustomerInfo, ContractId, DateTime)",
          "line": "177",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "UpdateOrderContractInfo",
          "context": "    Fulfillment.UpdateOrderContractInfo",
          "line": "179",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendEmailWithProlongationContractToCustomer",
          "context": "    SendgridComponentService.SendEmailWithProlongationContractToCustomer(CustomerInfo, ContractId, StartOn)",
          "line": "193",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "UpdateOrderContractInfo",
          "context": "    Fulfillment.UpdateOrderContractInfo",
          "line": "195",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "SendEmailWithStartVoipNotification",
          "context": "    SendgridComponentService.SendEmailWithStartVoipNotification(CustomerInfo, StartDate, BundleNames)",
          "line": "206",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendInstallationReminder",
          "context": "    SendgridComponentService.SendInstallationReminder(CustomerInfo)",
          "line": "210",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "ResetIban",
          "context": "    SendgridComponentService.ResetIban(CustomerInfo, MemberIban, DateTime, City)",
          "line": "221",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendUrlForInstallationDate",
          "context": "    SendgridComponentService.SendUrlForInstallationDate(CustomerInfo, OrderId)",
          "line": "224",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendInstallationDate",
          "context": "    SendgridComponentService.SendInstallationDate(CustomerInfo, InstallationBookItemDate, PartOfDay)",
          "line": "227",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendPlanningsToolInstallationDateReminder",
          "context": "    SendgridComponentService.SendPlanningsToolInstallationDateReminder(CustomerInfo, OrderId)",
          "line": "230",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendEndOfDeliveryNotification",
          "context": "    SendgridComponentService.SendEndOfDeliveryNotification(CustomerInfo, CreatedBy, EndDate, ReasonCodeName)",
          "line": "233",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTriplePlayUnsuspensionNotification",
          "context": "    SendgridComponentService.SendTriplePlayUnsuspensionNotification(CustomerInfo)",
          "line": "237",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendContractChangedEmail",
          "context": "    SendgridComponentService.SendContractChangedEmail(CustomerInfo, ComponentName, ComponentChangeDate)",
          "line": "243",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTresholdUnsuspendNotification",
          "context": "    SendgridComponentService.SendTresholdUnsuspendNotification(CustomerInfo)",
          "line": "246",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTresholdSuspendNotification",
          "context": "    SendgridComponentService.SendTresholdSuspendNotification(CustomerInfo, ThresholdValue)",
          "line": "249",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTresholdWarningNotification",
          "context": "    SendgridComponentService.SendTresholdWarningNotification(CustomerInfo, ThresholdValue)",
          "line": "252",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendAnnouncementFirstIncasso",
          "context": "    SendgridComponentService.SendAnnouncementFirstIncasso(CustomerInfo, Amount, Iban, InvoiceDate, CollectionDate, AttachmentId)",
          "line": "255",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendNewPhoneNumberIsActive",
          "context": "    SendgridComponentService.SendNewPhoneNumberIsActive(CustomerInfo, StartDate, Phone)",
          "line": "258",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendMonthlyInvoiceNotification",
          "context": "    SendgridComponentService.SendMonthlyInvoiceNotification(CustomerInfo, Amount, InvoiceDate, AttachmentId)",
          "line": "261",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendFinalInvoiceNotification",
          "context": "    SendgridComponentService.SendFinalInvoiceNotification(CustomerInfo, Amount, InvoiceDate, AttachmentId)",
          "line": "264",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "GetMessageById",
          "context": "    SendgridEmailDto = OutgoingMailService.GetMessageById(EmailId)",
          "line": "267",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "OutgoingMailService"
        },
        {
          "methodName": "GetListOfOutgoingMessagesForEmail",
          "context": "    EmailIdList = OutgoingMailService.GetListOfOutgoingMessagesForEmail(AccountId)",
          "line": "270",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "OutgoingMailService"
        },
        {
          "methodName": "GetAttachmentById",
          "context": "    SendgridEmailAttachmentDto = OutgoingMailService.GetAttachmentById(AttachmentId, EmailId)",
          "line": "273",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "OutgoingMailService"
        },
        {
          "methodName": "SendOverstapServiceCanceled",
          "context": "    SendgridComponentService.SendOverstapServiceCanceled(CustomerInfoCollection)",
          "line": "276",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendCurrentProviderInfoRequest",
          "context": "    SendgridComponentService.SendCurrentProviderInfoRequest(CustomerInfo)",
          "line": "279",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "GetListOfOutgoingMessagesForServiceAccount",
          "context": "    EmailIdList = OutgoingMailService.GetListOfOutgoingMessagesForServiceAccount(ServiceAccountId, Email)",
          "line": "282",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "OutgoingMailService"
        },
        {
          "methodName": "SendTripplePlayOnAirMessage",
          "context": "    SendgridComponentService.SendTripplePlayOnAirMessage(CustomerInfo, StartOn, EndOn, ContractDuration, String, Integer)",
          "line": "285",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendCreateMovingOrderEmail",
          "context": "    SendgridComponentService.SendCreateMovingOrderEmail(CustomerInfo, CurrentAddress, FullAddress, DateTime, OldDslPrice, NewDslPrice, OldDslProductName, NewDslProductName)",
          "line": "288",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendTechDeliveredStatusMovingOrderEmail",
          "context": "    SendgridComponentService.SendTechDeliveredStatusMovingOrderEmail(CustomerInfo)",
          "line": "291",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "SendConfirmMovingOrderEmail",
          "context": "    SendgridComponentService.SendConfirmMovingOrderEmail(CustomerInfo, CurrentAddress, FullAddress, DateTime, OldDslPrice, NewDslPrice, OldDslProductName, NewDslProductName)",
          "line": "294",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "GetCustomerInfoForEmail",
          "context": "    CustomerInfo = CrmBackend.GetCustomerInfoForEmail(AccountId, \"\")",
          "line": "313",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "SendEmailFromCrm",
          "context": "    SendgridComponentService.SendEmailFromCrm(CustomerInfo, EmailBody, EmailSubject, CcEmails, CrmEmailAttachments)",
          "line": "316",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "NotifyScheduleDate",
          "context": "    SendgridComponentService.NotifyScheduleDate(CustomerInfo, ScheduleStartDateTime, ScheduleEndDateTime)",
          "line": "319",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "AddTVBundle",
          "context": "    SendgridComponentService.AddTVBundle(CustomerInfo, StartDate, BundleNames)",
          "line": "322",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "DropTVBundle",
          "context": "    SendgridComponentService.DropTVBundle(CustomerInfo, EndDate, BundleNames)",
          "line": "325",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "DropVOIPBundle",
          "context": "    SendgridComponentService.DropVOIPBundle(CustomerInfo, EndDate, BundleNames)",
          "line": "328",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "AddSTB",
          "context": "    SendgridComponentService.AddSTB(CustomerInfo, StartDate, BundleName, Integer)",
          "line": "331",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "DropTVSubscription",
          "context": "    SendgridComponentService.DropTVSubscription(CustomerInfo, EndDate, BundleNames)",
          "line": "334",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "DropVOIPSubscription",
          "context": "    SendgridComponentService.DropVOIPSubscription(CustomerInfo, EndDate, BundleNames)",
          "line": "337",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        },
        {
          "methodName": "AddVoipBundles",
          "context": "    SendgridComponentService.AddVoipBundles(CustomerInfo, StartDate, BundleNames)",
          "line": "340",
          "file": "/src/Domain/components/SendgridComponent/SendgridComponentSrc/SendgridService.bs",
          "serviceName": "SendgridComponentService"
        }
      ]
    },
    {
      "componentName": "TaskManager",
      "references": [
        {
          "methodName": "OnTaskClosed",
          "context": "    PlanningstoolService.OnTaskClosed(InstallationOrderBlockedTask.entityId, InstallationOrderBlockedTask.id)",
          "line": "5",
          "file": "/src/Domain/components/TaskManager/TaskManagerSrc/Helpers/TaskClosureActions.bs",
          "serviceName": "PlanningstoolService"
        },
        {
          "methodName": "GetNextAvailableId",
          "context": "    TaskRuleId = IdGenerator.GetNextAvailableId(TypeOfId.TaskRuleId)",
          "line": "35",
          "file": "/src/Domain/components/TaskManager/TaskManagerSrc/TaskManagerApi.bs",
          "serviceName": "IdGenerator"
        },
        {
          "methodName": "EnsureEmployeeAccountExists",
          "context": "    CrmBackend.EnsureEmployeeAccountExists(AccountId)",
          "line": "237",
          "file": "/src/Domain/components/TaskManager/TaskManagerSrc/TaskManagerApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "EnsureEmployeeAccountExists",
          "context": "    CrmBackend.EnsureEmployeeAccountExists(AccountId)",
          "line": "266",
          "file": "/src/Domain/components/TaskManager/TaskManagerSrc/TaskManagerApi.bs",
          "serviceName": "CrmBackend"
        },
        {
          "methodName": "GetCustomerIdByOrderId",
          "context": "                AccountId = Fulfillment.GetCustomerIdByOrderId(OrderId)",
          "line": "330",
          "file": "/src/Domain/components/TaskManager/TaskManagerSrc/TaskManagerApi.bs",
          "serviceName": "Fulfillment"
        },
        {
          "methodName": "CreateTaskAsync",
          "context": "        TaskManagerAsync.CreateTaskAsync(AutoProlongationFailedTaskCreationRequest)",
          "line": "350",
          "file": "/src/Domain/components/TaskManager/TaskManagerSrc/TaskManagerApi.bs",
          "serviceName": "TaskManagerAsync"
        }
      ]
    },
    {
      "componentName": "VideoOnDemand",
      "references": [
        {
          "methodName": "RetrieveVideoOnDemandDataRecords",
          "context": "    VideoOnDemandConnector.RetrieveVideoOnDemandDataRecords(LastRetrievedRecordNumber, NumberOfRecordsToRetrievePerRequest)",
          "line": "7",
          "file": "/src/Domain/components/VideoOnDemand/VideoOnDemandSrc/VideoOnDemandApi.bs",
          "serviceName": "VideoOnDemandConnector"
        },
        {
          "methodName": "ProcessVideoOnDemandDataRecords",
          "context": "    BillingEngine.ProcessVideoOnDemandDataRecords(VideoOnDemandDataRecords)",
          "line": "34",
          "file": "/src/Domain/components/VideoOnDemand/VideoOnDemandSrc/VideoOnDemandApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "ProcessVideoOnDemandDataRecords",
          "context": "    BillingEngine.ProcessVideoOnDemandDataRecords(VodDataRecords)",
          "line": "95",
          "file": "/src/Domain/components/VideoOnDemand/VideoOnDemandSrc/VideoOnDemandApi.bs",
          "serviceName": "BillingEngine"
        },
        {
          "methodName": "FillVoddrPartForInvoicePdf",
          "context": "    DocumentPrinterComponentAsync.FillVoddrPartForInvoicePdf(InvoiceId, InvoicePdfAccumulatedVideoOnDemandDataRecordDtoCollection)",
          "line": "125",
          "file": "/src/Domain/components/VideoOnDemand/VideoOnDemandSrc/VideoOnDemandApi.bs",
          "serviceName": "DocumentPrinterComponentAsync"
        }
      ]
    }
  ]
}
